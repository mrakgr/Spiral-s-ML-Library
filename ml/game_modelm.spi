open corebase
open layers
open tensorm

type size = // The block and thread dimensions should match blocks_per_grid and threads_per_block
    {
        ensemble : int
    }

open corecuda
open rangem
inl run' forall inp out. (exists t. model : exists t. model t) (input : pickler.pu inp) (output : int -> out) (size : size) (data : inp) =
    inl x = key_extract model .input : tensor (int * int * int) float
    assert (fst x.dim = blocks_per_grid()) "The first dimension of the input tensor has to equal the number of blocks per grid."
    inl x = x |> apply block_index()
    assert (fst x.dim = threads_per_block()) "The second dimension of the input tensor has to equal number threads per block."

    inl ls = create_layer_state()

    // Sets the input tensor to 0.
    loop.projective threads_in_block(x.dim) fun i =>
        tensor_set i 0 x

    __syncthreads()

    // Serializes the data into the input tensor.
    inl _ =
        open pickler
        inl tns_input = x |> apply thread_index()
        input.pickle data (0,tns_input |> ptr_at_current_offset)

    __syncthreads()

    // Runs the model on the inputs.
    loop.linear size.ensemble fun ensemble =>
        graph_run_device model ls {ensemble}

    __syncthreads()

    // Randomly pick an ensemble id for each thread.
    inl ensemble_id : int = random.int_range {from=0; nearTo=size.ensemble} ls.rng

    // Extract the output probabilities (already calculated).
    inl output_probs =
        (key_extract model .output_probs : tensor d4 float) 
        |> apply ensemble_id
        |> apply block_index()

    // Extract the output indices tensor.
    inl output_indices =
        (key_extract model .output_indices : tensor d2 int) 
        |> apply block_index()

    inl () = // Calculate the output indices.
        open primitives
        row_reduce (local_discrete_sampling ls.rng) output_probs output_indices
    
    inl output_id = tensor_index thread_index() output_indices
    inl sampling_prob_ensemble = apply thread_index() output_probs
    {
        sampling_prob_ensemble
        action = output output_id
        sampling_prob_selected = tensor_index output_id sampling_prob_ensemble
    }

nominal game_model inp out = 
    {
        model : exists t. model t
        input : pickler.pu inp
        output : int -> out
        size : size
    }

inl run forall inp out. (game_model {model input output size} : game_model inp out) = run' model input output size
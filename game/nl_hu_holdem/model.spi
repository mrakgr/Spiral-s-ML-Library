open corebase
open corecuda
open tensorm
open ml.layers
open game

inl nlholdem_input() : pickler.pu history =
    open pickler
    inl card : pu card = alt {
        King = unit()
        Queen = unit()
        Jack = unit()
    }
    inl action : pu action = alt {
        Fold = unit()
        Call = unit()
        Raise = unit()
    }
    inl action_or_card : pu (choice2 action card) = action ++ card
    inl history : pu history = sa_list action_or_card
    history

inl nlholdem_graph() =
    inl pu_history = nlholdem_input()
    inl size = {
        ensemble = 4 // The third dimension of each weight layer.
        block = blocks_per_grid()
        thread = threads_per_block()
        inner = modup pu_history.size 128
    }

    inl graph =
        (input .input (size.block,size.thread,size.inner) : graph (tensor (int * int * int) float))
        |> matmul_ensemble (size.ensemble,size.inner,size.inner)
        |> masked_softmax_and_discrete_sample' 3 (
            pair (input .output_probs   (size.ensemble,size.block,size.thread,size.inner) |> apply .ensemble)
                 (input .output_indices (size.ensemble,size.block,size.thread) |> apply .ensemble)
            )

    graph

inl nlholdem_output : int -> _ = function
    | 0 => Fold
    | 1 => Call
    | 2 => Raise
    | _ => failwith "Invalid output id in the Leduc model."

open ml.models
inl game_graph() : game_graph _ _ =
    game_graph {
        graph = exists nlholdem_graph()
        input = nlholdem_input()
        output = nlholdem_output
    }


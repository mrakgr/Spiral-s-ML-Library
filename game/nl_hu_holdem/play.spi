open corebase
open coreext
open game


union player_type =
    | Computer
    | Random
    | Human

type player_types = sam.sa 2 player_type

union ui_game_state =
    | GameNotStarted
    | WaitingForActionFromPlayerId : table
    | GameOver : table

type state_public =
    {
        ui_game_state : ui_game_state
        pl_type : player_types
        messages : messages
    }

type state_private = 
    {
        game : option game_node
        deck : deck
    }

type state_neural =
    {
        model_data : ml.layers.model_data
    }

type state_game = 
    {
        private : state_private
        public : state_public
    }

type state =
    {
        game : state_game
        neural : state_neural
    }

inl init_game() =
    {
        public = {
            ui_game_state = GameNotStarted
            pl_type = arraym.fromList [Computer; Human]
            messages = sa_create
        }
        private = {
            deck = lib.deckm.create()
            game = None
        }
    }

inl init() : state = 
    {
        game = init_game()
        neural = {
            model_data = model.game_graph() |> ml.cfr_models.init |> ml.cfr_models.to_model_data
        }
    }

open corecuda

type state_internal =
    {
        ui_game_state : refm.ref ui_game_state
        pl_type : refm.ref player_types
        game : refm.ref (option game_node)
        deck : refm.ref deck
        messages : refm.ref messages
        rng : refm.ref random.philox_state
    }

// Converts the given state to internal one.
// The refs will point to the original locations.
inl state_to_internal rng (state : state_game) : state_internal =
    {
        ui_game_state = refm.from_local state.public.ui_game_state
        pl_type = refm.from_local state.public.pl_type
        game = refm.from_local state.private.game
        deck = refm.from_local state.private.deck
        messages = refm.from_local state.public.messages
        rng
    }

// Sets the internal state to the values held by the regular one.
inl internal_set (state_internal : state_internal) (state : state_game) =
    open refm
    state_internal.ui_game_state <-# state.public.ui_game_state
    state_internal.pl_type <-# state.public.pl_type
    state_internal.game <-# state.private.game
    state_internal.deck <-# state.private.deck
    state_internal.messages <-# state.public.messages

inl random_action = fun rng (table : table) =>
    inl player_turn = player_turn table
    inl full_stack = arraym.map2 (+) table.stack table.pot
    inl pot_size_needed_to_call = arraym.reduce max table.pot
    inl pot_after_calling = arraym.update' player_turn (min (pot_size_needed_to_call) (index full_stack player_turn)) table.pot
    inl pot_bet_size = arraym.reduce (+) pot_after_calling
    inl stack_after_calling = arraym.map2 (-) full_stack pot_after_calling
    inl raise x = // Only do the raise if there are enough chips in the stack after calling.
        inl prob = if table.min_raise <= x && x < index stack_after_calling player_turn then 1 else 0
        A_Raise x, prob
    inl actions : sam.sa 6 (action * f32) = arraym.fromList [
        A_Fold, if index table.pot player_turn < pot_size_needed_to_call then 1 else 0
        A_Call, 4
        raise (pot_bet_size / 3)
        raise (pot_bet_size / 2)
        raise pot_bet_size
        A_All_In, 1
        ]
    random.sample_discrete actions rng
    
let play_loop rng (neural : state_neural) (state : state_internal) node =
    open refm
    inl push_message = da_listm.push (to_local state.messages)
    inl deck = to_local state.deck
    inl pop_deck () = 
        open random
        inl cards, deck = lib.deckm.draw_cards rng deck
        refm.setref state.deck deck
        cards
    let get_community_cards street new_cards = 
        inl ar = sa_create
        inl push cards = arraym.iter (sa_listm.push ar) cards 
        match street with
        | Preflop => ()
        | Flop cards => push cards
        | Turn cards => push cards
        | River cards => push cards
        push new_cards
        ar : sa_listm.sa_list 5 _
    inl go_street (table : table) flop =
        inl new_cards = pop_deck()
        inl msg = CommunityCardsAre (get_community_cards table.street new_cards)
        push_message msg
        Some (flop table new_cards)

    inl body node =
        match node with
        | G_Fold table =>
            inl msg =
                inl chips_won = index table.pot (player_turn table)
                Fold {chips_won winner_id=next_turn table.round_turn % num_players()}
            push_message msg
            state.ui_game_state <-# GameOver(table)
            state.game <-# None
            None
        | G_Showdown table => 
            inl msg =
                inl community_cards = match table.street with River cards => cards | _ => failwith "Invalid street in showdown."
                inl h i : sam.sa 7 card = sam.merge (index table.pl_card i) community_cards |> nominal_recreate
                inl s0, s1 = lib.hand_rankerm.score (h 0), lib.hand_rankerm.score (h 1)
                inl chips_won, winner_id =
                    inl chips_won = index table.pot (player_turn table)
                    match comp s0 s1 with
                    | Gt => chips_won, 0
                    | Eq => 0, -1
                    | Lt => chips_won, 1
                inl hands_shown = arraym.fromList [s0; s1]
                Showdown {hands_shown chips_won winner_id}
            push_message msg
            state.ui_game_state <-# GameOver(table)
            state.game <-# None
            None
        | G_Round table =>
            inl player_turn = player_turn table
            match index #state.pl_type player_turn with
            | Computer =>
                open model
                inl model = ml.cfr_models.from_model_data model.game_graph() neural.model_data
                inl data = table, refm.to_local state.messages
                console.write_ln "Running the GPU model."
                inl action = ml.cfr_models.run state.rng model data |> action_conv table
                console.write "The action is: "
                console.write_ln action
                inl msg = PlayerAction(player_turn, action)
                push_message msg
                Some (round table action)
            | Human =>
                state.ui_game_state <-# WaitingForActionFromPlayerId(table)
                state.game <-# Some node
                None
            | Random =>
                inl action = random_action rng table
                inl msg = PlayerAction(player_turn, action)
                push_message msg
                Some (round table action)
        | G_Round'(table,action) =>
            inl msg = PlayerAction(player_turn table, action)
            push_message msg
            Some (round table action)
        | G_Flop table => go_street table flop
        | G_Turn table => go_street table turn
        | G_River table => go_street table river
        | G_Preflop => 
            inl c0,c1 = pop_deck(), pop_deck()
            push_message PlayerGotCards(0, c0)
            push_message PlayerGotCards(1, c1)
            Some (preflop (arraym.fromList [c0; c1]))
    
    loop.while (function Some => true | None => false) (optionm.bind body) (Some node) |> ignore

union event = 
    | StartGame
    | PlayerChanged : sam.sa 2 player_type
    | ActionSelected : action

inl event_loop rng state_neural (msg, state_internal : event * state_internal) : () =
    open refm
    match msg with
    | StartGame =>
        internal_set state_internal init_game()
        play_loop rng state_neural state_internal start()
    | PlayerChanged pl_type =>
        state_internal.pl_type <-# pl_type
    | ActionSelected action =>
        match #state_internal.game with
        | Some game =>
            match game with
            | G_Round table => play_loop rng state_neural state_internal G_Round'(table, action)
            | _ => failwith "Unexpected game node in ActionSelected."
        | None => failwith "The game hasn't been started in ActionSelected."

open corepython
open coreext
inl main() =
    named_tuple "HU_Holdem_Game" {
        init = fun () => jsonm.serialize init()
        event_loop_gpu = fun (msg, state : jsonm.json event * jsonm.json state) =>
            open serializerm
            inl seri = {
                msg = create_serializer
                game_state = create_serializer
            }
            serialize seri.msg (jsonm.deserialize msg)
            inl {game neural} = jsonm.deserialize state
            serialize seri.game_state game

            console.write_ln "Going to run the NL Holdem game kernel."
            global "import time"
            inl p : f64 = $"time.perf_counter()"

            run' fun () =>
                failwith "TODO"
                // inl rng = random.init {seed = random.clock64(); subsequence=conv rangem.threads_in_grid().from; offset=0}
                // inl c : _ int = refm.create_shared_var (const threads_per_block())
                // inl from = rangem.threads_in_grid().from
                // if from = 0 then
                //     inl msg, game_state = deserialize seri.msg, deserialize seri.game_state
                //     // When converting the state to internal form, the refs will point to the original.
                //     event_loop rng neural (msg, state_to_internal rng game_state)
                //     serialize seri.game_state game_state

                // // nn model loop
                // intrinsic.atomic_add_ref c -1 |> ignore
                // loop.while' (const true) fun () =>
                //     inl model = ml.cfr_models.from_model_data model.game_graph() neural.model_data
                //     ml.cfr_models.run rng model None |> ignore
                //     if refm.deref c = 0 then loop.break()

            console.write "The time it took to run the kernel (in seconds) is: "
            inl p2 : f64 = $"time.perf_counter()"
            console.write_ln (p2 - p)

            jsonm.serialize {
                game = deserialize seri.game_state
                neural
                }
    }
open corebase

type card = lib.cardm.card

union action =
    | A_All_In
    | A_Raise : int
    | A_Call
    | A_Fold

union player_type =
    | Computer
    | Human

union street =
    | Preflop
    | Flop : sam.sa 3 card
    | Turn : sam.sa 4 card
    | River : sam.sa 5 card

type table =
    {
        pot : sam.sa 2 int
        stack : sam.sa 2 int
        street : street
        pl_card : sam.sa 2 (sam.sa 2 card)
        round_turn : int
        min_raise : int
    }

union message =
    | PlayerGotCards : int * sam.sa 2 card
    | CommunityCardsAre : sa_listm.sa_list 5 card
    | PlayerAction : int * action
    | Showdown : {winner_id : int; chips_won : int; hands_shown : sam.sa 2 lib.hand_rankerm.hand_score}
    | Fold : {winner_id : int; chips_won : int}

type deck = lib.deckm.deck
type player_types = sam.sa 2 player_type
type messages = da_listm.da_list 128 message

union ui_game_state =
    | GameNotStarted
    | WaitingForActionFromPlayerId : table
    | GameOver : table

inl bb() = 2 : int
inl sb() = 1 : int
inl init_table (pl_card : sam.sa 2 (sam.sa 2 card)) : table =
    inl pot = arraym.fromList [bb(); sb()]
    inl stack_size = 100
    {
        pot
        stack = arraym.map (fun x => stack_size - x) pot
        street = Preflop
        pl_card
        round_turn = 0
        min_raise = bb()
    }

union game_node =
    | G_Preflop
    | G_Flop : table
    | G_Turn : table
    | G_River : table
    | G_Showdown : table
    | G_Round : table
    | G_Round' : table * action
    | G_Fold : table

let go_next_street (table : table) =
    match table.street with
    | Preflop => G_Flop table
    | Flop => G_Turn table
    | Turn => G_River table
    | River => G_Showdown table

inl num_players() = 2 : int
inl next_turn (player_turn : int) : int = player_turn + 1
inl player_turn (table : table) = table.round_turn % num_players()
let try_round (table : table) =
    let player_can_act (table : table) =
        inl player_turn = player_turn table
        inl has_chips_left = index table.stack player_turn > 0
        inl needs_calling = index table.pot player_turn < arraym.reduce max table.pot
        inl num_players_with_chips_left = arraym.fold (fun s x => s + if 0 < x then 1 else 0) 0 table.stack : int
        has_chips_left && (needs_calling || (table.round_turn < 2 && 0 < num_players_with_chips_left))
    listm.foldBack (fun table next () =>
        if player_can_act table then G_Round table else next()
        ) // Tries out these tables in order, testing whether the player on that turn act, and if so returns the table.
        [ table; {table with round_turn#=next_turn} ]
        // If all players are all in, goes to the next street.
        (fun () => go_next_street table)
        ()

inl round (table : table) (action : action) =
    inl player_turn = player_turn table
    match action with
    | A_Fold => G_Fold table
    | A_Call =>
        inl full_stack = arraym.map2 (+) table.stack table.pot
        inl pot_size_needed_to_call = arraym.reduce max table.pot
        inl pot = arraym.update' player_turn (min (pot_size_needed_to_call) (index full_stack player_turn)) table.pot
        inl stack = arraym.map2 (-) full_stack pot
        if player_turn < 2 then
            try_round {table with 
                pot stack
                round_turn#=next_turn
                }
        else go_next_street {table with pot stack}
    | A_Raise raise_amount =>
        assert (table.min_raise <= raise_amount) "The raise amount must match the minimum."
        inl full_stack = arraym.map2 (+) table.stack table.pot
        inl pot_size_needed_to_call = arraym.reduce max table.pot
        
        inl pot_after_calling = arraym.update' player_turn (min (pot_size_needed_to_call) (index full_stack player_turn)) table.pot
        inl stack_after_calling = arraym.map2 (-) full_stack pot_after_calling
        assert (raise_amount < index stack_after_calling player_turn) "The raise amount must be less than the stack size after calling."

        inl pot = arraym.update' player_turn (min (pot_size_needed_to_call + raise_amount) (index full_stack player_turn)) table.pot
        inl stack = arraym.map2 (-) full_stack pot
        try_round {table with
            pot stack
            min_raise = raise_amount
            round_turn #= next_turn
            }
    | A_All_In =>
        inl full_stack = arraym.map2 (+) table.stack table.pot
        inl pot_size_needed_to_call = arraym.reduce max table.pot
        inl pot_after_calling = arraym.update' player_turn (min (pot_size_needed_to_call) (index full_stack player_turn)) table.pot
        inl stack_after_calling = arraym.map2 (-) full_stack pot_after_calling
        
        inl raise_amount = index stack_after_calling player_turn
        inl pot = arraym.update' player_turn (min (pot_size_needed_to_call + raise_amount) (index full_stack player_turn)) table.pot
        inl stack = arraym.map2 (-) full_stack pot

        try_round {table with
            pot stack
            min_raise #= max raise_amount
            round_turn #= next_turn
            }        

inl flop (table : table) (cards : sam.sa 3 card) =
    try_round {table with 
        round_turn = 0
        min_raise = bb()
        street #= function Preflop => Flop cards | _ => failwith "Invalid street in flop."
        }
inl turn (table : table) (cards : sam.sa 1 card) =
    try_round {table with 
        round_turn = 0
        min_raise = bb()
        street #= function Flop x => Turn (sam.merge x cards |> nominal_recreate) | _ => failwith "Invalid street in turn."
        }
inl river (table : table) (cards : sam.sa 1 card) =
    try_round {table with 
        round_turn = 0
        min_raise = bb()
        street #= function Turn x => River (sam.merge x cards |> nominal_recreate) | _ => failwith "Invalid street in river."
        }
inl preflop (pl_card : sam.sa 2 (sam.sa 2 card)) = try_round (init_table pl_card)
inl fold (table : table) = G_Fold table
inl showdown (table : table) = G_Showdown table
inl start () = G_Preflop

type state_small = 
    {
        ui_game_state : ui_game_state
        pl_type : player_types
        game : option game_node
    }

type state_large =
    {
        deck : deck
        messages : messages
    }

type state =
    {
        small : state_small
        large : state_large
    }

type state_ui =
    {
        ui_game_state : ui_game_state
        pl_type : player_types
        messages : messages
    }

inl game_to_ui (x : state) : state_ui =
    {
        ui_game_state = x.small.ui_game_state
        pl_type = x.small.pl_type
        messages = x.large.messages
    }

inl init() : state = 
    {
        small = {
            ui_game_state = GameNotStarted
            pl_type = arraym.fromList [Computer; Human]
            game = None
        }
        large = {
            deck = lib.deckm.create()
            messages = sa_create
        }
    }

open corecuda

type state_large_ref =
    {
        deck : refm.ref deck
        messages : refm.ref messages
        rng : refm.ref random.philox_state
    }

inl large_to_refs (large : state_large) : state_large_ref =
    {large with
        deck#=refm.from_local
        messages#=refm.from_local
        rng=random.init {seed = $"clock64()"; subsequence=conv corecuda.rangem.threads_in_grid().from; offset=0}
    }

inl random_action = fun rng (table : table) =>
    inl player_turn = player_turn table
    inl full_stack = arraym.map2 (+) table.stack table.pot
    inl pot_size_needed_to_call = arraym.reduce max table.pot
    inl pot_after_calling = arraym.update' player_turn (min (pot_size_needed_to_call) (index full_stack player_turn)) table.pot
    inl stack_after_calling = arraym.map2 (-) full_stack pot_after_calling
    inl pot_bet_size = arraym.reduce (+) pot_after_calling
    inl raise x = // Only do the raise if there are enough chips in the stack after calling.
        inl prob = if table.min_raise <= x && x < index stack_after_calling player_turn then 1 else 0
        A_Raise x, prob
    inl actions : sam.sa 6 (action * f32) = arraym.fromList [
        A_Fold, if index table.pot player_turn < pot_size_needed_to_call then 1 else 0
        A_Call, 4
        raise (pot_bet_size / 3)
        raise (pot_bet_size / 2)
        raise pot_bet_size
        A_All_In, 1
        ]
    random.sample_discrete actions rng
    
let play_loop_inner (state : state_large_ref) (pl_type : player_types) node =
    inl push_message = da_listm.push (refm.to_local state.messages)
    inl deck = refm.to_local state.deck
    inl pop_deck () = 
        open random
        inl cards, deck = lib.deckm.draw_cards state.rng deck
        refm.setref state.deck deck
        cards
    inl done x = false, x
    inl continue x = true, x
    let get_community_cards street new_cards = 
        inl ar = sa_create
        inl push cards = arraym.iter (sa_listm.push ar) cards 
        match street with
        | Preflop => ()
        | Flop cards => push cards
        | Turn cards => push cards
        | River cards => push cards
        push new_cards
        ar : sa_listm.sa_list 5 _
    inl go_street (table : table) flop =
        inl new_cards = pop_deck()
        inl msg = CommunityCardsAre (get_community_cards table.street new_cards)
        push_message msg
        continue (flop table new_cards)

    inl body node =
        match node with
        | G_Fold table =>
            inl msg = 
                inl chips_won = index table.pot (player_turn table)
                Fold {chips_won winner_id=next_turn table.round_turn % num_players()}
            push_message msg
            done node
        | G_Showdown table => 
            inl msg =
                inl community_cards = match table.street with River cards => cards | _ => failwith "Invalid street in showdown."
                inl h i : sam.sa 7 card = sam.merge (index table.pl_card i) community_cards |> nominal_recreate
                inl s0, s1 = lib.hand_rankerm.score (h 0), lib.hand_rankerm.score (h 1)
                inl chips_won, winner_id =
                    inl chips_won = index table.pot (player_turn table)
                    match comp s0 s1 with
                    | Gt => chips_won, 0
                    | Eq => 0, -1
                    | Lt => chips_won, 1
                inl hands_shown = arraym.fromList [s0; s1]
                Showdown {hands_shown chips_won winner_id}
            push_message msg
            done node
        | G_Round table =>
            inl player_turn = player_turn table
            match index pl_type player_turn with
            | Human =>
                done node
            | Computer =>
                inl action = random_action state.rng table
                inl msg = PlayerAction(player_turn, action)
                push_message msg
                continue (round table action)
        | G_Round'(table,action) =>
            inl msg = PlayerAction(player_turn table, action)
            push_message msg
            continue (round table action)
        | G_Flop table => go_street table flop
        | G_Turn table => go_street table turn
        | G_River table => go_street table river
        | G_Preflop => 
            inl c0,c1 = pop_deck(), pop_deck()
            push_message PlayerGotCards(0, c0)
            push_message PlayerGotCards(1, c1)
            continue (preflop (arraym.fromList [c0; c1]))
    
    loop.while fst (snd >> body) (continue node) |> snd

let play_loop (small : state_small) (large : state_large_ref) node : state_small =
    match play_loop_inner large small.pl_type node with
    | G_Round table as game =>
        {small with
            ui_game_state = WaitingForActionFromPlayerId(table)
            game = Some game
            }
    | G_Showdown table | G_Fold table =>
        {small with
            ui_game_state = GameOver(table)
            game = None
            }
    | game =>
        failwith "Unexpected node received in play_loop."

union event = 
    | StartGame
    | PlayerChanged : sam.sa 2 player_type
    | ActionSelected : action

inl event_loop (msg, {small large} & state : event * state) : state =
    inl large_refs = large_to_refs large
    inl small =
        match msg with
        | StartGame =>
            open refm
            inl ({small large} as state) = init()
            large_refs.deck <-# large.deck
            large_refs.messages <-# large.messages
            play_loop small large_refs start()
        | PlayerChanged pl_type => {small with pl_type}
        | ActionSelected action =>
            match small.game with
            | Some game => 
                match game with
                | G_Round table => play_loop small large_refs G_Round'(table, action)
                | _ => failwith "Unexpected game node in ActionSelected."
            | None => small
    {small large}

open corepython
inl main() =
    named_tuple "HU_Holdem_Game" {
        init = fun () =>
            inl x = init()
            jsonm.serialize {
                game_state = x
                ui_state = game_to_ui x
            }

        event_loop_gpu = fun (msg, game_state : jsonm.json event * jsonm.json state) =>
            open serializer
            inl seri = {
                msg = create_serializer
                game_state = create_serializer
                ui_state = create_serializer
            }
            
            inl dup forall e. (jsonm.json x : jsonm.json e) : jsonm.json (e * e) = jsonm.json $"!x, !x"
            inl msg, game_state = jsonm.deserialize msg, jsonm.deserialize game_state
            serialize seri.msg msg
            serialize seri.game_state game_state

            console.write_ln "Going to run the kernel."
            global "import time"
            inl p : f64 = $"time.perf_counter()"
            run fun () =>
                inl from = rangem.threads_in_grid().from
                if from = 0 then
                    inl game_state = event_loop (deserialize seri.msg, deserialize seri.game_state)
                    // inl game_state = deserialize seri.game_state
                    serialize seri.game_state game_state
                    serialize seri.ui_state (game_to_ui game_state)
            inl p2 : f64 = $"time.perf_counter()"
            console.write "The time it took to run the kernel (in seconds) is: "
            console.write_ln (p2 - p)
            jsonm.serialize {
                game_state = deserialize seri.game_state
                ui_state = deserialize seri.ui_state
            }
    }
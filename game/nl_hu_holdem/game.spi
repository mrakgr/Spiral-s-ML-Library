open corebase
open lib

union action =
    | A_All_In
    | A_Raise : int
    | A_Call
    | A_Fold

union street =
    | Preflop
    | Flop : sa 3 card
    | Turn : sa 4 card
    | River : sa 5 card

type table =
    {
        pot : sa 2 int
        stack : sa 2 int
        street : street
        pl_card : sa 2 (sa 2 card)
        round_turn : int
        min_raise : int
    }

union message =
    | PlayerGotCards : int * sa 2 card
    | CommunityCardsAre : sa_list 5 card
    | PlayerAction : int * action
    | Showdown : {winner_id : int; chips_won : int; hands_shown : sa 2 lib.hand_rankerm.hand_score}
    | Fold : {winner_id : int; chips_won : int}

type messages = sa_list 128 message

inl bb() = 2 : int
inl sb() = 1 : int
inl init_table (pl_card : sa 2 (sa 2 card)) : table =
    inl pot = arraym.fromList [bb(); sb()]
    inl stack_size = 100
    {
        pot
        stack = arraym.map (fun x => stack_size - x) pot
        street = Preflop
        pl_card
        round_turn = 0
        min_raise = bb()
    }

union game_node =
    | G_Preflop
    | G_Flop : table
    | G_Turn : table
    | G_River : table
    | G_Showdown : table
    | G_Round : table
    | G_Round' : table * action
    | G_Fold : table

let go_next_street (table : table) =
    match table.street with
    | Preflop => G_Flop table
    | Flop => G_Turn table
    | Turn => G_River table
    | River => G_Showdown table

inl num_players() = 2 : int
inl next_turn (round_turn : int) : int = round_turn + 1
inl player_turn (table : table) = table.round_turn % num_players()
// inl toggle (round_turn : int) : int = player_turn round_turn ^^^ 1
let try_round (table : table) =
    let player_can_act (table : table) =
        inl player_turn = player_turn table
        inl has_chips_left = index table.stack player_turn > 0
        inl needs_calling = index table.pot player_turn < arraym.reduce max table.pot
        inl num_players_with_chips_left = arraym.fold (fun s x => s + if 0 < x then 1 else 0) 0 table.stack : int
        has_chips_left && (needs_calling || (table.round_turn < 2 && 0 < num_players_with_chips_left))
    listm.foldBack (fun table next () =>
        if player_can_act table then G_Round table else next()
        ) // Tries out these tables in order, testing whether the player on that turn act, and if so returns the table.
        [ table; {table with round_turn#=next_turn} ]
        // If all players are all in, goes to the next street.
        (fun () => go_next_street table)
        ()

inl round (table : table) (action : action) =
    inl player_turn = player_turn table
    match action with
    | A_Fold => G_Fold table
    | A_Call =>
        inl full_stack = arraym.map2 (+) table.stack table.pot
        inl pot_size_needed_to_call = arraym.reduce max table.pot
        inl pot = arraym.update' player_turn (min (pot_size_needed_to_call) (index full_stack player_turn)) table.pot
        inl stack = arraym.map2 (-) full_stack pot
        if player_turn < 2 then
            try_round {table with 
                pot stack
                round_turn#=next_turn
                }
        else go_next_street {table with pot stack}
    | A_Raise raise_amount =>
        assert (table.min_raise <= raise_amount) "The raise amount must match the minimum."
        inl full_stack = arraym.map2 (+) table.stack table.pot
        inl pot_size_needed_to_call = arraym.reduce max table.pot
        
        inl pot_after_calling = arraym.update' player_turn (min (pot_size_needed_to_call) (index full_stack player_turn)) table.pot
        inl stack_after_calling = arraym.map2 (-) full_stack pot_after_calling
        assert (raise_amount < index stack_after_calling player_turn) "The raise amount must be less than the stack size after calling."

        inl pot = arraym.update' player_turn (min (pot_size_needed_to_call + raise_amount) (index full_stack player_turn)) table.pot
        inl stack = arraym.map2 (-) full_stack pot
        try_round {table with
            pot stack
            min_raise = raise_amount
            round_turn #= next_turn
            }
    | A_All_In =>
        inl full_stack = arraym.map2 (+) table.stack table.pot
        inl pot_size_needed_to_call = arraym.reduce max table.pot
        inl pot_after_calling = arraym.update' player_turn (min (pot_size_needed_to_call) (index full_stack player_turn)) table.pot
        inl stack_after_calling = arraym.map2 (-) full_stack pot_after_calling
        
        inl raise_amount = index stack_after_calling player_turn
        inl pot = arraym.update' player_turn (min (pot_size_needed_to_call + raise_amount) (index full_stack player_turn)) table.pot
        inl stack = arraym.map2 (-) full_stack pot

        try_round {table with
            pot stack
            min_raise #= max raise_amount
            round_turn #= next_turn
            }        

inl flop (table : table) (cards : sa 3 card) =
    try_round {table with 
        round_turn = 0
        min_raise = bb()
        street #= function Preflop => Flop cards | _ => failwith "Invalid street in flop."
        }
inl turn (table : table) (cards : sa 1 card) =
    try_round {table with 
        round_turn = 0
        min_raise = bb()
        street #= function Flop x => Turn (sam.merge x cards |> nominal_recreate) | _ => failwith "Invalid street in turn."
        }
inl river (table : table) (cards : sa 1 card) =
    try_round {table with 
        round_turn = 0
        min_raise = bb()
        street #= function Turn x => River (sam.merge x cards |> nominal_recreate) | _ => failwith "Invalid street in river."
        }
inl preflop (pl_card : sa 2 (sa 2 card)) = try_round (init_table pl_card)
inl fold (table : table) = G_Fold table
inl showdown (table : table) = G_Showdown table
inl game_start() = G_Preflop


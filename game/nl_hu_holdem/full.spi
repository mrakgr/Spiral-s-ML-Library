open corebase
open corecuda
open corepython
open coreext
open serializerm

// This is so we don't accidentally run the wrong model in the future.
type neural_ptr_type = .cem

inl event_loop_gpu = fun (msg, state : _ event * _ (state neural_ptr_type)) =>
    inl msg, {game neural} = jsonm.deserialize msg, jsonm.deserialize state
    inl seri = {
        msg = create_serializer : serializer event
        game_state = create_serializer : serializer state_game
    }

    serialize seri.game_state game

    console.write_ln "Going to run the NL Holdem full kernel."
    global "import time"
    inl p : f64 = $"time.perf_counter()"

    inl effects : plist ui_effects = plistm.create'
    match msg with
    | StartTrainingVsCallingMachine => train_cem.vs_calling_machine neural |> plistm.from_2d_tensor |> AddRewardsCallingMachine |> plistm.push effects
    | StartTrainingVsSelf => train_cem.vs_self neural |> plistm.from_2d_tensor |> AddRewardsSelf |> plistm.push effects
    | StartGame | PlayerChanged | ActionSelected => serialize seri.msg msg . play_cem.vs_human seri neural

    device_sync()

    inl p2 : f64 = $"time.perf_counter()"
    console.write "The time it took to run the kernel (in seconds) is: "
    console.write_ln (p2 - p)

    inl state = {
        game = deserialize seri.game_state
        neural
        }

    jsonm.serialize (state, effects)

inl main() =
    named_tuple "Holdem_Full" {
        init = fun () => jsonm.serialize init(model_cem.game_graph() |> ml.cem_models.init |> ml.cem_models.to_model_ptrs : _ neural_ptr_type)
        event_loop_gpu
    }
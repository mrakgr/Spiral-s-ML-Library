kernel = r"""
#include <new>
#include <assert.h>
#include <stdio.h>
#include <curand_kernel.h>
#include <mma.h>
using namespace nvcuda;
#include <cuda/pipeline>
#include <cooperative_groups/memcpy_async.h>
#include <cooperative_groups.h>
#include <cooperative_groups/reduce.h>
#include <cooperative_groups/scan.h>
#include <cuda/semaphore>
__device__ cuda::binary_semaphore<cuda::thread_scope_system> console_lock(1);
using default_int = int;
using default_uint = unsigned int;
template <typename el>
struct sptr // Shared pointer for the Spiral datatypes. They have to have the refc field inside them to work.
{
    el* base;

    __device__ sptr() : base(nullptr) {}
    __device__ sptr(el* ptr) : base(ptr) { this->base->refc++; }

    __device__ ~sptr()
    {
        if (this->base != nullptr && --this->base->refc == 0)
        {
            delete this->base;
            this->base = nullptr;
        }
    }

    __device__ sptr(sptr& x)
    {
        this->base = x.base;
        this->base->refc++;
    }

    __device__ sptr(sptr&& x)
    {
        this->base = x.base;
        x.base = nullptr;
    }

    __device__ sptr& operator=(sptr& x)
    {
        if (this->base != x.base)
        {
            delete this->base;
            this->base = x.base;
            this->base->refc++;
        }
        return *this;
    }

    __device__ sptr& operator=(sptr&& x)
    {
        if (this->base != x.base)
        {
            delete this->base;
            this->base = x.base;
            x.base = nullptr;
        }
        return *this;
    }
};

template <typename el>
struct csptr : public sptr<el>
{ // Shared pointer for closures specifically.
    using sptr<el>::sptr;
    template <typename... Args>
    __device__ auto operator()(Args... args) -> decltype(this->base->operator()(args...))
    {
        return this->base->operator()(args...);
    }
};

template <typename el, default_int max_length>
struct static_array
{
    el ptr[max_length];
    __device__ el& operator[](default_int i) {
        assert("The index has to be in range." && 0 <= i && i < max_length);
        return this->ptr[i];
    }
};

template <typename el, default_int max_length>
struct static_array_list
{
    default_int length{ 0 };
    el ptr[max_length];

    __device__ el& operator[](default_int i) {
        assert("The index has to be in range." && 0 <= i && i < this->length);
        return this->ptr[i];
    }
    __device__ void push(el& x) {
        ptr[this->length++] = x;
        assert("The array after pushing should not be greater than max length." && this->length <= max_length);
    }
    __device__ void push(el&& x) {
        ptr[this->length++] = std::move(x);
        assert("The array after pushing should not be greater than max length." && this->length <= max_length);
    }
    __device__ el pop() {
        assert("The array before popping should be greater than 0." && 0 < this->length);
        auto x = ptr[--this->length];
        ptr[this->length].~el();
        new (&ptr[this->length]) el();
        return x;
    }
    // Should be used only during initialization.
    __device__ void unsafe_set_length(default_int i) {
        assert("The new length should be in range." && 0 <= i && i <= max_length);
        this->length = i;
    }
};

template <typename el, default_int max_length>
struct dynamic_array_base
{
    int refc{ 0 };
    el* ptr;

    __device__ dynamic_array_base() : ptr(new el[max_length]) {}
    __device__ ~dynamic_array_base() { delete[] this->ptr; }

    __device__ el& operator[](default_int i) {
        assert("The index has to be in range." && 0 <= i && i < this->length);
        return this->ptr[i];
    }
};

template <typename el, default_int max_length>
struct dynamic_array
{
    sptr<dynamic_array_base<el, max_length>> ptr;

    __device__ dynamic_array() = default;
    __device__ dynamic_array(bool t) : ptr(new dynamic_array_base<el, max_length>()) {}
    __device__ el& operator[](default_int i) {
        return this->ptr.base->operator[](i);
    }
};

template <typename el, default_int max_length>
struct dynamic_array_list_base
{
    int refc{ 0 };
    default_int length{ 0 };
    el* ptr;

    __device__ dynamic_array_list_base() : ptr(new el[max_length]) {}
    __device__ dynamic_array_list_base(default_int l) : ptr(new el[max_length]) { this->unsafe_set_length(l); }
    __device__ ~dynamic_array_list_base() { delete[] this->ptr; }

    __device__ el& operator[](default_int i) {
        assert("The index has to be in range." && 0 <= i && i < this->length);
        return this->ptr[i];
    }
    __device__ void push(el& x) {
        ptr[this->length++] = x;
        assert("The array after pushing should not be greater than max length." && this->length <= max_length);
    }
    __device__ void push(el&& x) {
        ptr[this->length++] = std::move(x);
        assert("The array after pushing should not be greater than max length." && this->length <= max_length);
    }
    __device__ el pop() {
        assert("The array before popping should be greater than 0." && 0 < this->length);
        auto x = ptr[--this->length];
        ptr[this->length].~el();
        new (&ptr[this->length]) el();
        return x;
    }
    // Should be used only during initialization.
    __device__ void unsafe_set_length(default_int i) {
        assert("The new length should be in range." && 0 <= i && i <= max_length);
        this->length = i;
    }
};

template <typename el, default_int max_length>
struct dynamic_array_list
{
    sptr<dynamic_array_list_base<el, max_length>> ptr;

    __device__ dynamic_array_list() = default;
    __device__ dynamic_array_list(default_int l) : ptr(new dynamic_array_list_base<el, max_length>(l)) {}

    __device__ el& operator[](default_int i) {
        return this->ptr.base->operator[](i);
    }
    __device__ void push(el& x) {
        this->ptr.base->push(x);
    }
    __device__ void push(el&& x) {
        this->ptr.base->push(std::move(x));
    }
    __device__ el pop() {
        return this->ptr.base->pop();
    }
    // Should be used only during initialization.
    __device__ void unsafe_set_length(default_int i) {
        this->ptr.base->unsafe_set_length(i);
    }
    __device__ default_int length_() {
        return this->ptr.base->length;
    }
};

struct Union1;
struct Union2;
struct Union0;
__device__ int f_1(unsigned char * v0);
__device__ void f_3(unsigned char * v0);
__device__ Union1 f_2(unsigned char * v0);
__device__ Union2 f_5(unsigned char * v0);
__device__ static_array<Union2,2> f_4(unsigned char * v0);
__device__ Union0 f_0(unsigned char * v0);
struct Union5;
struct Union4;
struct Union3;
struct Tuple0;
struct Union6;
struct Union7;
struct Tuple1;
__device__ unsigned long long f_7(unsigned char * v0);
__device__ int f_8(unsigned char * v0);
struct Tuple2;
__device__ unsigned char f_13(unsigned char * v0);
__device__ unsigned char f_12(unsigned char * v0);
__device__ static_array<unsigned char,2> f_11(unsigned char * v0);
__device__ int f_14(unsigned char * v0);
__device__ static_array<unsigned char,3> f_15(unsigned char * v0);
__device__ static_array<unsigned char,5> f_16(unsigned char * v0);
__device__ static_array<unsigned char,4> f_17(unsigned char * v0);
__device__ Tuple2 f_10(unsigned char * v0);
struct Tuple3;
__device__ int f_19(unsigned char * v0);
__device__ Tuple3 f_18(unsigned char * v0);
__device__ Union4 f_9(unsigned char * v0);
__device__ int f_20(unsigned char * v0);
__device__ static_array_list<unsigned char,5> f_22(unsigned char * v0);
struct Tuple4;
__device__ Tuple4 f_23(unsigned char * v0);
struct Tuple5;
__device__ int f_25(unsigned char * v0);
__device__ Tuple5 f_24(unsigned char * v0);
struct Tuple6;
__device__ Tuple6 f_26(unsigned char * v0);
struct Tuple7;
__device__ Tuple0 f_29(unsigned char * v0);
__device__ Tuple0 f_28(unsigned char * v0);
__device__ Tuple7 f_27(unsigned char * v0);
__device__ Union6 f_21(unsigned char * v0);
__device__ int f_30(unsigned char * v0);
__device__ Tuple1 f_6(unsigned char * v0);
struct StackMut0;
struct Tuple8;
struct Tuple9;
struct Tuple10;
__device__ unsigned int loop_34(unsigned int v0, curandStatePhilox4_32_10_t & v1);
__device__ Tuple10 draw_card_33(curandStatePhilox4_32_10_t & v0, unsigned long long v1);
__device__ Tuple8 draw_cards_32(curandStatePhilox4_32_10_t & v0, unsigned long long v1);
__device__ static_array_list<unsigned char,5> get_community_cards_35(Union5 v0, static_array<unsigned char,3> v1);
__device__ bool player_can_act_37(int v0, static_array<static_array<unsigned char,2>,2> v1, static_array<int,2> v2, int v3, static_array<int,2> v4, Union5 v5);
__device__ Union4 go_next_street_38(int v0, static_array<static_array<unsigned char,2>,2> v1, static_array<int,2> v2, int v3, static_array<int,2> v4, Union5 v5);
__device__ Union4 try_round_36(int v0, static_array<static_array<unsigned char,2>,2> v1, static_array<int,2> v2, int v3, static_array<int,2> v4, Union5 v5);
struct Tuple11;
__device__ Tuple11 draw_cards_39(curandStatePhilox4_32_10_t & v0, unsigned long long v1);
struct Tuple12;
__device__ Tuple12 draw_cards_40(curandStatePhilox4_32_10_t & v0, unsigned long long v1);
__device__ static_array_list<unsigned char,5> get_community_cards_41(Union5 v0, static_array<unsigned char,1> v1);
struct Union8;
struct Tuple13;
__device__ void method_42(unsigned int v0, float * v1, int v2);
__device__ void method_43(unsigned int v0, float * v1, int v2);
__device__ int int_range_44(int v0, int v1, curandStatePhilox4_32_10_t & v2);
struct Union9;
__device__ void block_matmul_45(float * v0, float * v1, int v2, float * v3);
__device__ void block_row_map_46(float * v0, int v1, float * v2);
struct Tuple14;
struct Tuple15;
struct Tuple16;
struct Union10;
struct Tuple17;
__device__ int loop_50(static_array<float,6> v0, float v1, int v2);
__device__ int pick_discrete__49(static_array<float,6> v0, float v1);
__device__ int sample_discrete__48(static_array<float,6> v0, curandStatePhilox4_32_10_t & v1);
__device__ Union1 sample_discrete_47(static_array<Tuple17,6> v0, curandStatePhilox4_32_10_t & v1);
struct Tuple18;
struct Tuple19;
struct Union11;
struct Tuple20;
struct Union12;
struct Tuple21;
struct Tuple22;
struct Union13;
struct Union14;
struct Union15;
struct Union16;
struct Union17;
__device__ Tuple0 score_51(static_array<unsigned char,7> v0);
__device__ void play_loop_31(unsigned char * v0, unsigned char * v1, unsigned char * v2, StackMut0 & v3, Union4 v4);
__device__ void f_53(unsigned char * v0, unsigned long long v1);
__device__ void f_54(unsigned char * v0, int v1);
__device__ void f_55(unsigned char * v0);
__device__ void f_57(unsigned char * v0, int v1);
__device__ void f_61(unsigned char * v0, unsigned char v1);
__device__ void f_60(unsigned char * v0, unsigned char v1);
__device__ void f_59(unsigned char * v0, static_array<unsigned char,2> v1);
__device__ void f_62(unsigned char * v0, int v1);
__device__ void f_63(unsigned char * v0, static_array<unsigned char,3> v1);
__device__ void f_64(unsigned char * v0, static_array<unsigned char,5> v1);
__device__ void f_65(unsigned char * v0, static_array<unsigned char,4> v1);
__device__ void f_58(unsigned char * v0, int v1, static_array<static_array<unsigned char,2>,2> v2, static_array<int,2> v3, int v4, static_array<int,2> v5, Union5 v6);
__device__ void f_67(unsigned char * v0, int v1);
__device__ void f_66(unsigned char * v0, int v1, static_array<static_array<unsigned char,2>,2> v2, static_array<int,2> v3, int v4, static_array<int,2> v5, Union5 v6, Union1 v7);
__device__ void f_56(unsigned char * v0, Union4 v1);
__device__ void f_68(unsigned char * v0, int v1);
__device__ void f_70(unsigned char * v0, static_array_list<unsigned char,5> v1);
__device__ void f_71(unsigned char * v0, int v1, int v2);
__device__ void f_73(unsigned char * v0, int v1);
__device__ void f_72(unsigned char * v0, int v1, Union1 v2);
__device__ void f_74(unsigned char * v0, int v1, static_array<unsigned char,2> v2);
__device__ void f_77(unsigned char * v0, static_array<unsigned char,5> v1, char v2);
__device__ void f_76(unsigned char * v0, static_array<unsigned char,5> v1, char v2);
__device__ void f_75(unsigned char * v0, int v1, static_array<Tuple0,2> v2, int v3);
__device__ void f_69(unsigned char * v0, Union6 v1);
__device__ void f_78(unsigned char * v0, Union2 v1);
__device__ void f_79(unsigned char * v0, int v1);
__device__ void f_52(unsigned char * v0, unsigned long long v1, Union3 v2, static_array_list<Union6,128> v3, static_array<Union2,2> v4, Union7 v5);
struct StackMut1;
struct Union18;
__device__ static_array_list<unsigned char,5> get_community_cards_81(Union5 v0, static_array<unsigned char,3> v1);
__device__ static_array_list<unsigned char,5> get_community_cards_82(Union5 v0, static_array<unsigned char,1> v1);
__device__ void method_80(unsigned char * v0, unsigned char * v1, unsigned char * v2, StackMut1 & v3, int v4, Union4 v5);
struct Tuple23;
struct Tuple24;
struct Tuple25;
__device__ void method_83(unsigned char * v0, unsigned char * v1, unsigned char * v2, StackMut1 & v3, Union4 v4);
__device__ void method_84(unsigned char * v0, unsigned char * v1, unsigned char * v2, StackMut1 & v3, Union4 v4);
struct Union1_0 { // A_All_In
};
struct Union1_1 { // A_Call
};
struct Union1_2 { // A_Fold
};
struct Union1_3 { // A_Raise
    int v0;
    __device__ Union1_3(int t0) : v0(t0) {}
    __device__ Union1_3() = delete;
};
struct Union1 {
    union {
        Union1_0 case0; // A_All_In
        Union1_1 case1; // A_Call
        Union1_2 case2; // A_Fold
        Union1_3 case3; // A_Raise
    };
    unsigned char tag{255};
    __device__ Union1() {}
    __device__ Union1(Union1_0 t) : tag(0), case0(t) {} // A_All_In
    __device__ Union1(Union1_1 t) : tag(1), case1(t) {} // A_Call
    __device__ Union1(Union1_2 t) : tag(2), case2(t) {} // A_Fold
    __device__ Union1(Union1_3 t) : tag(3), case3(t) {} // A_Raise
    __device__ Union1(Union1 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union1_0(x.case0); break; // A_All_In
            case 1: new (&this->case1) Union1_1(x.case1); break; // A_Call
            case 2: new (&this->case2) Union1_2(x.case2); break; // A_Fold
            case 3: new (&this->case3) Union1_3(x.case3); break; // A_Raise
        }
    }
    __device__ Union1(Union1 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union1_0(std::move(x.case0)); break; // A_All_In
            case 1: new (&this->case1) Union1_1(std::move(x.case1)); break; // A_Call
            case 2: new (&this->case2) Union1_2(std::move(x.case2)); break; // A_Fold
            case 3: new (&this->case3) Union1_3(std::move(x.case3)); break; // A_Raise
        }
    }
    __device__ Union1 & operator=(Union1 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // A_All_In
                case 1: this->case1 = x.case1; break; // A_Call
                case 2: this->case2 = x.case2; break; // A_Fold
                case 3: this->case3 = x.case3; break; // A_Raise
            }
        } else {
            this->~Union1();
            new (this) Union1{x};
        }
        return *this;
    }
    __device__ Union1 & operator=(Union1 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // A_All_In
                case 1: this->case1 = std::move(x.case1); break; // A_Call
                case 2: this->case2 = std::move(x.case2); break; // A_Fold
                case 3: this->case3 = std::move(x.case3); break; // A_Raise
            }
        } else {
            this->~Union1();
            new (this) Union1{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union1() {
        switch(this->tag){
            case 0: this->case0.~Union1_0(); break; // A_All_In
            case 1: this->case1.~Union1_1(); break; // A_Call
            case 2: this->case2.~Union1_2(); break; // A_Fold
            case 3: this->case3.~Union1_3(); break; // A_Raise
        }
        this->tag = 255;
    }
};
struct Union2_0 { // CallingMachine
};
struct Union2_1 { // Computer
};
struct Union2_2 { // Human
};
struct Union2_3 { // Random
};
struct Union2 {
    union {
        Union2_0 case0; // CallingMachine
        Union2_1 case1; // Computer
        Union2_2 case2; // Human
        Union2_3 case3; // Random
    };
    unsigned char tag{255};
    __device__ Union2() {}
    __device__ Union2(Union2_0 t) : tag(0), case0(t) {} // CallingMachine
    __device__ Union2(Union2_1 t) : tag(1), case1(t) {} // Computer
    __device__ Union2(Union2_2 t) : tag(2), case2(t) {} // Human
    __device__ Union2(Union2_3 t) : tag(3), case3(t) {} // Random
    __device__ Union2(Union2 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union2_0(x.case0); break; // CallingMachine
            case 1: new (&this->case1) Union2_1(x.case1); break; // Computer
            case 2: new (&this->case2) Union2_2(x.case2); break; // Human
            case 3: new (&this->case3) Union2_3(x.case3); break; // Random
        }
    }
    __device__ Union2(Union2 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union2_0(std::move(x.case0)); break; // CallingMachine
            case 1: new (&this->case1) Union2_1(std::move(x.case1)); break; // Computer
            case 2: new (&this->case2) Union2_2(std::move(x.case2)); break; // Human
            case 3: new (&this->case3) Union2_3(std::move(x.case3)); break; // Random
        }
    }
    __device__ Union2 & operator=(Union2 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // CallingMachine
                case 1: this->case1 = x.case1; break; // Computer
                case 2: this->case2 = x.case2; break; // Human
                case 3: this->case3 = x.case3; break; // Random
            }
        } else {
            this->~Union2();
            new (this) Union2{x};
        }
        return *this;
    }
    __device__ Union2 & operator=(Union2 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // CallingMachine
                case 1: this->case1 = std::move(x.case1); break; // Computer
                case 2: this->case2 = std::move(x.case2); break; // Human
                case 3: this->case3 = std::move(x.case3); break; // Random
            }
        } else {
            this->~Union2();
            new (this) Union2{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union2() {
        switch(this->tag){
            case 0: this->case0.~Union2_0(); break; // CallingMachine
            case 1: this->case1.~Union2_1(); break; // Computer
            case 2: this->case2.~Union2_2(); break; // Human
            case 3: this->case3.~Union2_3(); break; // Random
        }
        this->tag = 255;
    }
};
struct Union0_0 { // ActionSelected
    Union1 v0;
    __device__ Union0_0(Union1 t0) : v0(t0) {}
    __device__ Union0_0() = delete;
};
struct Union0_1 { // PlayerChanged
    static_array<Union2,2> v0;
    __device__ Union0_1(static_array<Union2,2> t0) : v0(t0) {}
    __device__ Union0_1() = delete;
};
struct Union0_2 { // StartGame
};
struct Union0_3 { // StartTrainingVsCallingMachine
};
struct Union0_4 { // StartTrainingVsSelf
};
struct Union0 {
    union {
        Union0_0 case0; // ActionSelected
        Union0_1 case1; // PlayerChanged
        Union0_2 case2; // StartGame
        Union0_3 case3; // StartTrainingVsCallingMachine
        Union0_4 case4; // StartTrainingVsSelf
    };
    unsigned char tag{255};
    __device__ Union0() {}
    __device__ Union0(Union0_0 t) : tag(0), case0(t) {} // ActionSelected
    __device__ Union0(Union0_1 t) : tag(1), case1(t) {} // PlayerChanged
    __device__ Union0(Union0_2 t) : tag(2), case2(t) {} // StartGame
    __device__ Union0(Union0_3 t) : tag(3), case3(t) {} // StartTrainingVsCallingMachine
    __device__ Union0(Union0_4 t) : tag(4), case4(t) {} // StartTrainingVsSelf
    __device__ Union0(Union0 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union0_0(x.case0); break; // ActionSelected
            case 1: new (&this->case1) Union0_1(x.case1); break; // PlayerChanged
            case 2: new (&this->case2) Union0_2(x.case2); break; // StartGame
            case 3: new (&this->case3) Union0_3(x.case3); break; // StartTrainingVsCallingMachine
            case 4: new (&this->case4) Union0_4(x.case4); break; // StartTrainingVsSelf
        }
    }
    __device__ Union0(Union0 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union0_0(std::move(x.case0)); break; // ActionSelected
            case 1: new (&this->case1) Union0_1(std::move(x.case1)); break; // PlayerChanged
            case 2: new (&this->case2) Union0_2(std::move(x.case2)); break; // StartGame
            case 3: new (&this->case3) Union0_3(std::move(x.case3)); break; // StartTrainingVsCallingMachine
            case 4: new (&this->case4) Union0_4(std::move(x.case4)); break; // StartTrainingVsSelf
        }
    }
    __device__ Union0 & operator=(Union0 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // ActionSelected
                case 1: this->case1 = x.case1; break; // PlayerChanged
                case 2: this->case2 = x.case2; break; // StartGame
                case 3: this->case3 = x.case3; break; // StartTrainingVsCallingMachine
                case 4: this->case4 = x.case4; break; // StartTrainingVsSelf
            }
        } else {
            this->~Union0();
            new (this) Union0{x};
        }
        return *this;
    }
    __device__ Union0 & operator=(Union0 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // ActionSelected
                case 1: this->case1 = std::move(x.case1); break; // PlayerChanged
                case 2: this->case2 = std::move(x.case2); break; // StartGame
                case 3: this->case3 = std::move(x.case3); break; // StartTrainingVsCallingMachine
                case 4: this->case4 = std::move(x.case4); break; // StartTrainingVsSelf
            }
        } else {
            this->~Union0();
            new (this) Union0{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union0() {
        switch(this->tag){
            case 0: this->case0.~Union0_0(); break; // ActionSelected
            case 1: this->case1.~Union0_1(); break; // PlayerChanged
            case 2: this->case2.~Union0_2(); break; // StartGame
            case 3: this->case3.~Union0_3(); break; // StartTrainingVsCallingMachine
            case 4: this->case4.~Union0_4(); break; // StartTrainingVsSelf
        }
        this->tag = 255;
    }
};
struct Union5_0 { // Flop
    static_array<unsigned char,3> v0;
    __device__ Union5_0(static_array<unsigned char,3> t0) : v0(t0) {}
    __device__ Union5_0() = delete;
};
struct Union5_1 { // Preflop
};
struct Union5_2 { // River
    static_array<unsigned char,5> v0;
    __device__ Union5_2(static_array<unsigned char,5> t0) : v0(t0) {}
    __device__ Union5_2() = delete;
};
struct Union5_3 { // Turn
    static_array<unsigned char,4> v0;
    __device__ Union5_3(static_array<unsigned char,4> t0) : v0(t0) {}
    __device__ Union5_3() = delete;
};
struct Union5 {
    union {
        Union5_0 case0; // Flop
        Union5_1 case1; // Preflop
        Union5_2 case2; // River
        Union5_3 case3; // Turn
    };
    unsigned char tag{255};
    __device__ Union5() {}
    __device__ Union5(Union5_0 t) : tag(0), case0(t) {} // Flop
    __device__ Union5(Union5_1 t) : tag(1), case1(t) {} // Preflop
    __device__ Union5(Union5_2 t) : tag(2), case2(t) {} // River
    __device__ Union5(Union5_3 t) : tag(3), case3(t) {} // Turn
    __device__ Union5(Union5 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union5_0(x.case0); break; // Flop
            case 1: new (&this->case1) Union5_1(x.case1); break; // Preflop
            case 2: new (&this->case2) Union5_2(x.case2); break; // River
            case 3: new (&this->case3) Union5_3(x.case3); break; // Turn
        }
    }
    __device__ Union5(Union5 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union5_0(std::move(x.case0)); break; // Flop
            case 1: new (&this->case1) Union5_1(std::move(x.case1)); break; // Preflop
            case 2: new (&this->case2) Union5_2(std::move(x.case2)); break; // River
            case 3: new (&this->case3) Union5_3(std::move(x.case3)); break; // Turn
        }
    }
    __device__ Union5 & operator=(Union5 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // Flop
                case 1: this->case1 = x.case1; break; // Preflop
                case 2: this->case2 = x.case2; break; // River
                case 3: this->case3 = x.case3; break; // Turn
            }
        } else {
            this->~Union5();
            new (this) Union5{x};
        }
        return *this;
    }
    __device__ Union5 & operator=(Union5 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // Flop
                case 1: this->case1 = std::move(x.case1); break; // Preflop
                case 2: this->case2 = std::move(x.case2); break; // River
                case 3: this->case3 = std::move(x.case3); break; // Turn
            }
        } else {
            this->~Union5();
            new (this) Union5{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union5() {
        switch(this->tag){
            case 0: this->case0.~Union5_0(); break; // Flop
            case 1: this->case1.~Union5_1(); break; // Preflop
            case 2: this->case2.~Union5_2(); break; // River
            case 3: this->case3.~Union5_3(); break; // Turn
        }
        this->tag = 255;
    }
};
struct Union4_0 { // G_Flop
    static_array<static_array<unsigned char,2>,2> v1;
    static_array<int,2> v2;
    static_array<int,2> v4;
    Union5 v5;
    int v0;
    int v3;
    __device__ Union4_0(int t0, static_array<static_array<unsigned char,2>,2> t1, static_array<int,2> t2, int t3, static_array<int,2> t4, Union5 t5) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4), v5(t5) {}
    __device__ Union4_0() = delete;
};
struct Union4_1 { // G_Fold
    static_array<static_array<unsigned char,2>,2> v1;
    static_array<int,2> v2;
    static_array<int,2> v4;
    Union5 v5;
    int v0;
    int v3;
    __device__ Union4_1(int t0, static_array<static_array<unsigned char,2>,2> t1, static_array<int,2> t2, int t3, static_array<int,2> t4, Union5 t5) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4), v5(t5) {}
    __device__ Union4_1() = delete;
};
struct Union4_2 { // G_Preflop
};
struct Union4_3 { // G_River
    static_array<static_array<unsigned char,2>,2> v1;
    static_array<int,2> v2;
    static_array<int,2> v4;
    Union5 v5;
    int v0;
    int v3;
    __device__ Union4_3(int t0, static_array<static_array<unsigned char,2>,2> t1, static_array<int,2> t2, int t3, static_array<int,2> t4, Union5 t5) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4), v5(t5) {}
    __device__ Union4_3() = delete;
};
struct Union4_4 { // G_Round
    static_array<static_array<unsigned char,2>,2> v1;
    static_array<int,2> v2;
    static_array<int,2> v4;
    Union5 v5;
    int v0;
    int v3;
    __device__ Union4_4(int t0, static_array<static_array<unsigned char,2>,2> t1, static_array<int,2> t2, int t3, static_array<int,2> t4, Union5 t5) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4), v5(t5) {}
    __device__ Union4_4() = delete;
};
struct Union4_5 { // G_Round'
    static_array<static_array<unsigned char,2>,2> v1;
    static_array<int,2> v2;
    static_array<int,2> v4;
    Union5 v5;
    Union1 v6;
    int v0;
    int v3;
    __device__ Union4_5(int t0, static_array<static_array<unsigned char,2>,2> t1, static_array<int,2> t2, int t3, static_array<int,2> t4, Union5 t5, Union1 t6) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4), v5(t5), v6(t6) {}
    __device__ Union4_5() = delete;
};
struct Union4_6 { // G_Showdown
    static_array<static_array<unsigned char,2>,2> v1;
    static_array<int,2> v2;
    static_array<int,2> v4;
    Union5 v5;
    int v0;
    int v3;
    __device__ Union4_6(int t0, static_array<static_array<unsigned char,2>,2> t1, static_array<int,2> t2, int t3, static_array<int,2> t4, Union5 t5) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4), v5(t5) {}
    __device__ Union4_6() = delete;
};
struct Union4_7 { // G_Turn
    static_array<static_array<unsigned char,2>,2> v1;
    static_array<int,2> v2;
    static_array<int,2> v4;
    Union5 v5;
    int v0;
    int v3;
    __device__ Union4_7(int t0, static_array<static_array<unsigned char,2>,2> t1, static_array<int,2> t2, int t3, static_array<int,2> t4, Union5 t5) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4), v5(t5) {}
    __device__ Union4_7() = delete;
};
struct Union4 {
    union {
        Union4_0 case0; // G_Flop
        Union4_1 case1; // G_Fold
        Union4_2 case2; // G_Preflop
        Union4_3 case3; // G_River
        Union4_4 case4; // G_Round
        Union4_5 case5; // G_Round'
        Union4_6 case6; // G_Showdown
        Union4_7 case7; // G_Turn
    };
    unsigned char tag{255};
    __device__ Union4() {}
    __device__ Union4(Union4_0 t) : tag(0), case0(t) {} // G_Flop
    __device__ Union4(Union4_1 t) : tag(1), case1(t) {} // G_Fold
    __device__ Union4(Union4_2 t) : tag(2), case2(t) {} // G_Preflop
    __device__ Union4(Union4_3 t) : tag(3), case3(t) {} // G_River
    __device__ Union4(Union4_4 t) : tag(4), case4(t) {} // G_Round
    __device__ Union4(Union4_5 t) : tag(5), case5(t) {} // G_Round'
    __device__ Union4(Union4_6 t) : tag(6), case6(t) {} // G_Showdown
    __device__ Union4(Union4_7 t) : tag(7), case7(t) {} // G_Turn
    __device__ Union4(Union4 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union4_0(x.case0); break; // G_Flop
            case 1: new (&this->case1) Union4_1(x.case1); break; // G_Fold
            case 2: new (&this->case2) Union4_2(x.case2); break; // G_Preflop
            case 3: new (&this->case3) Union4_3(x.case3); break; // G_River
            case 4: new (&this->case4) Union4_4(x.case4); break; // G_Round
            case 5: new (&this->case5) Union4_5(x.case5); break; // G_Round'
            case 6: new (&this->case6) Union4_6(x.case6); break; // G_Showdown
            case 7: new (&this->case7) Union4_7(x.case7); break; // G_Turn
        }
    }
    __device__ Union4(Union4 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union4_0(std::move(x.case0)); break; // G_Flop
            case 1: new (&this->case1) Union4_1(std::move(x.case1)); break; // G_Fold
            case 2: new (&this->case2) Union4_2(std::move(x.case2)); break; // G_Preflop
            case 3: new (&this->case3) Union4_3(std::move(x.case3)); break; // G_River
            case 4: new (&this->case4) Union4_4(std::move(x.case4)); break; // G_Round
            case 5: new (&this->case5) Union4_5(std::move(x.case5)); break; // G_Round'
            case 6: new (&this->case6) Union4_6(std::move(x.case6)); break; // G_Showdown
            case 7: new (&this->case7) Union4_7(std::move(x.case7)); break; // G_Turn
        }
    }
    __device__ Union4 & operator=(Union4 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // G_Flop
                case 1: this->case1 = x.case1; break; // G_Fold
                case 2: this->case2 = x.case2; break; // G_Preflop
                case 3: this->case3 = x.case3; break; // G_River
                case 4: this->case4 = x.case4; break; // G_Round
                case 5: this->case5 = x.case5; break; // G_Round'
                case 6: this->case6 = x.case6; break; // G_Showdown
                case 7: this->case7 = x.case7; break; // G_Turn
            }
        } else {
            this->~Union4();
            new (this) Union4{x};
        }
        return *this;
    }
    __device__ Union4 & operator=(Union4 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // G_Flop
                case 1: this->case1 = std::move(x.case1); break; // G_Fold
                case 2: this->case2 = std::move(x.case2); break; // G_Preflop
                case 3: this->case3 = std::move(x.case3); break; // G_River
                case 4: this->case4 = std::move(x.case4); break; // G_Round
                case 5: this->case5 = std::move(x.case5); break; // G_Round'
                case 6: this->case6 = std::move(x.case6); break; // G_Showdown
                case 7: this->case7 = std::move(x.case7); break; // G_Turn
            }
        } else {
            this->~Union4();
            new (this) Union4{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union4() {
        switch(this->tag){
            case 0: this->case0.~Union4_0(); break; // G_Flop
            case 1: this->case1.~Union4_1(); break; // G_Fold
            case 2: this->case2.~Union4_2(); break; // G_Preflop
            case 3: this->case3.~Union4_3(); break; // G_River
            case 4: this->case4.~Union4_4(); break; // G_Round
            case 5: this->case5.~Union4_5(); break; // G_Round'
            case 6: this->case6.~Union4_6(); break; // G_Showdown
            case 7: this->case7.~Union4_7(); break; // G_Turn
        }
        this->tag = 255;
    }
};
struct Union3_0 { // None
};
struct Union3_1 { // Some
    Union4 v0;
    __device__ Union3_1(Union4 t0) : v0(t0) {}
    __device__ Union3_1() = delete;
};
struct Union3 {
    union {
        Union3_0 case0; // None
        Union3_1 case1; // Some
    };
    unsigned char tag{255};
    __device__ Union3() {}
    __device__ Union3(Union3_0 t) : tag(0), case0(t) {} // None
    __device__ Union3(Union3_1 t) : tag(1), case1(t) {} // Some
    __device__ Union3(Union3 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union3_0(x.case0); break; // None
            case 1: new (&this->case1) Union3_1(x.case1); break; // Some
        }
    }
    __device__ Union3(Union3 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union3_0(std::move(x.case0)); break; // None
            case 1: new (&this->case1) Union3_1(std::move(x.case1)); break; // Some
        }
    }
    __device__ Union3 & operator=(Union3 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // None
                case 1: this->case1 = x.case1; break; // Some
            }
        } else {
            this->~Union3();
            new (this) Union3{x};
        }
        return *this;
    }
    __device__ Union3 & operator=(Union3 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // None
                case 1: this->case1 = std::move(x.case1); break; // Some
            }
        } else {
            this->~Union3();
            new (this) Union3{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union3() {
        switch(this->tag){
            case 0: this->case0.~Union3_0(); break; // None
            case 1: this->case1.~Union3_1(); break; // Some
        }
        this->tag = 255;
    }
};
struct Tuple0 {
    static_array<unsigned char,5> v0;
    char v1;
    __device__ Tuple0() = default;
    __device__ Tuple0(static_array<unsigned char,5> t0, char t1) : v0(t0), v1(t1) {}
};
struct Union6_0 { // CommunityCardsAre
    static_array_list<unsigned char,5> v0;
    __device__ Union6_0(static_array_list<unsigned char,5> t0) : v0(t0) {}
    __device__ Union6_0() = delete;
};
struct Union6_1 { // Fold
    int v0;
    int v1;
    __device__ Union6_1(int t0, int t1) : v0(t0), v1(t1) {}
    __device__ Union6_1() = delete;
};
struct Union6_2 { // PlayerAction
    Union1 v1;
    int v0;
    __device__ Union6_2(int t0, Union1 t1) : v0(t0), v1(t1) {}
    __device__ Union6_2() = delete;
};
struct Union6_3 { // PlayerGotCards
    static_array<unsigned char,2> v1;
    int v0;
    __device__ Union6_3(int t0, static_array<unsigned char,2> t1) : v0(t0), v1(t1) {}
    __device__ Union6_3() = delete;
};
struct Union6_4 { // Showdown
    static_array<Tuple0,2> v1;
    int v0;
    int v2;
    __device__ Union6_4(int t0, static_array<Tuple0,2> t1, int t2) : v0(t0), v1(t1), v2(t2) {}
    __device__ Union6_4() = delete;
};
struct Union6 {
    union {
        Union6_0 case0; // CommunityCardsAre
        Union6_1 case1; // Fold
        Union6_2 case2; // PlayerAction
        Union6_3 case3; // PlayerGotCards
        Union6_4 case4; // Showdown
    };
    unsigned char tag{255};
    __device__ Union6() {}
    __device__ Union6(Union6_0 t) : tag(0), case0(t) {} // CommunityCardsAre
    __device__ Union6(Union6_1 t) : tag(1), case1(t) {} // Fold
    __device__ Union6(Union6_2 t) : tag(2), case2(t) {} // PlayerAction
    __device__ Union6(Union6_3 t) : tag(3), case3(t) {} // PlayerGotCards
    __device__ Union6(Union6_4 t) : tag(4), case4(t) {} // Showdown
    __device__ Union6(Union6 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union6_0(x.case0); break; // CommunityCardsAre
            case 1: new (&this->case1) Union6_1(x.case1); break; // Fold
            case 2: new (&this->case2) Union6_2(x.case2); break; // PlayerAction
            case 3: new (&this->case3) Union6_3(x.case3); break; // PlayerGotCards
            case 4: new (&this->case4) Union6_4(x.case4); break; // Showdown
        }
    }
    __device__ Union6(Union6 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union6_0(std::move(x.case0)); break; // CommunityCardsAre
            case 1: new (&this->case1) Union6_1(std::move(x.case1)); break; // Fold
            case 2: new (&this->case2) Union6_2(std::move(x.case2)); break; // PlayerAction
            case 3: new (&this->case3) Union6_3(std::move(x.case3)); break; // PlayerGotCards
            case 4: new (&this->case4) Union6_4(std::move(x.case4)); break; // Showdown
        }
    }
    __device__ Union6 & operator=(Union6 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // CommunityCardsAre
                case 1: this->case1 = x.case1; break; // Fold
                case 2: this->case2 = x.case2; break; // PlayerAction
                case 3: this->case3 = x.case3; break; // PlayerGotCards
                case 4: this->case4 = x.case4; break; // Showdown
            }
        } else {
            this->~Union6();
            new (this) Union6{x};
        }
        return *this;
    }
    __device__ Union6 & operator=(Union6 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // CommunityCardsAre
                case 1: this->case1 = std::move(x.case1); break; // Fold
                case 2: this->case2 = std::move(x.case2); break; // PlayerAction
                case 3: this->case3 = std::move(x.case3); break; // PlayerGotCards
                case 4: this->case4 = std::move(x.case4); break; // Showdown
            }
        } else {
            this->~Union6();
            new (this) Union6{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union6() {
        switch(this->tag){
            case 0: this->case0.~Union6_0(); break; // CommunityCardsAre
            case 1: this->case1.~Union6_1(); break; // Fold
            case 2: this->case2.~Union6_2(); break; // PlayerAction
            case 3: this->case3.~Union6_3(); break; // PlayerGotCards
            case 4: this->case4.~Union6_4(); break; // Showdown
        }
        this->tag = 255;
    }
};
struct Union7_0 { // GameNotStarted
};
struct Union7_1 { // GameOver
    static_array<static_array<unsigned char,2>,2> v1;
    static_array<int,2> v2;
    static_array<int,2> v4;
    Union5 v5;
    int v0;
    int v3;
    __device__ Union7_1(int t0, static_array<static_array<unsigned char,2>,2> t1, static_array<int,2> t2, int t3, static_array<int,2> t4, Union5 t5) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4), v5(t5) {}
    __device__ Union7_1() = delete;
};
struct Union7_2 { // WaitingForActionFromPlayerId
    static_array<static_array<unsigned char,2>,2> v1;
    static_array<int,2> v2;
    static_array<int,2> v4;
    Union5 v5;
    int v0;
    int v3;
    __device__ Union7_2(int t0, static_array<static_array<unsigned char,2>,2> t1, static_array<int,2> t2, int t3, static_array<int,2> t4, Union5 t5) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4), v5(t5) {}
    __device__ Union7_2() = delete;
};
struct Union7 {
    union {
        Union7_0 case0; // GameNotStarted
        Union7_1 case1; // GameOver
        Union7_2 case2; // WaitingForActionFromPlayerId
    };
    unsigned char tag{255};
    __device__ Union7() {}
    __device__ Union7(Union7_0 t) : tag(0), case0(t) {} // GameNotStarted
    __device__ Union7(Union7_1 t) : tag(1), case1(t) {} // GameOver
    __device__ Union7(Union7_2 t) : tag(2), case2(t) {} // WaitingForActionFromPlayerId
    __device__ Union7(Union7 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union7_0(x.case0); break; // GameNotStarted
            case 1: new (&this->case1) Union7_1(x.case1); break; // GameOver
            case 2: new (&this->case2) Union7_2(x.case2); break; // WaitingForActionFromPlayerId
        }
    }
    __device__ Union7(Union7 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union7_0(std::move(x.case0)); break; // GameNotStarted
            case 1: new (&this->case1) Union7_1(std::move(x.case1)); break; // GameOver
            case 2: new (&this->case2) Union7_2(std::move(x.case2)); break; // WaitingForActionFromPlayerId
        }
    }
    __device__ Union7 & operator=(Union7 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // GameNotStarted
                case 1: this->case1 = x.case1; break; // GameOver
                case 2: this->case2 = x.case2; break; // WaitingForActionFromPlayerId
            }
        } else {
            this->~Union7();
            new (this) Union7{x};
        }
        return *this;
    }
    __device__ Union7 & operator=(Union7 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // GameNotStarted
                case 1: this->case1 = std::move(x.case1); break; // GameOver
                case 2: this->case2 = std::move(x.case2); break; // WaitingForActionFromPlayerId
            }
        } else {
            this->~Union7();
            new (this) Union7{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union7() {
        switch(this->tag){
            case 0: this->case0.~Union7_0(); break; // GameNotStarted
            case 1: this->case1.~Union7_1(); break; // GameOver
            case 2: this->case2.~Union7_2(); break; // WaitingForActionFromPlayerId
        }
        this->tag = 255;
    }
};
struct Tuple1 {
    unsigned long long v0;
    Union3 v1;
    static_array_list<Union6,128> v2;
    static_array<Union2,2> v3;
    Union7 v4;
    __device__ Tuple1() = default;
    __device__ Tuple1(unsigned long long t0, Union3 t1, static_array_list<Union6,128> t2, static_array<Union2,2> t3, Union7 t4) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4) {}
};
struct Tuple2 {
    static_array<static_array<unsigned char,2>,2> v1;
    static_array<int,2> v2;
    static_array<int,2> v4;
    Union5 v5;
    int v0;
    int v3;
    __device__ Tuple2() = default;
    __device__ Tuple2(int t0, static_array<static_array<unsigned char,2>,2> t1, static_array<int,2> t2, int t3, static_array<int,2> t4, Union5 t5) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4), v5(t5) {}
};
struct Tuple3 {
    static_array<static_array<unsigned char,2>,2> v1;
    static_array<int,2> v2;
    static_array<int,2> v4;
    Union5 v5;
    Union1 v6;
    int v0;
    int v3;
    __device__ Tuple3() = default;
    __device__ Tuple3(int t0, static_array<static_array<unsigned char,2>,2> t1, static_array<int,2> t2, int t3, static_array<int,2> t4, Union5 t5, Union1 t6) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4), v5(t5), v6(t6) {}
};
struct Tuple4 {
    int v0;
    int v1;
    __device__ Tuple4() = default;
    __device__ Tuple4(int t0, int t1) : v0(t0), v1(t1) {}
};
struct Tuple5 {
    Union1 v1;
    int v0;
    __device__ Tuple5() = default;
    __device__ Tuple5(int t0, Union1 t1) : v0(t0), v1(t1) {}
};
struct Tuple6 {
    static_array<unsigned char,2> v1;
    int v0;
    __device__ Tuple6() = default;
    __device__ Tuple6(int t0, static_array<unsigned char,2> t1) : v0(t0), v1(t1) {}
};
struct Tuple7 {
    static_array<Tuple0,2> v1;
    int v0;
    int v2;
    __device__ Tuple7() = default;
    __device__ Tuple7(int t0, static_array<Tuple0,2> t1, int t2) : v0(t0), v1(t1), v2(t2) {}
};
struct StackMut0 {
    unsigned long long v0;
    Union3 v1;
    static_array_list<Union6,128> v2;
    static_array<Union2,2> v3;
    curandStatePhilox4_32_10_t v4;
    Union7 v5;
    __device__ StackMut0() = default;
    __device__ StackMut0(unsigned long long t0, Union3 t1, static_array_list<Union6,128> t2, static_array<Union2,2> t3, curandStatePhilox4_32_10_t t4, Union7 t5) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4), v5(t5) {}
};
struct Tuple8 {
    static_array<unsigned char,3> v0;
    unsigned long long v1;
    __device__ Tuple8() = default;
    __device__ Tuple8(static_array<unsigned char,3> t0, unsigned long long t1) : v0(t0), v1(t1) {}
};
struct Tuple9 {
    unsigned long long v1;
    int v0;
    __device__ Tuple9() = default;
    __device__ Tuple9(int t0, unsigned long long t1) : v0(t0), v1(t1) {}
};
struct Tuple10 {
    unsigned long long v1;
    unsigned char v0;
    __device__ Tuple10() = default;
    __device__ Tuple10(unsigned char t0, unsigned long long t1) : v0(t0), v1(t1) {}
};
struct Tuple11 {
    static_array<unsigned char,2> v0;
    unsigned long long v1;
    __device__ Tuple11() = default;
    __device__ Tuple11(static_array<unsigned char,2> t0, unsigned long long t1) : v0(t0), v1(t1) {}
};
struct Tuple12 {
    static_array<unsigned char,1> v0;
    unsigned long long v1;
    __device__ Tuple12() = default;
    __device__ Tuple12(static_array<unsigned char,1> t0, unsigned long long t1) : v0(t0), v1(t1) {}
};
struct Union8_0 { // None
};
struct Union8_1 { // Some
    Union1 v0;
    __device__ Union8_1(Union1 t0) : v0(t0) {}
    __device__ Union8_1() = delete;
};
struct Union8 {
    union {
        Union8_0 case0; // None
        Union8_1 case1; // Some
    };
    unsigned char tag{255};
    __device__ Union8() {}
    __device__ Union8(Union8_0 t) : tag(0), case0(t) {} // None
    __device__ Union8(Union8_1 t) : tag(1), case1(t) {} // Some
    __device__ Union8(Union8 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union8_0(x.case0); break; // None
            case 1: new (&this->case1) Union8_1(x.case1); break; // Some
        }
    }
    __device__ Union8(Union8 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union8_0(std::move(x.case0)); break; // None
            case 1: new (&this->case1) Union8_1(std::move(x.case1)); break; // Some
        }
    }
    __device__ Union8 & operator=(Union8 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // None
                case 1: this->case1 = x.case1; break; // Some
            }
        } else {
            this->~Union8();
            new (this) Union8{x};
        }
        return *this;
    }
    __device__ Union8 & operator=(Union8 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // None
                case 1: this->case1 = std::move(x.case1); break; // Some
            }
        } else {
            this->~Union8();
            new (this) Union8{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union8() {
        switch(this->tag){
            case 0: this->case0.~Union8_0(); break; // None
            case 1: this->case1.~Union8_1(); break; // Some
        }
        this->tag = 255;
    }
};
struct Tuple13 {
    int v0;
    unsigned int v1;
    __device__ Tuple13() = default;
    __device__ Tuple13(int t0, unsigned int t1) : v0(t0), v1(t1) {}
};
struct Union9_0 { // None
};
struct Union9_1 { // Some
    int v0;
    __device__ Union9_1(int t0) : v0(t0) {}
    __device__ Union9_1() = delete;
};
struct Union9 {
    union {
        Union9_0 case0; // None
        Union9_1 case1; // Some
    };
    unsigned char tag{255};
    __device__ Union9() {}
    __device__ Union9(Union9_0 t) : tag(0), case0(t) {} // None
    __device__ Union9(Union9_1 t) : tag(1), case1(t) {} // Some
    __device__ Union9(Union9 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union9_0(x.case0); break; // None
            case 1: new (&this->case1) Union9_1(x.case1); break; // Some
        }
    }
    __device__ Union9(Union9 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union9_0(std::move(x.case0)); break; // None
            case 1: new (&this->case1) Union9_1(std::move(x.case1)); break; // Some
        }
    }
    __device__ Union9 & operator=(Union9 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // None
                case 1: this->case1 = x.case1; break; // Some
            }
        } else {
            this->~Union9();
            new (this) Union9{x};
        }
        return *this;
    }
    __device__ Union9 & operator=(Union9 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // None
                case 1: this->case1 = std::move(x.case1); break; // Some
            }
        } else {
            this->~Union9();
            new (this) Union9{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union9() {
        switch(this->tag){
            case 0: this->case0.~Union9_0(); break; // None
            case 1: this->case1.~Union9_1(); break; // Some
        }
        this->tag = 255;
    }
};
struct Closure0 {
    __device__ float operator()(float tup0, float tup1){
        float v0 = tup0; float v1 = tup1;
        float v2;
        v2 = v0 + v1;
        return v2;
    }
};
struct Closure1 {
    __device__ int operator()(int tup0, int tup1){
        int v0 = tup0; int v1 = tup1;
        int v2;
        v2 = v0 + v1;
        return v2;
    }
};
struct Closure2 {
    __device__ float operator()(float tup0, float tup1){
        float v0 = tup0; float v1 = tup1;
        float v2;
        v2 = v0 + v1;
        return v2;
    }
};
struct Tuple14 {
    float v0;
    bool v1;
    __device__ Tuple14() = default;
    __device__ Tuple14(float t0, bool t1) : v0(t0), v1(t1) {}
};
struct Closure3 {
    __device__ Tuple14 operator()(Tuple14 tup0, Tuple14 tup1){
        float v0 = tup0.v0; bool v1 = tup0.v1; float v2 = tup1.v0; bool v3 = tup1.v1;
        if (v1){
            if (v3){
                bool v4;
                v4 = v0 >= v2;
                float v5;
                if (v4){
                    v5 = v0;
                } else {
                    v5 = v2;
                }
                return Tuple14{v5, true};
            } else {
                return Tuple14{v0, v1};
            }
        } else {
            if (v3){
                return Tuple14{v2, v3};
            } else {
                return Tuple14{v0, v1};
            }
        }
    }
};
struct Tuple15 {
    float v0;
    int v1;
    __device__ Tuple15() = default;
    __device__ Tuple15(float t0, int t1) : v0(t0), v1(t1) {}
};
struct Closure4 {
    __device__ Tuple15 operator()(Tuple15 tup0, Tuple15 tup1){
        float v0 = tup0.v0; int v1 = tup0.v1; float v2 = tup1.v0; int v3 = tup1.v1;
        bool v4;
        v4 = v1 < v3;
        if (v4){
            return Tuple15{v0, v1};
        } else {
            return Tuple15{v2, v3};
        }
    }
};
struct Tuple16 {
    int v0;
    bool v1;
    __device__ Tuple16() = default;
    __device__ Tuple16(int t0, bool t1) : v0(t0), v1(t1) {}
};
struct Closure5 {
    __device__ Tuple16 operator()(Tuple16 tup0, Tuple16 tup1){
        int v0 = tup0.v0; bool v1 = tup0.v1; int v2 = tup1.v0; bool v3 = tup1.v1;
        if (v1){
            if (v3){
                bool v4;
                v4 = v0 < v2;
                int v5;
                if (v4){
                    v5 = v0;
                } else {
                    v5 = v2;
                }
                return Tuple16{v5, true};
            } else {
                return Tuple16{v0, v1};
            }
        } else {
            if (v3){
                return Tuple16{v2, v3};
            } else {
                return Tuple16{v0, v1};
            }
        }
    }
};
struct Closure6 {
    int v0;
    __device__ Tuple15 operator()(Tuple15 tup0, Tuple15 tup1){
        int & v0 = this->v0;
        float v1 = tup0.v0; int v2 = tup0.v1; float v3 = tup1.v0; int v4 = tup1.v1;
        bool v5;
        v5 = v2 == v0;
        if (v5){
            return Tuple15{v1, v2};
        } else {
            bool v6;
            v6 = v4 == v0;
            if (v6){
                return Tuple15{v3, v4};
            } else {
                return Tuple15{v1, v2};
            }
        }
    }
    __device__ Closure6(int _v0) : v0(_v0) { }
};
struct Union10_0 { // AA_Call
};
struct Union10_1 { // AA_Fold
};
struct Union10_2 { // AA_Raise
    int v0;
    int v1;
    __device__ Union10_2(int t0, int t1) : v0(t0), v1(t1) {}
    __device__ Union10_2() = delete;
};
struct Union10 {
    union {
        Union10_0 case0; // AA_Call
        Union10_1 case1; // AA_Fold
        Union10_2 case2; // AA_Raise
    };
    unsigned char tag{255};
    __device__ Union10() {}
    __device__ Union10(Union10_0 t) : tag(0), case0(t) {} // AA_Call
    __device__ Union10(Union10_1 t) : tag(1), case1(t) {} // AA_Fold
    __device__ Union10(Union10_2 t) : tag(2), case2(t) {} // AA_Raise
    __device__ Union10(Union10 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union10_0(x.case0); break; // AA_Call
            case 1: new (&this->case1) Union10_1(x.case1); break; // AA_Fold
            case 2: new (&this->case2) Union10_2(x.case2); break; // AA_Raise
        }
    }
    __device__ Union10(Union10 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union10_0(std::move(x.case0)); break; // AA_Call
            case 1: new (&this->case1) Union10_1(std::move(x.case1)); break; // AA_Fold
            case 2: new (&this->case2) Union10_2(std::move(x.case2)); break; // AA_Raise
        }
    }
    __device__ Union10 & operator=(Union10 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // AA_Call
                case 1: this->case1 = x.case1; break; // AA_Fold
                case 2: this->case2 = x.case2; break; // AA_Raise
            }
        } else {
            this->~Union10();
            new (this) Union10{x};
        }
        return *this;
    }
    __device__ Union10 & operator=(Union10 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // AA_Call
                case 1: this->case1 = std::move(x.case1); break; // AA_Fold
                case 2: this->case2 = std::move(x.case2); break; // AA_Raise
            }
        } else {
            this->~Union10();
            new (this) Union10{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union10() {
        switch(this->tag){
            case 0: this->case0.~Union10_0(); break; // AA_Call
            case 1: this->case1.~Union10_1(); break; // AA_Fold
            case 2: this->case2.~Union10_2(); break; // AA_Raise
        }
        this->tag = 255;
    }
};
struct Tuple17 {
    Union1 v0;
    float v1;
    __device__ Tuple17() = default;
    __device__ Tuple17(Union1 t0, float t1) : v0(t0), v1(t1) {}
};
struct Tuple18 {
    int v1;
    bool v0;
    __device__ Tuple18() = default;
    __device__ Tuple18(bool t0, int t1) : v0(t0), v1(t1) {}
};
struct Tuple19 {
    int v0;
    int v1;
    int v2;
    __device__ Tuple19() = default;
    __device__ Tuple19(int t0, int t1, int t2) : v0(t0), v1(t1), v2(t2) {}
};
struct Union11_0 { // Eq
};
struct Union11_1 { // Gt
};
struct Union11_2 { // Lt
};
struct Union11 {
    union {
        Union11_0 case0; // Eq
        Union11_1 case1; // Gt
        Union11_2 case2; // Lt
    };
    unsigned char tag{255};
    __device__ Union11() {}
    __device__ Union11(Union11_0 t) : tag(0), case0(t) {} // Eq
    __device__ Union11(Union11_1 t) : tag(1), case1(t) {} // Gt
    __device__ Union11(Union11_2 t) : tag(2), case2(t) {} // Lt
    __device__ Union11(Union11 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union11_0(x.case0); break; // Eq
            case 1: new (&this->case1) Union11_1(x.case1); break; // Gt
            case 2: new (&this->case2) Union11_2(x.case2); break; // Lt
        }
    }
    __device__ Union11(Union11 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union11_0(std::move(x.case0)); break; // Eq
            case 1: new (&this->case1) Union11_1(std::move(x.case1)); break; // Gt
            case 2: new (&this->case2) Union11_2(std::move(x.case2)); break; // Lt
        }
    }
    __device__ Union11 & operator=(Union11 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // Eq
                case 1: this->case1 = x.case1; break; // Gt
                case 2: this->case2 = x.case2; break; // Lt
            }
        } else {
            this->~Union11();
            new (this) Union11{x};
        }
        return *this;
    }
    __device__ Union11 & operator=(Union11 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // Eq
                case 1: this->case1 = std::move(x.case1); break; // Gt
                case 2: this->case2 = std::move(x.case2); break; // Lt
            }
        } else {
            this->~Union11();
            new (this) Union11{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union11() {
        switch(this->tag){
            case 0: this->case0.~Union11_0(); break; // Eq
            case 1: this->case1.~Union11_1(); break; // Gt
            case 2: this->case2.~Union11_2(); break; // Lt
        }
        this->tag = 255;
    }
};
struct Tuple20 {
    int v0;
    int v1;
    unsigned char v2;
    __device__ Tuple20() = default;
    __device__ Tuple20(int t0, int t1, unsigned char t2) : v0(t0), v1(t1), v2(t2) {}
};
struct Union12_0 { // None
};
struct Union12_1 { // Some
    static_array<unsigned char,5> v0;
    __device__ Union12_1(static_array<unsigned char,5> t0) : v0(t0) {}
    __device__ Union12_1() = delete;
};
struct Union12 {
    union {
        Union12_0 case0; // None
        Union12_1 case1; // Some
    };
    unsigned char tag{255};
    __device__ Union12() {}
    __device__ Union12(Union12_0 t) : tag(0), case0(t) {} // None
    __device__ Union12(Union12_1 t) : tag(1), case1(t) {} // Some
    __device__ Union12(Union12 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union12_0(x.case0); break; // None
            case 1: new (&this->case1) Union12_1(x.case1); break; // Some
        }
    }
    __device__ Union12(Union12 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union12_0(std::move(x.case0)); break; // None
            case 1: new (&this->case1) Union12_1(std::move(x.case1)); break; // Some
        }
    }
    __device__ Union12 & operator=(Union12 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // None
                case 1: this->case1 = x.case1; break; // Some
            }
        } else {
            this->~Union12();
            new (this) Union12{x};
        }
        return *this;
    }
    __device__ Union12 & operator=(Union12 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // None
                case 1: this->case1 = std::move(x.case1); break; // Some
            }
        } else {
            this->~Union12();
            new (this) Union12{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union12() {
        switch(this->tag){
            case 0: this->case0.~Union12_0(); break; // None
            case 1: this->case1.~Union12_1(); break; // Some
        }
        this->tag = 255;
    }
};
struct Tuple21 {
    Union11 v1;
    int v0;
    __device__ Tuple21() = default;
    __device__ Tuple21(int t0, Union11 t1) : v0(t0), v1(t1) {}
};
struct Tuple22 {
    int v0;
    int v1;
    int v2;
    unsigned char v3;
    __device__ Tuple22() = default;
    __device__ Tuple22(int t0, int t1, int t2, unsigned char t3) : v0(t0), v1(t1), v2(t2), v3(t3) {}
};
struct Union13_0 { // None
};
struct Union13_1 { // Some
    static_array<unsigned char,4> v0;
    static_array<unsigned char,3> v1;
    __device__ Union13_1(static_array<unsigned char,4> t0, static_array<unsigned char,3> t1) : v0(t0), v1(t1) {}
    __device__ Union13_1() = delete;
};
struct Union13 {
    union {
        Union13_0 case0; // None
        Union13_1 case1; // Some
    };
    unsigned char tag{255};
    __device__ Union13() {}
    __device__ Union13(Union13_0 t) : tag(0), case0(t) {} // None
    __device__ Union13(Union13_1 t) : tag(1), case1(t) {} // Some
    __device__ Union13(Union13 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union13_0(x.case0); break; // None
            case 1: new (&this->case1) Union13_1(x.case1); break; // Some
        }
    }
    __device__ Union13(Union13 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union13_0(std::move(x.case0)); break; // None
            case 1: new (&this->case1) Union13_1(std::move(x.case1)); break; // Some
        }
    }
    __device__ Union13 & operator=(Union13 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // None
                case 1: this->case1 = x.case1; break; // Some
            }
        } else {
            this->~Union13();
            new (this) Union13{x};
        }
        return *this;
    }
    __device__ Union13 & operator=(Union13 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // None
                case 1: this->case1 = std::move(x.case1); break; // Some
            }
        } else {
            this->~Union13();
            new (this) Union13{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union13() {
        switch(this->tag){
            case 0: this->case0.~Union13_0(); break; // None
            case 1: this->case1.~Union13_1(); break; // Some
        }
        this->tag = 255;
    }
};
struct Union14_0 { // None
};
struct Union14_1 { // Some
    static_array<unsigned char,3> v0;
    static_array<unsigned char,4> v1;
    __device__ Union14_1(static_array<unsigned char,3> t0, static_array<unsigned char,4> t1) : v0(t0), v1(t1) {}
    __device__ Union14_1() = delete;
};
struct Union14 {
    union {
        Union14_0 case0; // None
        Union14_1 case1; // Some
    };
    unsigned char tag{255};
    __device__ Union14() {}
    __device__ Union14(Union14_0 t) : tag(0), case0(t) {} // None
    __device__ Union14(Union14_1 t) : tag(1), case1(t) {} // Some
    __device__ Union14(Union14 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union14_0(x.case0); break; // None
            case 1: new (&this->case1) Union14_1(x.case1); break; // Some
        }
    }
    __device__ Union14(Union14 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union14_0(std::move(x.case0)); break; // None
            case 1: new (&this->case1) Union14_1(std::move(x.case1)); break; // Some
        }
    }
    __device__ Union14 & operator=(Union14 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // None
                case 1: this->case1 = x.case1; break; // Some
            }
        } else {
            this->~Union14();
            new (this) Union14{x};
        }
        return *this;
    }
    __device__ Union14 & operator=(Union14 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // None
                case 1: this->case1 = std::move(x.case1); break; // Some
            }
        } else {
            this->~Union14();
            new (this) Union14{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union14() {
        switch(this->tag){
            case 0: this->case0.~Union14_0(); break; // None
            case 1: this->case1.~Union14_1(); break; // Some
        }
        this->tag = 255;
    }
};
struct Union15_0 { // None
};
struct Union15_1 { // Some
    static_array<unsigned char,2> v0;
    static_array<unsigned char,2> v1;
    __device__ Union15_1(static_array<unsigned char,2> t0, static_array<unsigned char,2> t1) : v0(t0), v1(t1) {}
    __device__ Union15_1() = delete;
};
struct Union15 {
    union {
        Union15_0 case0; // None
        Union15_1 case1; // Some
    };
    unsigned char tag{255};
    __device__ Union15() {}
    __device__ Union15(Union15_0 t) : tag(0), case0(t) {} // None
    __device__ Union15(Union15_1 t) : tag(1), case1(t) {} // Some
    __device__ Union15(Union15 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union15_0(x.case0); break; // None
            case 1: new (&this->case1) Union15_1(x.case1); break; // Some
        }
    }
    __device__ Union15(Union15 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union15_0(std::move(x.case0)); break; // None
            case 1: new (&this->case1) Union15_1(std::move(x.case1)); break; // Some
        }
    }
    __device__ Union15 & operator=(Union15 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // None
                case 1: this->case1 = x.case1; break; // Some
            }
        } else {
            this->~Union15();
            new (this) Union15{x};
        }
        return *this;
    }
    __device__ Union15 & operator=(Union15 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // None
                case 1: this->case1 = std::move(x.case1); break; // Some
            }
        } else {
            this->~Union15();
            new (this) Union15{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union15() {
        switch(this->tag){
            case 0: this->case0.~Union15_0(); break; // None
            case 1: this->case1.~Union15_1(); break; // Some
        }
        this->tag = 255;
    }
};
struct Union16_0 { // None
};
struct Union16_1 { // Some
    static_array<unsigned char,2> v0;
    static_array<unsigned char,5> v1;
    __device__ Union16_1(static_array<unsigned char,2> t0, static_array<unsigned char,5> t1) : v0(t0), v1(t1) {}
    __device__ Union16_1() = delete;
};
struct Union16 {
    union {
        Union16_0 case0; // None
        Union16_1 case1; // Some
    };
    unsigned char tag{255};
    __device__ Union16() {}
    __device__ Union16(Union16_0 t) : tag(0), case0(t) {} // None
    __device__ Union16(Union16_1 t) : tag(1), case1(t) {} // Some
    __device__ Union16(Union16 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union16_0(x.case0); break; // None
            case 1: new (&this->case1) Union16_1(x.case1); break; // Some
        }
    }
    __device__ Union16(Union16 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union16_0(std::move(x.case0)); break; // None
            case 1: new (&this->case1) Union16_1(std::move(x.case1)); break; // Some
        }
    }
    __device__ Union16 & operator=(Union16 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // None
                case 1: this->case1 = x.case1; break; // Some
            }
        } else {
            this->~Union16();
            new (this) Union16{x};
        }
        return *this;
    }
    __device__ Union16 & operator=(Union16 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // None
                case 1: this->case1 = std::move(x.case1); break; // Some
            }
        } else {
            this->~Union16();
            new (this) Union16{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union16() {
        switch(this->tag){
            case 0: this->case0.~Union16_0(); break; // None
            case 1: this->case1.~Union16_1(); break; // Some
        }
        this->tag = 255;
    }
};
struct Union17_0 { // None
};
struct Union17_1 { // Some
    static_array<unsigned char,2> v0;
    static_array<unsigned char,3> v1;
    __device__ Union17_1(static_array<unsigned char,2> t0, static_array<unsigned char,3> t1) : v0(t0), v1(t1) {}
    __device__ Union17_1() = delete;
};
struct Union17 {
    union {
        Union17_0 case0; // None
        Union17_1 case1; // Some
    };
    unsigned char tag{255};
    __device__ Union17() {}
    __device__ Union17(Union17_0 t) : tag(0), case0(t) {} // None
    __device__ Union17(Union17_1 t) : tag(1), case1(t) {} // Some
    __device__ Union17(Union17 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union17_0(x.case0); break; // None
            case 1: new (&this->case1) Union17_1(x.case1); break; // Some
        }
    }
    __device__ Union17(Union17 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union17_0(std::move(x.case0)); break; // None
            case 1: new (&this->case1) Union17_1(std::move(x.case1)); break; // Some
        }
    }
    __device__ Union17 & operator=(Union17 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // None
                case 1: this->case1 = x.case1; break; // Some
            }
        } else {
            this->~Union17();
            new (this) Union17{x};
        }
        return *this;
    }
    __device__ Union17 & operator=(Union17 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // None
                case 1: this->case1 = std::move(x.case1); break; // Some
            }
        } else {
            this->~Union17();
            new (this) Union17{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union17() {
        switch(this->tag){
            case 0: this->case0.~Union17_0(); break; // None
            case 1: this->case1.~Union17_1(); break; // Some
        }
        this->tag = 255;
    }
};
struct StackMut1 {
    unsigned long long v0;
    cooperative_groups::grid_group v1;
    static_array_list<Union6,128> v2;
    static_array<Union2,2> v3;
    static_array<float,2> v4;
    curandStatePhilox4_32_10_t v5;
    __device__ StackMut1() = default;
    __device__ StackMut1(unsigned long long t0, cooperative_groups::grid_group t1, static_array_list<Union6,128> t2, static_array<Union2,2> t3, static_array<float,2> t4, curandStatePhilox4_32_10_t t5) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4), v5(t5) {}
};
struct Union18_0 { // T_none
};
struct Union18_1 { // T_round
    static_array<static_array<unsigned char,2>,2> v1;
    static_array<int,2> v2;
    static_array<int,2> v4;
    Union5 v5;
    Union1 v6;
    int v0;
    int v3;
    __device__ Union18_1(int t0, static_array<static_array<unsigned char,2>,2> t1, static_array<int,2> t2, int t3, static_array<int,2> t4, Union5 t5, Union1 t6) : v0(t0), v1(t1), v2(t2), v3(t3), v4(t4), v5(t5), v6(t6) {}
    __device__ Union18_1() = delete;
};
struct Union18_2 { // T_some
    Union4 v0;
    __device__ Union18_2(Union4 t0) : v0(t0) {}
    __device__ Union18_2() = delete;
};
struct Union18 {
    union {
        Union18_0 case0; // T_none
        Union18_1 case1; // T_round
        Union18_2 case2; // T_some
    };
    unsigned char tag{255};
    __device__ Union18() {}
    __device__ Union18(Union18_0 t) : tag(0), case0(t) {} // T_none
    __device__ Union18(Union18_1 t) : tag(1), case1(t) {} // T_round
    __device__ Union18(Union18_2 t) : tag(2), case2(t) {} // T_some
    __device__ Union18(Union18 & x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union18_0(x.case0); break; // T_none
            case 1: new (&this->case1) Union18_1(x.case1); break; // T_round
            case 2: new (&this->case2) Union18_2(x.case2); break; // T_some
        }
    }
    __device__ Union18(Union18 && x) : tag(x.tag) {
        switch(x.tag){
            case 0: new (&this->case0) Union18_0(std::move(x.case0)); break; // T_none
            case 1: new (&this->case1) Union18_1(std::move(x.case1)); break; // T_round
            case 2: new (&this->case2) Union18_2(std::move(x.case2)); break; // T_some
        }
    }
    __device__ Union18 & operator=(Union18 & x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = x.case0; break; // T_none
                case 1: this->case1 = x.case1; break; // T_round
                case 2: this->case2 = x.case2; break; // T_some
            }
        } else {
            this->~Union18();
            new (this) Union18{x};
        }
        return *this;
    }
    __device__ Union18 & operator=(Union18 && x) {
        if (this->tag == x.tag) {
            switch(x.tag){
                case 0: this->case0 = std::move(x.case0); break; // T_none
                case 1: this->case1 = std::move(x.case1); break; // T_round
                case 2: this->case2 = std::move(x.case2); break; // T_some
            }
        } else {
            this->~Union18();
            new (this) Union18{std::move(x)};
        }
        return *this;
    }
    __device__ ~Union18() {
        switch(this->tag){
            case 0: this->case0.~Union18_0(); break; // T_none
            case 1: this->case1.~Union18_1(); break; // T_round
            case 2: this->case2.~Union18_2(); break; // T_some
        }
        this->tag = 255;
    }
};
struct Tuple23 {
    double v1;
    int v0;
    __device__ Tuple23() = default;
    __device__ Tuple23(int t0, double t1) : v0(t0), v1(t1) {}
};
struct Tuple24 {
    double v2;
    float v1;
    int v0;
    __device__ Tuple24() = default;
    __device__ Tuple24(int t0, float t1, double t2) : v0(t0), v1(t1), v2(t2) {}
};
struct Tuple25 {
    int v0;
    float v1;
    __device__ Tuple25() = default;
    __device__ Tuple25(int t0, float t1) : v0(t0), v1(t1) {}
};
struct Closure7 {
    __device__ float operator()(float tup0, float tup1){
        float v0 = tup0; float v1 = tup1;
        bool v2;
        v2 = v0 >= v1;
        if (v2){
            return v0;
        } else {
            return v1;
        }
    }
};
__device__ int f_1(unsigned char * v0){
    int * v1;
    v1 = (int *)(v0+0ull);
    int v3;
    v3 = v1[0];
    return v3;
}
__device__ void f_3(unsigned char * v0){
    return ;
}
__device__ Union1 f_2(unsigned char * v0){
    int v1;
    v1 = f_1(v0);
    unsigned char * v2;
    v2 = (unsigned char *)(v0+4ull);
    switch (v1) {
        case 0: {
            f_3(v2);
            return Union1{Union1_0{}};
            break;
        }
        case 1: {
            f_3(v2);
            return Union1{Union1_1{}};
            break;
        }
        case 2: {
            f_3(v2);
            return Union1{Union1_2{}};
            break;
        }
        case 3: {
            int v8;
            v8 = f_1(v2);
            return Union1{Union1_3{v8}};
            break;
        }
        default: {
            printf("%s\n", "Invalid tag.");
            __trap();
        }
    }
}
__device__ inline bool while_method_0(int v0){
    bool v1;
    v1 = v0 < 2;
    return v1;
}
__device__ Union2 f_5(unsigned char * v0){
    int v1;
    v1 = f_1(v0);
    unsigned char * v2;
    v2 = (unsigned char *)(v0+4ull);
    switch (v1) {
        case 0: {
            f_3(v2);
            return Union2{Union2_0{}};
            break;
        }
        case 1: {
            f_3(v2);
            return Union2{Union2_1{}};
            break;
        }
        case 2: {
            f_3(v2);
            return Union2{Union2_2{}};
            break;
        }
        case 3: {
            f_3(v2);
            return Union2{Union2_3{}};
            break;
        }
        default: {
            printf("%s\n", "Invalid tag.");
            __trap();
        }
    }
}
__device__ static_array<Union2,2> f_4(unsigned char * v0){
    static_array<Union2,2> v1;
    int v3;
    v3 = 0;
    while (while_method_0(v3)){
        unsigned long long v5;
        v5 = (unsigned long long)v3;
        unsigned long long v6;
        v6 = v5 * 4ull;
        unsigned char * v7;
        v7 = (unsigned char *)(v0+v6);
        Union2 v9;
        v9 = f_5(v7);
        v1[v3] = v9;
        v3 += 1 ;
    }
    return v1;
}
__device__ Union0 f_0(unsigned char * v0){
    int v1;
    v1 = f_1(v0);
    unsigned char * v2;
    v2 = (unsigned char *)(v0+8ull);
    switch (v1) {
        case 0: {
            Union1 v5;
            v5 = f_2(v2);
            return Union0{Union0_0{v5}};
            break;
        }
        case 1: {
            static_array<Union2,2> v7;
            v7 = f_4(v2);
            return Union0{Union0_1{v7}};
            break;
        }
        case 2: {
            f_3(v2);
            return Union0{Union0_2{}};
            break;
        }
        case 3: {
            f_3(v2);
            return Union0{Union0_3{}};
            break;
        }
        case 4: {
            f_3(v2);
            return Union0{Union0_4{}};
            break;
        }
        default: {
            printf("%s\n", "Invalid tag.");
            __trap();
        }
    }
}
__device__ unsigned long long f_7(unsigned char * v0){
    unsigned long long * v1;
    v1 = (unsigned long long *)(v0+0ull);
    unsigned long long v3;
    v3 = v1[0];
    return v3;
}
__device__ int f_8(unsigned char * v0){
    int * v1;
    v1 = (int *)(v0+8ull);
    int v3;
    v3 = v1[0];
    return v3;
}
__device__ unsigned char f_13(unsigned char * v0){
    unsigned char * v1;
    v1 = (unsigned char *)(v0+0ull);
    unsigned char v3;
    v3 = v1[0];
    return v3;
}
__device__ unsigned char f_12(unsigned char * v0){
    unsigned char v1;
    v1 = f_13(v0);
    return v1;
}
__device__ static_array<unsigned char,2> f_11(unsigned char * v0){
    static_array<unsigned char,2> v1;
    int v3;
    v3 = 0;
    while (while_method_0(v3)){
        unsigned long long v5;
        v5 = (unsigned long long)v3;
        unsigned char * v6;
        v6 = (unsigned char *)(v0+v5);
        unsigned char v8;
        v8 = f_12(v6);
        v1[v3] = v8;
        v3 += 1 ;
    }
    return v1;
}
__device__ int f_14(unsigned char * v0){
    int * v1;
    v1 = (int *)(v0+28ull);
    int v3;
    v3 = v1[0];
    return v3;
}
__device__ inline bool while_method_1(int v0){
    bool v1;
    v1 = v0 < 3;
    return v1;
}
__device__ static_array<unsigned char,3> f_15(unsigned char * v0){
    static_array<unsigned char,3> v1;
    int v3;
    v3 = 0;
    while (while_method_1(v3)){
        unsigned long long v5;
        v5 = (unsigned long long)v3;
        unsigned char * v6;
        v6 = (unsigned char *)(v0+v5);
        unsigned char v8;
        v8 = f_12(v6);
        v1[v3] = v8;
        v3 += 1 ;
    }
    return v1;
}
__device__ inline bool while_method_2(int v0){
    bool v1;
    v1 = v0 < 5;
    return v1;
}
__device__ static_array<unsigned char,5> f_16(unsigned char * v0){
    static_array<unsigned char,5> v1;
    int v3;
    v3 = 0;
    while (while_method_2(v3)){
        unsigned long long v5;
        v5 = (unsigned long long)v3;
        unsigned char * v6;
        v6 = (unsigned char *)(v0+v5);
        unsigned char v8;
        v8 = f_12(v6);
        v1[v3] = v8;
        v3 += 1 ;
    }
    return v1;
}
__device__ inline bool while_method_3(int v0){
    bool v1;
    v1 = v0 < 4;
    return v1;
}
__device__ static_array<unsigned char,4> f_17(unsigned char * v0){
    static_array<unsigned char,4> v1;
    int v3;
    v3 = 0;
    while (while_method_3(v3)){
        unsigned long long v5;
        v5 = (unsigned long long)v3;
        unsigned char * v6;
        v6 = (unsigned char *)(v0+v5);
        unsigned char v8;
        v8 = f_12(v6);
        v1[v3] = v8;
        v3 += 1 ;
    }
    return v1;
}
__device__ Tuple2 f_10(unsigned char * v0){
    int * v1;
    v1 = (int *)(v0+0ull);
    int v3;
    v3 = v1[0];
    static_array<static_array<unsigned char,2>,2> v4;
    int v6;
    v6 = 0;
    while (while_method_0(v6)){
        unsigned long long v8;
        v8 = (unsigned long long)v6;
        unsigned long long v9;
        v9 = v8 * 2ull;
        unsigned long long v10;
        v10 = 4ull + v9;
        unsigned char * v11;
        v11 = (unsigned char *)(v0+v10);
        static_array<unsigned char,2> v13;
        v13 = f_11(v11);
        v4[v6] = v13;
        v6 += 1 ;
    }
    static_array<int,2> v14;
    int v16;
    v16 = 0;
    while (while_method_0(v16)){
        unsigned long long v18;
        v18 = (unsigned long long)v16;
        unsigned long long v19;
        v19 = v18 * 4ull;
        unsigned long long v20;
        v20 = 8ull + v19;
        unsigned char * v21;
        v21 = (unsigned char *)(v0+v20);
        int v23;
        v23 = f_1(v21);
        v14[v16] = v23;
        v16 += 1 ;
    }
    int * v24;
    v24 = (int *)(v0+16ull);
    int v26;
    v26 = v24[0];
    static_array<int,2> v27;
    int v29;
    v29 = 0;
    while (while_method_0(v29)){
        unsigned long long v31;
        v31 = (unsigned long long)v29;
        unsigned long long v32;
        v32 = v31 * 4ull;
        unsigned long long v33;
        v33 = 20ull + v32;
        unsigned char * v34;
        v34 = (unsigned char *)(v0+v33);
        int v36;
        v36 = f_1(v34);
        v27[v29] = v36;
        v29 += 1 ;
    }
    int v37;
    v37 = f_14(v0);
    unsigned char * v38;
    v38 = (unsigned char *)(v0+32ull);
    Union5 v48;
    switch (v37) {
        case 0: {
            static_array<unsigned char,3> v41;
            v41 = f_15(v38);
            v48 = Union5{Union5_0{v41}};
            break;
        }
        case 1: {
            f_3(v38);
            v48 = Union5{Union5_1{}};
            break;
        }
        case 2: {
            static_array<unsigned char,5> v44;
            v44 = f_16(v38);
            v48 = Union5{Union5_2{v44}};
            break;
        }
        case 3: {
            static_array<unsigned char,4> v46;
            v46 = f_17(v38);
            v48 = Union5{Union5_3{v46}};
            break;
        }
        default: {
            printf("%s\n", "Invalid tag.");
            __trap();
        }
    }
    return Tuple2{v3, v4, v14, v26, v27, v48};
}
__device__ int f_19(unsigned char * v0){
    int * v1;
    v1 = (int *)(v0+40ull);
    int v3;
    v3 = v1[0];
    return v3;
}
__device__ Tuple3 f_18(unsigned char * v0){
    int * v1;
    v1 = (int *)(v0+0ull);
    int v3;
    v3 = v1[0];
    static_array<static_array<unsigned char,2>,2> v4;
    int v6;
    v6 = 0;
    while (while_method_0(v6)){
        unsigned long long v8;
        v8 = (unsigned long long)v6;
        unsigned long long v9;
        v9 = v8 * 2ull;
        unsigned long long v10;
        v10 = 4ull + v9;
        unsigned char * v11;
        v11 = (unsigned char *)(v0+v10);
        static_array<unsigned char,2> v13;
        v13 = f_11(v11);
        v4[v6] = v13;
        v6 += 1 ;
    }
    static_array<int,2> v14;
    int v16;
    v16 = 0;
    while (while_method_0(v16)){
        unsigned long long v18;
        v18 = (unsigned long long)v16;
        unsigned long long v19;
        v19 = v18 * 4ull;
        unsigned long long v20;
        v20 = 8ull + v19;
        unsigned char * v21;
        v21 = (unsigned char *)(v0+v20);
        int v23;
        v23 = f_1(v21);
        v14[v16] = v23;
        v16 += 1 ;
    }
    int * v24;
    v24 = (int *)(v0+16ull);
    int v26;
    v26 = v24[0];
    static_array<int,2> v27;
    int v29;
    v29 = 0;
    while (while_method_0(v29)){
        unsigned long long v31;
        v31 = (unsigned long long)v29;
        unsigned long long v32;
        v32 = v31 * 4ull;
        unsigned long long v33;
        v33 = 20ull + v32;
        unsigned char * v34;
        v34 = (unsigned char *)(v0+v33);
        int v36;
        v36 = f_1(v34);
        v27[v29] = v36;
        v29 += 1 ;
    }
    int v37;
    v37 = f_14(v0);
    unsigned char * v38;
    v38 = (unsigned char *)(v0+32ull);
    Union5 v48;
    switch (v37) {
        case 0: {
            static_array<unsigned char,3> v41;
            v41 = f_15(v38);
            v48 = Union5{Union5_0{v41}};
            break;
        }
        case 1: {
            f_3(v38);
            v48 = Union5{Union5_1{}};
            break;
        }
        case 2: {
            static_array<unsigned char,5> v44;
            v44 = f_16(v38);
            v48 = Union5{Union5_2{v44}};
            break;
        }
        case 3: {
            static_array<unsigned char,4> v46;
            v46 = f_17(v38);
            v48 = Union5{Union5_3{v46}};
            break;
        }
        default: {
            printf("%s\n", "Invalid tag.");
            __trap();
        }
    }
    int v49;
    v49 = f_19(v0);
    unsigned char * v50;
    v50 = (unsigned char *)(v0+44ull);
    Union1 v58;
    switch (v49) {
        case 0: {
            f_3(v50);
            v58 = Union1{Union1_0{}};
            break;
        }
        case 1: {
            f_3(v50);
            v58 = Union1{Union1_1{}};
            break;
        }
        case 2: {
            f_3(v50);
            v58 = Union1{Union1_2{}};
            break;
        }
        case 3: {
            int v56;
            v56 = f_1(v50);
            v58 = Union1{Union1_3{v56}};
            break;
        }
        default: {
            printf("%s\n", "Invalid tag.");
            __trap();
        }
    }
    return Tuple3{v3, v4, v14, v26, v27, v48, v58};
}
__device__ Union4 f_9(unsigned char * v0){
    int v1;
    v1 = f_1(v0);
    unsigned char * v2;
    v2 = (unsigned char *)(v0+16ull);
    switch (v1) {
        case 0: {
            int v5; static_array<static_array<unsigned char,2>,2> v6; static_array<int,2> v7; int v8; static_array<int,2> v9; Union5 v10;
            Tuple2 tmp0 = f_10(v2);
            v5 = tmp0.v0; v6 = tmp0.v1; v7 = tmp0.v2; v8 = tmp0.v3; v9 = tmp0.v4; v10 = tmp0.v5;
            return Union4{Union4_0{v5, v6, v7, v8, v9, v10}};
            break;
        }
        case 1: {
            int v12; static_array<static_array<unsigned char,2>,2> v13; static_array<int,2> v14; int v15; static_array<int,2> v16; Union5 v17;
            Tuple2 tmp1 = f_10(v2);
            v12 = tmp1.v0; v13 = tmp1.v1; v14 = tmp1.v2; v15 = tmp1.v3; v16 = tmp1.v4; v17 = tmp1.v5;
            return Union4{Union4_1{v12, v13, v14, v15, v16, v17}};
            break;
        }
        case 2: {
            f_3(v2);
            return Union4{Union4_2{}};
            break;
        }
        case 3: {
            int v20; static_array<static_array<unsigned char,2>,2> v21; static_array<int,2> v22; int v23; static_array<int,2> v24; Union5 v25;
            Tuple2 tmp2 = f_10(v2);
            v20 = tmp2.v0; v21 = tmp2.v1; v22 = tmp2.v2; v23 = tmp2.v3; v24 = tmp2.v4; v25 = tmp2.v5;
            return Union4{Union4_3{v20, v21, v22, v23, v24, v25}};
            break;
        }
        case 4: {
            int v27; static_array<static_array<unsigned char,2>,2> v28; static_array<int,2> v29; int v30; static_array<int,2> v31; Union5 v32;
            Tuple2 tmp3 = f_10(v2);
            v27 = tmp3.v0; v28 = tmp3.v1; v29 = tmp3.v2; v30 = tmp3.v3; v31 = tmp3.v4; v32 = tmp3.v5;
            return Union4{Union4_4{v27, v28, v29, v30, v31, v32}};
            break;
        }
        case 5: {
            int v34; static_array<static_array<unsigned char,2>,2> v35; static_array<int,2> v36; int v37; static_array<int,2> v38; Union5 v39; Union1 v40;
            Tuple3 tmp4 = f_18(v2);
            v34 = tmp4.v0; v35 = tmp4.v1; v36 = tmp4.v2; v37 = tmp4.v3; v38 = tmp4.v4; v39 = tmp4.v5; v40 = tmp4.v6;
            return Union4{Union4_5{v34, v35, v36, v37, v38, v39, v40}};
            break;
        }
        case 6: {
            int v42; static_array<static_array<unsigned char,2>,2> v43; static_array<int,2> v44; int v45; static_array<int,2> v46; Union5 v47;
            Tuple2 tmp5 = f_10(v2);
            v42 = tmp5.v0; v43 = tmp5.v1; v44 = tmp5.v2; v45 = tmp5.v3; v46 = tmp5.v4; v47 = tmp5.v5;
            return Union4{Union4_6{v42, v43, v44, v45, v46, v47}};
            break;
        }
        case 7: {
            int v49; static_array<static_array<unsigned char,2>,2> v50; static_array<int,2> v51; int v52; static_array<int,2> v53; Union5 v54;
            Tuple2 tmp6 = f_10(v2);
            v49 = tmp6.v0; v50 = tmp6.v1; v51 = tmp6.v2; v52 = tmp6.v3; v53 = tmp6.v4; v54 = tmp6.v5;
            return Union4{Union4_7{v49, v50, v51, v52, v53, v54}};
            break;
        }
        default: {
            printf("%s\n", "Invalid tag.");
            __trap();
        }
    }
}
__device__ int f_20(unsigned char * v0){
    int * v1;
    v1 = (int *)(v0+80ull);
    int v3;
    v3 = v1[0];
    return v3;
}
__device__ inline bool while_method_4(int v0, int v1){
    bool v2;
    v2 = v1 < v0;
    return v2;
}
__device__ static_array_list<unsigned char,5> f_22(unsigned char * v0){
    static_array_list<unsigned char,5> v1;
    v1 = static_array_list<unsigned char,5>{};
    int v3;
    v3 = f_1(v0);
    v1.unsafe_set_length(v3);
    int v4;
    v4 = v1.length;
    int v5;
    v5 = 0;
    while (while_method_4(v4, v5)){
        unsigned long long v7;
        v7 = (unsigned long long)v5;
        unsigned long long v8;
        v8 = 4ull + v7;
        unsigned char * v9;
        v9 = (unsigned char *)(v0+v8);
        unsigned char v11;
        v11 = f_12(v9);
        v1[v5] = v11;
        v5 += 1 ;
    }
    return v1;
}
__device__ Tuple4 f_23(unsigned char * v0){
    int * v1;
    v1 = (int *)(v0+0ull);
    int v3;
    v3 = v1[0];
    int * v4;
    v4 = (int *)(v0+4ull);
    int v6;
    v6 = v4[0];
    return Tuple4{v3, v6};
}
__device__ int f_25(unsigned char * v0){
    int * v1;
    v1 = (int *)(v0+4ull);
    int v3;
    v3 = v1[0];
    return v3;
}
__device__ Tuple5 f_24(unsigned char * v0){
    int * v1;
    v1 = (int *)(v0+0ull);
    int v3;
    v3 = v1[0];
    int v4;
    v4 = f_25(v0);
    unsigned char * v5;
    v5 = (unsigned char *)(v0+8ull);
    Union1 v13;
    switch (v4) {
        case 0: {
            f_3(v5);
            v13 = Union1{Union1_0{}};
            break;
        }
        case 1: {
            f_3(v5);
            v13 = Union1{Union1_1{}};
            break;
        }
        case 2: {
            f_3(v5);
            v13 = Union1{Union1_2{}};
            break;
        }
        case 3: {
            int v11;
            v11 = f_1(v5);
            v13 = Union1{Union1_3{v11}};
            break;
        }
        default: {
            printf("%s\n", "Invalid tag.");
            __trap();
        }
    }
    return Tuple5{v3, v13};
}
__device__ Tuple6 f_26(unsigned char * v0){
    int * v1;
    v1 = (int *)(v0+0ull);
    int v3;
    v3 = v1[0];
    static_array<unsigned char,2> v4;
    int v6;
    v6 = 0;
    while (while_method_0(v6)){
        unsigned long long v8;
        v8 = (unsigned long long)v6;
        unsigned long long v9;
        v9 = 4ull + v8;
        unsigned char * v10;
        v10 = (unsigned char *)(v0+v9);
        unsigned char v12;
        v12 = f_12(v10);
        v4[v6] = v12;
        v6 += 1 ;
    }
    return Tuple6{v3, v4};
}
__device__ Tuple0 f_29(unsigned char * v0){
    static_array<unsigned char,5> v1;
    int v3;
    v3 = 0;
    while (while_method_2(v3)){
        unsigned long long v5;
        v5 = (unsigned long long)v3;
        unsigned char * v6;
        v6 = (unsigned char *)(v0+v5);
        unsigned char v8;
        v8 = f_12(v6);
        v1[v3] = v8;
        v3 += 1 ;
    }
    char * v9;
    v9 = (char *)(v0+5ull);
    char v11;
    v11 = v9[0];
    return Tuple0{v1, v11};
}
__device__ Tuple0 f_28(unsigned char * v0){
    static_array<unsigned char,5> v1; char v2;
    Tuple0 tmp10 = f_29(v0);
    v1 = tmp10.v0; v2 = tmp10.v1;
    return Tuple0{v1, v2};
}
__device__ Tuple7 f_27(unsigned char * v0){
    int * v1;
    v1 = (int *)(v0+0ull);
    int v3;
    v3 = v1[0];
    static_array<Tuple0,2> v4;
    int v6;
    v6 = 0;
    while (while_method_0(v6)){
        unsigned long long v8;
        v8 = (unsigned long long)v6;
        unsigned long long v9;
        v9 = v8 * 8ull;
        unsigned long long v10;
        v10 = 8ull + v9;
        unsigned char * v11;
        v11 = (unsigned char *)(v0+v10);
        static_array<unsigned char,5> v13; char v14;
        Tuple0 tmp11 = f_28(v11);
        v13 = tmp11.v0; v14 = tmp11.v1;
        v4[v6] = Tuple0{v13, v14};
        v6 += 1 ;
    }
    int * v15;
    v15 = (int *)(v0+24ull);
    int v17;
    v17 = v15[0];
    return Tuple7{v3, v4, v17};
}
__device__ Union6 f_21(unsigned char * v0){
    int v1;
    v1 = f_1(v0);
    unsigned char * v2;
    v2 = (unsigned char *)(v0+16ull);
    switch (v1) {
        case 0: {
            static_array_list<unsigned char,5> v5;
            v5 = f_22(v2);
            return Union6{Union6_0{v5}};
            break;
        }
        case 1: {
            int v7; int v8;
            Tuple4 tmp7 = f_23(v2);
            v7 = tmp7.v0; v8 = tmp7.v1;
            return Union6{Union6_1{v7, v8}};
            break;
        }
        case 2: {
            int v10; Union1 v11;
            Tuple5 tmp8 = f_24(v2);
            v10 = tmp8.v0; v11 = tmp8.v1;
            return Union6{Union6_2{v10, v11}};
            break;
        }
        case 3: {
            int v13; static_array<unsigned char,2> v14;
            Tuple6 tmp9 = f_26(v2);
            v13 = tmp9.v0; v14 = tmp9.v1;
            return Union6{Union6_3{v13, v14}};
            break;
        }
        case 4: {
            int v16; static_array<Tuple0,2> v17; int v18;
            Tuple7 tmp12 = f_27(v2);
            v16 = tmp12.v0; v17 = tmp12.v1; v18 = tmp12.v2;
            return Union6{Union6_4{v16, v17, v18}};
            break;
        }
        default: {
            printf("%s\n", "Invalid tag.");
            __trap();
        }
    }
}
__device__ int f_30(unsigned char * v0){
    int * v1;
    v1 = (int *)(v0+6248ull);
    int v3;
    v3 = v1[0];
    return v3;
}
__device__ Tuple1 f_6(unsigned char * v0){
    unsigned long long v1;
    v1 = f_7(v0);
    int v2;
    v2 = f_8(v0);
    unsigned char * v3;
    v3 = (unsigned char *)(v0+16ull);
    Union3 v9;
    switch (v2) {
        case 0: {
            f_3(v3);
            v9 = Union3{Union3_0{}};
            break;
        }
        case 1: {
            Union4 v7;
            v7 = f_9(v3);
            v9 = Union3{Union3_1{v7}};
            break;
        }
        default: {
            printf("%s\n", "Invalid tag.");
            __trap();
        }
    }
    static_array_list<Union6,128> v10;
    v10 = static_array_list<Union6,128>{};
    int v12;
    v12 = f_20(v0);
    v10.unsafe_set_length(v12);
    int v13;
    v13 = v10.length;
    int v14;
    v14 = 0;
    while (while_method_4(v13, v14)){
        unsigned long long v16;
        v16 = (unsigned long long)v14;
        unsigned long long v17;
        v17 = v16 * 48ull;
        unsigned long long v18;
        v18 = 96ull + v17;
        unsigned char * v19;
        v19 = (unsigned char *)(v0+v18);
        Union6 v21;
        v21 = f_21(v19);
        v10[v14] = v21;
        v14 += 1 ;
    }
    static_array<Union2,2> v22;
    int v24;
    v24 = 0;
    while (while_method_0(v24)){
        unsigned long long v26;
        v26 = (unsigned long long)v24;
        unsigned long long v27;
        v27 = v26 * 4ull;
        unsigned long long v28;
        v28 = 6240ull + v27;
        unsigned char * v29;
        v29 = (unsigned char *)(v0+v28);
        Union2 v31;
        v31 = f_5(v29);
        v22[v24] = v31;
        v24 += 1 ;
    }
    int v32;
    v32 = f_30(v0);
    unsigned char * v33;
    v33 = (unsigned char *)(v0+6256ull);
    Union7 v51;
    switch (v32) {
        case 0: {
            f_3(v33);
            v51 = Union7{Union7_0{}};
            break;
        }
        case 1: {
            int v37; static_array<static_array<unsigned char,2>,2> v38; static_array<int,2> v39; int v40; static_array<int,2> v41; Union5 v42;
            Tuple2 tmp13 = f_10(v33);
            v37 = tmp13.v0; v38 = tmp13.v1; v39 = tmp13.v2; v40 = tmp13.v3; v41 = tmp13.v4; v42 = tmp13.v5;
            v51 = Union7{Union7_1{v37, v38, v39, v40, v41, v42}};
            break;
        }
        case 2: {
            int v44; static_array<static_array<unsigned char,2>,2> v45; static_array<int,2> v46; int v47; static_array<int,2> v48; Union5 v49;
            Tuple2 tmp14 = f_10(v33);
            v44 = tmp14.v0; v45 = tmp14.v1; v46 = tmp14.v2; v47 = tmp14.v3; v48 = tmp14.v4; v49 = tmp14.v5;
            v51 = Union7{Union7_2{v44, v45, v46, v47, v48, v49}};
            break;
        }
        default: {
            printf("%s\n", "Invalid tag.");
            __trap();
        }
    }
    return Tuple1{v1, v9, v10, v22, v51};
}
__device__ inline bool while_method_5(Union3 v0){
    switch (v0.tag) {
        case 0: { // None
            return false;
            break;
        }
        case 1: { // Some
            Union4 v1 = v0.case1.v0;
            return true;
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
}
__device__ unsigned int loop_34(unsigned int v0, curandStatePhilox4_32_10_t & v1){
    unsigned int v2;
    v2 = curand(&v1);
    unsigned int v3;
    v3 = v2 % v0;
    unsigned int v4;
    v4 = v2 - v3;
    unsigned int v5;
    v5 = 0u - v0;
    bool v6;
    v6 = v4 <= v5;
    if (v6){
        return v3;
    } else {
        return loop_34(v0, v1);
    }
}
__device__ Tuple10 draw_card_33(curandStatePhilox4_32_10_t & v0, unsigned long long v1){
    int v2;
    v2 = __popcll(v1);
    unsigned int v3;
    v3 = (unsigned int)v2;
    unsigned int v4;
    v4 = loop_34(v3, v0);
    int v5;
    v5 = (int)v4;
    unsigned int v6;
    v6 = (unsigned int)v1;
    unsigned long long v7;
    v7 = v1 >> 32;
    unsigned int v8;
    v8 = (unsigned int)v7;
    int v9;
    v9 = __popc(v6);
    bool v10;
    v10 = v5 < v9;
    unsigned int v22;
    if (v10){
        int v11;
        v11 = v5 + 1;
        unsigned int v12;
        v12 = __fns(v6,0u,v11);
        v22 = v12;
    } else {
        int v13;
        v13 = v5 - v9;
        int v14;
        v14 = __popc(v8);
        bool v15;
        v15 = v13 < v14;
        if (v15){
            int v16;
            v16 = v13 + 1;
            unsigned int v17;
            v17 = __fns(v8,0u,v16);
            unsigned int v18;
            v18 = v17 + 32u;
            v22 = v18;
        } else {
            int v19;
            v19 = v13 - v14;
            printf("%s\n", "Cannot find the n-th set bit.");
            __trap();
        }
    }
    unsigned char v23;
    v23 = (unsigned char)v22;
    int v24;
    v24 = (int)v22;
    unsigned long long v25;
    v25 = 1ull << v24;
    unsigned long long v26;
    v26 = v1 ^ v25;
    return Tuple10{v23, v26};
}
__device__ Tuple8 draw_cards_32(curandStatePhilox4_32_10_t & v0, unsigned long long v1){
    static_array<unsigned char,3> v2;
    int v4; unsigned long long v5;
    Tuple9 tmp16 = Tuple9{0, v1};
    v4 = tmp16.v0; v5 = tmp16.v1;
    while (while_method_1(v4)){
        unsigned char v7; unsigned long long v8;
        Tuple10 tmp17 = draw_card_33(v0, v5);
        v7 = tmp17.v0; v8 = tmp17.v1;
        v2[v4] = v7;
        v5 = v8;
        v4 += 1 ;
    }
    return Tuple8{v2, v5};
}
__device__ static_array_list<unsigned char,5> get_community_cards_35(Union5 v0, static_array<unsigned char,3> v1){
    static_array_list<unsigned char,5> v2;
    v2 = static_array_list<unsigned char,5>{};
    switch (v0.tag) {
        case 0: { // Flop
            static_array<unsigned char,3> v4 = v0.case0.v0;
            int v5;
            v5 = 0;
            while (while_method_1(v5)){
                bool v7;
                v7 = 0 <= v5;
                bool v9;
                if (v7){
                    bool v8;
                    v8 = v5 < 3;
                    v9 = v8;
                } else {
                    v9 = false;
                }
                bool v10;
                v10 = v9 == false;
                if (v10){
                    assert("Index must be in range." && v9);
                } else {
                }
                unsigned char v12;
                v12 = v4[v5];
                v2.push(v12);
                v5 += 1 ;
            }
            break;
        }
        case 1: { // Preflop
            break;
        }
        case 2: { // River
            static_array<unsigned char,5> v24 = v0.case2.v0;
            int v25;
            v25 = 0;
            while (while_method_2(v25)){
                bool v27;
                v27 = 0 <= v25;
                bool v29;
                if (v27){
                    bool v28;
                    v28 = v25 < 5;
                    v29 = v28;
                } else {
                    v29 = false;
                }
                bool v30;
                v30 = v29 == false;
                if (v30){
                    assert("Index must be in range." && v29);
                } else {
                }
                unsigned char v32;
                v32 = v24[v25];
                v2.push(v32);
                v25 += 1 ;
            }
            break;
        }
        case 3: { // Turn
            static_array<unsigned char,4> v14 = v0.case3.v0;
            int v15;
            v15 = 0;
            while (while_method_3(v15)){
                bool v17;
                v17 = 0 <= v15;
                bool v19;
                if (v17){
                    bool v18;
                    v18 = v15 < 4;
                    v19 = v18;
                } else {
                    v19 = false;
                }
                bool v20;
                v20 = v19 == false;
                if (v20){
                    assert("Index must be in range." && v19);
                } else {
                }
                unsigned char v22;
                v22 = v14[v15];
                v2.push(v22);
                v15 += 1 ;
            }
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
    int v34;
    v34 = 0;
    while (while_method_1(v34)){
        bool v36;
        v36 = 0 <= v34;
        bool v38;
        if (v36){
            bool v37;
            v37 = v34 < 3;
            v38 = v37;
        } else {
            v38 = false;
        }
        bool v39;
        v39 = v38 == false;
        if (v39){
            assert("Index must be in range." && v38);
        } else {
        }
        unsigned char v41;
        v41 = v1[v34];
        v2.push(v41);
        v34 += 1 ;
    }
    return v2;
}
__device__ bool player_can_act_37(int v0, static_array<static_array<unsigned char,2>,2> v1, static_array<int,2> v2, int v3, static_array<int,2> v4, Union5 v5){
    int v6;
    v6 = v3 % 2;
    bool v7;
    v7 = 0 <= v6;
    bool v9;
    if (v7){
        bool v8;
        v8 = v6 < 2;
        v9 = v8;
    } else {
        v9 = false;
    }
    bool v10;
    v10 = v9 == false;
    if (v10){
        assert("Index must be in range." && v9);
    } else {
    }
    int v12;
    v12 = v4[v6];
    bool v14;
    v14 = v12 > 0;
    bool v16;
    if (v7){
        bool v15;
        v15 = v6 < 2;
        v16 = v15;
    } else {
        v16 = false;
    }
    bool v17;
    v17 = v16 == false;
    if (v17){
        assert("Index must be in range." && v16);
    } else {
    }
    int v19;
    v19 = v2[v6];
    int v21;
    v21 = v2[0];
    int v23; int v24;
    Tuple4 tmp19 = Tuple4{1, v21};
    v23 = tmp19.v0; v24 = tmp19.v1;
    while (while_method_0(v23)){
        bool v26;
        v26 = 0 <= v23;
        bool v28;
        if (v26){
            bool v27;
            v27 = v23 < 2;
            v28 = v27;
        } else {
            v28 = false;
        }
        bool v29;
        v29 = v28 == false;
        if (v29){
            assert("Index must be in range." && v28);
        } else {
        }
        int v31;
        v31 = v2[v23];
        bool v33;
        v33 = v24 >= v31;
        int v34;
        if (v33){
            v34 = v24;
        } else {
            v34 = v31;
        }
        v24 = v34;
        v23 += 1 ;
    }
    bool v35;
    v35 = v19 < v24;
    int v36; int v37;
    Tuple4 tmp20 = Tuple4{0, 0};
    v36 = tmp20.v0; v37 = tmp20.v1;
    while (while_method_0(v36)){
        bool v39;
        v39 = 0 <= v36;
        bool v41;
        if (v39){
            bool v40;
            v40 = v36 < 2;
            v41 = v40;
        } else {
            v41 = false;
        }
        bool v42;
        v42 = v41 == false;
        if (v42){
            assert("Index must be in range." && v41);
        } else {
        }
        int v44;
        v44 = v4[v36];
        bool v46;
        v46 = 0 < v44;
        int v47;
        if (v46){
            v47 = 1;
        } else {
            v47 = 0;
        }
        int v48;
        v48 = v37 + v47;
        v37 = v48;
        v36 += 1 ;
    }
    if (v14){
        if (v35){
            return true;
        } else {
            bool v49;
            v49 = v3 < 2;
            if (v49){
                bool v50;
                v50 = 0 < v37;
                return v50;
            } else {
                return false;
            }
        }
    } else {
        return false;
    }
}
__device__ Union4 go_next_street_38(int v0, static_array<static_array<unsigned char,2>,2> v1, static_array<int,2> v2, int v3, static_array<int,2> v4, Union5 v5){
    switch (v5.tag) {
        case 0: { // Flop
            static_array<unsigned char,3> v7 = v5.case0.v0;
            return Union4{Union4_7{v0, v1, v2, v3, v4, v5}};
            break;
        }
        case 1: { // Preflop
            return Union4{Union4_0{v0, v1, v2, v3, v4, v5}};
            break;
        }
        case 2: { // River
            static_array<unsigned char,5> v11 = v5.case2.v0;
            return Union4{Union4_6{v0, v1, v2, v3, v4, v5}};
            break;
        }
        case 3: { // Turn
            static_array<unsigned char,4> v9 = v5.case3.v0;
            return Union4{Union4_3{v0, v1, v2, v3, v4, v5}};
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
}
__device__ Union4 try_round_36(int v0, static_array<static_array<unsigned char,2>,2> v1, static_array<int,2> v2, int v3, static_array<int,2> v4, Union5 v5){
    int v6;
    v6 = v3 + 1;
    bool v7;
    v7 = player_can_act_37(v0, v1, v2, v3, v4, v5);
    if (v7){
        return Union4{Union4_4{v0, v1, v2, v3, v4, v5}};
    } else {
        bool v9;
        v9 = player_can_act_37(v0, v1, v2, v6, v4, v5);
        if (v9){
            return Union4{Union4_4{v0, v1, v2, v6, v4, v5}};
        } else {
            return go_next_street_38(v0, v1, v2, v3, v4, v5);
        }
    }
}
__device__ Tuple11 draw_cards_39(curandStatePhilox4_32_10_t & v0, unsigned long long v1){
    static_array<unsigned char,2> v2;
    int v4; unsigned long long v5;
    Tuple9 tmp21 = Tuple9{0, v1};
    v4 = tmp21.v0; v5 = tmp21.v1;
    while (while_method_0(v4)){
        unsigned char v7; unsigned long long v8;
        Tuple10 tmp22 = draw_card_33(v0, v5);
        v7 = tmp22.v0; v8 = tmp22.v1;
        v2[v4] = v7;
        v5 = v8;
        v4 += 1 ;
    }
    return Tuple11{v2, v5};
}
__device__ inline bool while_method_6(int v0){
    bool v1;
    v1 = v0 < 1;
    return v1;
}
__device__ Tuple12 draw_cards_40(curandStatePhilox4_32_10_t & v0, unsigned long long v1){
    static_array<unsigned char,1> v2;
    int v4; unsigned long long v5;
    Tuple9 tmp25 = Tuple9{0, v1};
    v4 = tmp25.v0; v5 = tmp25.v1;
    while (while_method_6(v4)){
        unsigned char v7; unsigned long long v8;
        Tuple10 tmp26 = draw_card_33(v0, v5);
        v7 = tmp26.v0; v8 = tmp26.v1;
        v2[v4] = v7;
        v5 = v8;
        v4 += 1 ;
    }
    return Tuple12{v2, v5};
}
__device__ static_array_list<unsigned char,5> get_community_cards_41(Union5 v0, static_array<unsigned char,1> v1){
    static_array_list<unsigned char,5> v2;
    v2 = static_array_list<unsigned char,5>{};
    switch (v0.tag) {
        case 0: { // Flop
            static_array<unsigned char,3> v4 = v0.case0.v0;
            int v5;
            v5 = 0;
            while (while_method_1(v5)){
                bool v7;
                v7 = 0 <= v5;
                bool v9;
                if (v7){
                    bool v8;
                    v8 = v5 < 3;
                    v9 = v8;
                } else {
                    v9 = false;
                }
                bool v10;
                v10 = v9 == false;
                if (v10){
                    assert("Index must be in range." && v9);
                } else {
                }
                unsigned char v12;
                v12 = v4[v5];
                v2.push(v12);
                v5 += 1 ;
            }
            break;
        }
        case 1: { // Preflop
            break;
        }
        case 2: { // River
            static_array<unsigned char,5> v24 = v0.case2.v0;
            int v25;
            v25 = 0;
            while (while_method_2(v25)){
                bool v27;
                v27 = 0 <= v25;
                bool v29;
                if (v27){
                    bool v28;
                    v28 = v25 < 5;
                    v29 = v28;
                } else {
                    v29 = false;
                }
                bool v30;
                v30 = v29 == false;
                if (v30){
                    assert("Index must be in range." && v29);
                } else {
                }
                unsigned char v32;
                v32 = v24[v25];
                v2.push(v32);
                v25 += 1 ;
            }
            break;
        }
        case 3: { // Turn
            static_array<unsigned char,4> v14 = v0.case3.v0;
            int v15;
            v15 = 0;
            while (while_method_3(v15)){
                bool v17;
                v17 = 0 <= v15;
                bool v19;
                if (v17){
                    bool v18;
                    v18 = v15 < 4;
                    v19 = v18;
                } else {
                    v19 = false;
                }
                bool v20;
                v20 = v19 == false;
                if (v20){
                    assert("Index must be in range." && v19);
                } else {
                }
                unsigned char v22;
                v22 = v14[v15];
                v2.push(v22);
                v15 += 1 ;
            }
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
    int v34;
    v34 = 0;
    while (while_method_6(v34)){
        bool v36;
        v36 = 0 <= v34;
        bool v38;
        if (v36){
            bool v37;
            v37 = v34 < 1;
            v38 = v37;
        } else {
            v38 = false;
        }
        bool v39;
        v39 = v38 == false;
        if (v39){
            assert("Index must be in range." && v38);
        } else {
        }
        unsigned char v41;
        v41 = v1[v34];
        v2.push(v41);
        v34 += 1 ;
    }
    return v2;
}
__device__ inline bool while_method_7(int v0){
    bool v1;
    v1 = v0 < 524288;
    return v1;
}
__device__ inline bool while_method_8(int v0){
    bool v1;
    v1 = v0 < 10;
    return v1;
}
__device__ void method_42(unsigned int v0, float * v1, int v2){
    unsigned int v3;
    v3 = v0 + 1u;
    bool v4;
    v4 = v3 == 0u;
    bool v5;
    v5 = v4 != true;
    bool v6;
    v6 = v5 == false;
    if (v6){
        assert("Pickle failure. The input is too large in the binary serializer." && v5);
    } else {
    }
    int v8; unsigned int v9;
    Tuple13 tmp29 = Tuple13{0, v3};
    v8 = tmp29.v0; v9 = tmp29.v1;
    while (while_method_8(v8)){
        unsigned int v11;
        v11 = v9 & 1u;
        int v12;
        v12 = v2 + v8;
        float v13;
        v13 = (float)v11;
        v1[v12] = v13;
        unsigned int v14;
        v14 = v9 >> 1;
        v9 = v14;
        v8 += 1 ;
    }
    bool v15;
    v15 = v9 == 0u;
    bool v16;
    v16 = v15 == false;
    if (v16){
        assert("Picke failure. The remains of the input has to equal zero in the binary pickler." && v15);
        return ;
    } else {
        return ;
    }
}
__device__ inline bool while_method_9(int v0){
    bool v1;
    v1 = v0 < 11;
    return v1;
}
__device__ void method_43(unsigned int v0, float * v1, int v2){
    unsigned int v3;
    v3 = v0 + 1u;
    bool v4;
    v4 = v3 == 0u;
    bool v5;
    v5 = v4 != true;
    bool v6;
    v6 = v5 == false;
    if (v6){
        assert("Pickle failure. The input is too large in the binary serializer." && v5);
    } else {
    }
    int v8; unsigned int v9;
    Tuple13 tmp30 = Tuple13{0, v3};
    v8 = tmp30.v0; v9 = tmp30.v1;
    while (while_method_9(v8)){
        unsigned int v11;
        v11 = v9 & 1u;
        int v12;
        v12 = v2 + v8;
        float v13;
        v13 = (float)v11;
        v1[v12] = v13;
        unsigned int v14;
        v14 = v9 >> 1;
        v9 = v14;
        v8 += 1 ;
    }
    bool v15;
    v15 = v9 == 0u;
    bool v16;
    v16 = v15 == false;
    if (v16){
        assert("Picke failure. The remains of the input has to equal zero in the binary pickler." && v15);
        return ;
    } else {
        return ;
    }
}
__device__ int int_range_44(int v0, int v1, curandStatePhilox4_32_10_t & v2){
    int v3;
    v3 = v0 - v1;
    unsigned int v4;
    v4 = (unsigned int)v3;
    unsigned int v5;
    v5 = loop_34(v4, v2);
    unsigned int v6;
    v6 = (unsigned int)v1;
    unsigned int v7;
    v7 = v5 + v6;
    int v8;
    v8 = (int)v7;
    return v8;
}
__device__ inline bool while_method_10(int v0){
    bool v1;
    v1 = v0 < 8;
    return v1;
}
__device__ inline bool while_method_11(int v0){
    bool v1;
    v1 = v0 < 64;
    return v1;
}
__device__ inline bool while_method_12(int v0){
    bool v1;
    v1 = v0 < 16;
    return v1;
}
__device__ void block_matmul_45(float * v0, float * v1, int v2, float * v3){
    int v4;
    v4 = blockIdx.x;
    assert("Tensor range check" && 0 <= v4 && v4 < 24);
    int v5;
    v5 = 524288 * v4;
    int v6;
    v6 = blockIdx.x;
    assert("Tensor range check" && 0 <= v6 && v6 < 24);
    int v7;
    v7 = 16384 * v6;
    cuda::pipeline<cuda::thread_scope_thread> v8 = cuda::make_pipeline();
    extern __shared__ unsigned char v9[];
    float * v10;
    v10 = reinterpret_cast<float *>(&v9[0ull]);
    float * v12;
    v12 = reinterpret_cast<float *>(&v9[36864ull]);
    float * v14;
    v14 = reinterpret_cast<float *>(&v9[0ull]);
    int v16;
    v16 = threadIdx.x;
    int v17;
    v17 = v16 / 32;
    bool v18;
    v18 = 0 <= v17;
    bool v19;
    v19 = v18 == false;
    if (v19){
        assert("The index needs to be zero or positive." && v18);
    } else {
    }
    int v21;
    v21 = v17 % 4;
    int v22;
    v22 = v17 / 4;
    bool v23;
    v23 = v22 < 2;
    bool v24;
    v24 = v23 == false;
    if (v24){
        assert("The last element of the projection dimensions needs to be greater than the index remainder." && v23);
    } else {
    }
    assert("Tensor range check" && 0 <= v22 && v22 < 2);
    assert("Tensor range check" && 0 <= v21 && v21 < 4);
    int v26;
    v26 = 16 * v21;
    int v27;
    v27 = 9216 * v22;
    int v28;
    v28 = v27 + v26;
    float * v29;
    v29 = v14+v28;
    assert("Tensor range check" && 0 <= v22 && v22 < 2);
    int v31;
    v31 = 4608 * v22;
    int v32;
    v32 = threadIdx.x;
    int v33;
    v33 = v32 % 32;
    bool v34;
    v34 = 0 <= v33;
    bool v35;
    v35 = v34 == false;
    if (v35){
        assert("The index needs to be zero or positive." && v34);
    } else {
    }
    int v37;
    v37 = v33 % 4;
    int v38;
    v38 = v33 / 4;
    bool v39;
    v39 = v38 < 8;
    bool v40;
    v40 = v39 == false;
    if (v40){
        assert("The last element of the projection dimensions needs to be greater than the index remainder." && v39);
    } else {
    }
    assert("Tensor range check" && 0 <= v38 && v38 < 8);
    assert("Tensor range check" && 0 <= v37 && v37 < 4);
    int v42;
    v42 = v37 + v31;
    int v43;
    v43 = 36 * v38;
    int v44;
    v44 = v43 + v42;
    float * v45;
    v45 = v10+v44;
    assert("Tensor range check" && 0 <= v21 && v21 < 4);
    int v47;
    v47 = 576 * v21;
    int v48;
    v48 = threadIdx.x;
    int v49;
    v49 = v48 % 32;
    bool v50;
    v50 = 0 <= v49;
    bool v51;
    v51 = v50 == false;
    if (v51){
        assert("The index needs to be zero or positive." && v50);
    } else {
    }
    int v53;
    v53 = v49 % 4;
    int v54;
    v54 = v49 / 4;
    bool v55;
    v55 = v54 < 8;
    bool v56;
    v56 = v55 == false;
    if (v56){
        assert("The last element of the projection dimensions needs to be greater than the index remainder." && v55);
    } else {
    }
    assert("Tensor range check" && 0 <= v54 && v54 < 8);
    assert("Tensor range check" && 0 <= v53 && v53 < 4);
    int v58;
    v58 = v53 + v47;
    int v59;
    v59 = 36 * v54;
    int v60;
    v60 = v59 + v58;
    float * v61;
    v61 = v12+v60;
    wmma::fragment<wmma::accumulator, 16, 16, 8, float> v63[8];
    int v64;
    v64 = 0;
    while (while_method_6(v64)){
        int v66;
        v66 = 0;
        while (while_method_6(v66)){
            assert("Tensor range check" && 0 <= v64 && v64 < 1);
            assert("Tensor range check" && 0 <= v66 && v66 < 1);
            int v68;
            v68 = 64 * v66;
            int v69;
            v69 = v68 + v7;
            int v70;
            v70 = 16384 * v64;
            int v71;
            v71 = v70 + v69;
            float * v72;
            v72 = v0+v71;
            // Pushing the loop unrolling to: 0
            int v74;
            v74 = 0;
            #pragma unroll
            while (while_method_10(v74)){
                int v76;
                v76 = 0;
                #pragma unroll
                while (while_method_6(v76)){
                    assert("Tensor range check" && 0 <= v74 && v74 < 8);
                    assert("Tensor range check" && 0 <= v76 && v76 < 1);
                    int v78;
                    v78 = v74 + v76;
                    wmma::fragment<wmma::accumulator, 16, 16, 8, float> & v79 = v63[v78];
                    wmma::fill_fragment(v79, 0.0f);
                    v76 += 1 ;
                }
                v74 += 1 ;
            }
            // Poping the loop unrolling to: 0
            int v80;
            v80 = 0;
            while (while_method_11(v80)){
                int v82;
                v82 = v80 + 1;
                bool v83;
                v83 = v80 == 0;
                int v84;
                v84 = v80 % 2;
                bool v85;
                v85 = 0 <= v80;
                bool v86;
                v86 = v85 == false;
                if (v86){
                    assert("The index needs to be zero or positive." && v85);
                } else {
                }
                bool v88;
                v88 = v80 < 64;
                bool v89;
                v89 = v88 == false;
                if (v89){
                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v88);
                } else {
                }
                bool v91;
                v91 = v82 < 64;
                Union9 v97;
                if (v91){
                    bool v92;
                    v92 = 0 <= v82;
                    bool v93;
                    v93 = v92 == false;
                    if (v93){
                        assert("The index needs to be zero or positive." && v92);
                    } else {
                    }
                    v97 = Union9{Union9_1{v82}};
                } else {
                    v97 = Union9{Union9_0{}};
                }
                assert("Tensor range check" && 0 <= v64 && v64 < 1);
                int v98;
                v98 = 524288 * v64;
                int v99;
                v99 = v98 + v5;
                assert("Tensor range check" && 0 <= v80 && v80 < 64);
                int v100;
                v100 = 32 * v80;
                int v101;
                v101 = v100 + v99;
                float * v102;
                v102 = v3+v101;
                assert("Tensor range check" && 0 <= v66 && v66 < 1);
                int v104;
                v104 = 131072 * v66;
                int v105;
                v105 = v104 + v2;
                if (v83){
                    assert("Tensor range check" && 0 <= v80 && v80 < 64);
                    int v106;
                    v106 = v100 + v105;
                    float * v107;
                    v107 = v1+v106;
                    // Pushing the loop unrolling to: 0
                    v8.producer_acquire();
                    int v109;
                    v109 = threadIdx.x;
                    bool v110;
                    v110 = 0 <= v109;
                    bool v111;
                    v111 = v110 == false;
                    if (v111){
                        assert("The index needs to be zero or positive." && v110);
                    } else {
                    }
                    int v113;
                    v113 = v109 % 8;
                    int v114;
                    v114 = v109 / 8;
                    bool v115;
                    v115 = v114 < 32;
                    bool v116;
                    v116 = v115 == false;
                    if (v116){
                        assert("The last element of the projection dimensions needs to be greater than the index remainder." && v115);
                    } else {
                    }
                    assert("Tensor range check" && 0 <= v114 && v114 < 32);
                    assert("Tensor range check" && 0 <= v113 && v113 < 8);
                    int v118;
                    v118 = 4 * v113;
                    int v119;
                    v119 = 36 * v114;
                    int v120;
                    v120 = v119 + v118;
                    int v121;
                    v121 = 2048 * v114;
                    int v122;
                    v122 = v121 + v118;
                    float * v123;
                    v123 = v12+v120;
                    float * v125;
                    v125 = v107+v122;
                    int v127;
                    v127 = 0;
                    #pragma unroll
                    while (while_method_0(v127)){
                        int v129;
                        v129 = 0;
                        #pragma unroll
                        while (while_method_6(v129)){
                            assert("Tensor range check" && 0 <= v127 && v127 < 2);
                            assert("Tensor range check" && 0 <= v129 && v129 < 1);
                            int v131;
                            v131 = 32 * v129;
                            int v132;
                            v132 = 1152 * v127;
                            int v133;
                            v133 = v132 + v131;
                            int v134;
                            v134 = 65536 * v127;
                            int v135;
                            v135 = v134 + v131;
                            constexpr int v136 = sizeof(float) * 4;
                            assert("Pointer alignment check" && (unsigned long long)(v125 + v135) % v136 == 0 && (unsigned long long)(v123 + v133) % v136 == 0);
                            cuda::memcpy_async(v123 + v133, v125 + v135, cuda::aligned_size_t<v136>(v136), v8);
                            v129 += 1 ;
                        }
                        v127 += 1 ;
                    }
                    v8.producer_commit();
                    // Poping the loop unrolling to: 0
                } else {
                }
                // Pushing the loop unrolling to: 0
                int v137;
                v137 = threadIdx.x;
                bool v138;
                v138 = 0 <= v137;
                bool v139;
                v139 = v138 == false;
                if (v139){
                    assert("The index needs to be zero or positive." && v138);
                } else {
                }
                int v141;
                v141 = v137 % 8;
                int v142;
                v142 = v137 / 8;
                bool v143;
                v143 = v142 < 32;
                bool v144;
                v144 = v143 == false;
                if (v144){
                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v143);
                } else {
                }
                assert("Tensor range check" && 0 <= v142 && v142 < 32);
                assert("Tensor range check" && 0 <= v141 && v141 < 8);
                int v146;
                v146 = 4 * v141;
                int v147;
                v147 = 36 * v142;
                int v148;
                v148 = v147 + v146;
                int v149;
                v149 = 2048 * v142;
                int v150;
                v150 = v149 + v146;
                float * v151;
                v151 = v10+v148;
                float * v153;
                v153 = v102+v150;
                int v155;
                v155 = 0;
                #pragma unroll
                while (while_method_10(v155)){
                    int v157;
                    v157 = 0;
                    #pragma unroll
                    while (while_method_6(v157)){
                        assert("Tensor range check" && 0 <= v155 && v155 < 8);
                        assert("Tensor range check" && 0 <= v157 && v157 < 1);
                        int v159;
                        v159 = 32 * v157;
                        int v160;
                        v160 = 1152 * v155;
                        int v161;
                        v161 = v160 + v159;
                        int v162;
                        v162 = 65536 * v155;
                        int v163;
                        v163 = v162 + v159;
                        int4* v164;
                        v164 = reinterpret_cast<int4*>(v153 + v163);
                        int4* v165;
                        v165 = reinterpret_cast<int4*>(v151 + v161);
                        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v164) % 16 == 0 && reinterpret_cast<unsigned long long>(v165) % 16 == 0);
                        *v165 = *v164;
                        v157 += 1 ;
                    }
                    v155 += 1 ;
                }
                // Poping the loop unrolling to: 0
                wmma::fragment<wmma::matrix_a, 16, 16, 8, wmma::precision::tf32, wmma::row_major> v166[1];
                wmma::fragment<wmma::matrix_b, 16, 16, 8, wmma::precision::tf32, wmma::col_major> v167[4];
                cuda::pipeline_consumer_wait_prior<0>(v8);;
                __syncthreads();
                // Pushing the loop unrolling to: 0
                int v168;
                v168 = 0;
                #pragma unroll
                while (while_method_6(v168)){
                    int v170;
                    v170 = 0;
                    #pragma unroll
                    while (while_method_3(v170)){
                        assert("Tensor range check" && 0 <= v168 && v168 < 1);
                        assert("Tensor range check" && 0 <= v170 && v170 < 4);
                        int v172;
                        v172 = 4 * v168;
                        int v173;
                        v173 = v172 + v170;
                        wmma::fragment<wmma::matrix_b, 16, 16, 8, wmma::precision::tf32, wmma::col_major> & v174 = v167[v173];
                        assert("Tensor range check" && 0 <= v168 && v168 < 1);
                        int v175;
                        v175 = 576 * v168;
                        assert("Tensor range check" && 0 <= v170 && v170 < 4);
                        int v176;
                        v176 = 8 * v170;
                        int v177;
                        v177 = v176 + v175;
                        int v178;
                        v178 = 0;
                        #pragma unroll
                        while (while_method_0(v178)){
                            int v180;
                            v180 = 0;
                            #pragma unroll
                            while (while_method_0(v180)){
                                assert("Tensor range check" && 0 <= v178 && v178 < 2);
                                assert("Tensor range check" && 0 <= v180 && v180 < 2);
                                int v182;
                                v182 = 4 * v180;
                                int v183;
                                v183 = v182 + v177;
                                int v184;
                                v184 = 288 * v178;
                                int v185;
                                v185 = v184 + v183;
                                float v186;
                                v186 = v61[v185];
                                bool v187;
                                v187 = 0 <= v180;
                                bool v189;
                                if (v187){
                                    bool v188;
                                    v188 = v180 < 2;
                                    v189 = v188;
                                } else {
                                    v189 = false;
                                }
                                bool v190;
                                v190 = v189 == false;
                                if (v190){
                                    assert("The indices should be inside the range of the dimension." && v189);
                                } else {
                                }
                                bool v192;
                                v192 = 0 <= v178;
                                bool v194;
                                if (v192){
                                    bool v193;
                                    v193 = v178 < 2;
                                    v194 = v193;
                                } else {
                                    v194 = false;
                                }
                                bool v195;
                                v195 = v194 == false;
                                if (v195){
                                    assert("The indices should be inside the range of the dimension." && v194);
                                } else {
                                }
                                int v197;
                                v197 = v178 * 2;
                                int v198;
                                v198 = v180 + v197;
                                v174.x[v198] = wmma::__float_to_tf32(v186);
                                v180 += 1 ;
                            }
                            v178 += 1 ;
                        }
                        v170 += 1 ;
                    }
                    v168 += 1 ;
                }
                // Poping the loop unrolling to: 0
                v8.consumer_release();
                switch (v97.tag) {
                    case 0: { // None
                        break;
                    }
                    case 1: { // Some
                        int v199 = v97.case1.v0;
                        assert("Tensor range check" && 0 <= v199 && v199 < 64);
                        int v200;
                        v200 = 32 * v199;
                        int v201;
                        v201 = v200 + v105;
                        float * v202;
                        v202 = v1+v201;
                        __syncthreads();
                        // Pushing the loop unrolling to: 0
                        v8.producer_acquire();
                        int v204;
                        v204 = threadIdx.x;
                        bool v205;
                        v205 = 0 <= v204;
                        bool v206;
                        v206 = v205 == false;
                        if (v206){
                            assert("The index needs to be zero or positive." && v205);
                        } else {
                        }
                        int v208;
                        v208 = v204 % 8;
                        int v209;
                        v209 = v204 / 8;
                        bool v210;
                        v210 = v209 < 32;
                        bool v211;
                        v211 = v210 == false;
                        if (v211){
                            assert("The last element of the projection dimensions needs to be greater than the index remainder." && v210);
                        } else {
                        }
                        assert("Tensor range check" && 0 <= v209 && v209 < 32);
                        assert("Tensor range check" && 0 <= v208 && v208 < 8);
                        int v213;
                        v213 = 4 * v208;
                        int v214;
                        v214 = 36 * v209;
                        int v215;
                        v215 = v214 + v213;
                        int v216;
                        v216 = 2048 * v209;
                        int v217;
                        v217 = v216 + v213;
                        float * v218;
                        v218 = v12+v215;
                        float * v220;
                        v220 = v202+v217;
                        int v222;
                        v222 = 0;
                        #pragma unroll
                        while (while_method_0(v222)){
                            int v224;
                            v224 = 0;
                            #pragma unroll
                            while (while_method_6(v224)){
                                assert("Tensor range check" && 0 <= v222 && v222 < 2);
                                assert("Tensor range check" && 0 <= v224 && v224 < 1);
                                int v226;
                                v226 = 32 * v224;
                                int v227;
                                v227 = 1152 * v222;
                                int v228;
                                v228 = v227 + v226;
                                int v229;
                                v229 = 65536 * v222;
                                int v230;
                                v230 = v229 + v226;
                                constexpr int v231 = sizeof(float) * 4;
                                assert("Pointer alignment check" && (unsigned long long)(v220 + v230) % v231 == 0 && (unsigned long long)(v218 + v228) % v231 == 0);
                                cuda::memcpy_async(v218 + v228, v220 + v230, cuda::aligned_size_t<v231>(v231), v8);
                                v224 += 1 ;
                            }
                            v222 += 1 ;
                        }
                        v8.producer_commit();
                        // Poping the loop unrolling to: 0
                        break;
                    }
                    default: {
                        assert("Invalid tag." && false); __trap();
                    }
                }
                // Pushing the loop unrolling to: 0
                int v232;
                v232 = 0;
                #pragma unroll
                while (while_method_10(v232)){
                    int v234;
                    v234 = 0;
                    #pragma unroll
                    while (while_method_3(v234)){
                        wmma::fragment<wmma::matrix_a, 16, 16, 8, wmma::precision::tf32, wmma::row_major> & v236 = v166[0];
                        assert("Tensor range check" && 0 <= v232 && v232 < 8);
                        int v237;
                        v237 = 576 * v232;
                        assert("Tensor range check" && 0 <= v234 && v234 < 4);
                        int v238;
                        v238 = 8 * v234;
                        int v239;
                        v239 = v238 + v237;
                        int v240;
                        v240 = 0;
                        #pragma unroll
                        while (while_method_0(v240)){
                            int v242;
                            v242 = 0;
                            #pragma unroll
                            while (while_method_0(v242)){
                                assert("Tensor range check" && 0 <= v240 && v240 < 2);
                                assert("Tensor range check" && 0 <= v242 && v242 < 2);
                                int v244;
                                v244 = 288 * v242;
                                int v245;
                                v245 = v244 + v239;
                                int v246;
                                v246 = 4 * v240;
                                int v247;
                                v247 = v246 + v245;
                                float v248;
                                v248 = v45[v247];
                                bool v249;
                                v249 = 0 <= v242;
                                bool v251;
                                if (v249){
                                    bool v250;
                                    v250 = v242 < 2;
                                    v251 = v250;
                                } else {
                                    v251 = false;
                                }
                                bool v252;
                                v252 = v251 == false;
                                if (v252){
                                    assert("The indices should be inside the range of the dimension." && v251);
                                } else {
                                }
                                bool v254;
                                v254 = 0 <= v240;
                                bool v256;
                                if (v254){
                                    bool v255;
                                    v255 = v240 < 2;
                                    v256 = v255;
                                } else {
                                    v256 = false;
                                }
                                bool v257;
                                v257 = v256 == false;
                                if (v257){
                                    assert("The indices should be inside the range of the dimension." && v256);
                                } else {
                                }
                                int v259;
                                v259 = v240 * 2;
                                int v260;
                                v260 = v242 + v259;
                                v236.x[v260] = wmma::__float_to_tf32(v248);
                                v242 += 1 ;
                            }
                            v240 += 1 ;
                        }
                        int v261;
                        v261 = 0;
                        #pragma unroll
                        while (while_method_6(v261)){
                            assert("Tensor range check" && 0 <= v232 && v232 < 8);
                            assert("Tensor range check" && 0 <= v261 && v261 < 1);
                            int v263;
                            v263 = v232 + v261;
                            wmma::fragment<wmma::accumulator, 16, 16, 8, float> & v264 = v63[v263];
                            assert("Tensor range check" && 0 <= v261 && v261 < 1);
                            assert("Tensor range check" && 0 <= v234 && v234 < 4);
                            int v265;
                            v265 = 4 * v261;
                            int v266;
                            v266 = v265 + v234;
                            wmma::fragment<wmma::matrix_b, 16, 16, 8, wmma::precision::tf32, wmma::col_major> & v267 = v167[v266];
                            wmma::mma_sync(v264, v236, v267, v264);
                            v261 += 1 ;
                        }
                        v234 += 1 ;
                    }
                    v232 += 1 ;
                }
                // Poping the loop unrolling to: 0
                __syncthreads();
                v80 = v82;
            }
            // Pushing the loop unrolling to: 0
            int v268;
            v268 = 0;
            #pragma unroll
            while (while_method_10(v268)){
                int v270;
                v270 = 0;
                #pragma unroll
                while (while_method_6(v270)){
                    assert("Tensor range check" && 0 <= v268 && v268 < 8);
                    assert("Tensor range check" && 0 <= v270 && v270 < 1);
                    int v272;
                    v272 = v268 + v270;
                    wmma::fragment<wmma::accumulator, 16, 16, 8, float> & v273 = v63[v272];
                    assert("Tensor range check" && 0 <= v268 && v268 < 8);
                    assert("Tensor range check" && 0 <= v270 && v270 < 1);
                    int v274;
                    v274 = 16 * v270;
                    int v275;
                    v275 = 1152 * v268;
                    int v276;
                    v276 = v275 + v274;
                    float * v277;
                    v277 = v29+v276;
                    wmma::store_matrix_sync(v277, v273, 72, wmma::mem_row_major);
                    v270 += 1 ;
                }
                v268 += 1 ;
            }
            // Poping the loop unrolling to: 0
            __syncthreads();
            // Pushing the loop unrolling to: 0
            int v279;
            v279 = threadIdx.x;
            bool v280;
            v280 = 0 <= v279;
            bool v281;
            v281 = v280 == false;
            if (v281){
                assert("The index needs to be zero or positive." && v280);
            } else {
            }
            int v283;
            v283 = v279 % 16;
            int v284;
            v284 = v279 / 16;
            bool v285;
            v285 = v284 < 16;
            bool v286;
            v286 = v285 == false;
            if (v286){
                assert("The last element of the projection dimensions needs to be greater than the index remainder." && v285);
            } else {
            }
            assert("Tensor range check" && 0 <= v284 && v284 < 16);
            assert("Tensor range check" && 0 <= v283 && v283 < 16);
            int v288;
            v288 = 4 * v283;
            int v289;
            v289 = 64 * v284;
            int v290;
            v290 = v289 + v288;
            int v291;
            v291 = 72 * v284;
            int v292;
            v292 = v291 + v288;
            float * v293;
            v293 = v72+v290;
            float * v295;
            v295 = v14+v292;
            int v297;
            v297 = 0;
            #pragma unroll
            while (while_method_12(v297)){
                int v299;
                v299 = 0;
                #pragma unroll
                while (while_method_6(v299)){
                    assert("Tensor range check" && 0 <= v297 && v297 < 16);
                    assert("Tensor range check" && 0 <= v299 && v299 < 1);
                    int v301;
                    v301 = 64 * v299;
                    int v302;
                    v302 = 1024 * v297;
                    int v303;
                    v303 = v302 + v301;
                    int v304;
                    v304 = 1152 * v297;
                    int v305;
                    v305 = v304 + v301;
                    int4* v306;
                    v306 = reinterpret_cast<int4*>(v295 + v305);
                    int4* v307;
                    v307 = reinterpret_cast<int4*>(v293 + v303);
                    assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v306) % 16 == 0 && reinterpret_cast<unsigned long long>(v307) % 16 == 0);
                    *v307 = *v306;
                    v299 += 1 ;
                }
                v297 += 1 ;
            }
            // Poping the loop unrolling to: 0
            __syncthreads();
            v66 += 1 ;
        }
        v64 += 1 ;
    }
    return ;
}
__device__ void block_row_map_46(float * v0, int v1, float * v2){
    int v3;
    v3 = blockIdx.x;
    assert("Tensor range check" && 0 <= v3 && v3 < 24);
    int v4;
    v4 = 16384 * v3;
    int v5;
    v5 = blockIdx.x;
    assert("Tensor range check" && 0 <= v5 && v5 < 24);
    int v6;
    v6 = 16384 * v5;
    int v7;
    v7 = v6 + v1;
    int v8;
    v8 = threadIdx.x;
    bool v9;
    v9 = 0 <= v8;
    bool v10;
    v10 = v9 == false;
    if (v10){
        assert("The index needs to be zero or positive." && v9);
    } else {
    }
    int v12;
    v12 = v8 % 16;
    int v13;
    v13 = v8 / 16;
    bool v14;
    v14 = v13 < 16;
    bool v15;
    v15 = v14 == false;
    if (v15){
        assert("The last element of the projection dimensions needs to be greater than the index remainder." && v14);
    } else {
    }
    assert("Tensor range check" && 0 <= v13 && v13 < 16);
    assert("Tensor range check" && 0 <= v12 && v12 < 16);
    int v17;
    v17 = 4 * v12;
    int v18;
    v18 = v17 + v4;
    int v19;
    v19 = 64 * v13;
    int v20;
    v20 = v19 + v18;
    assert("Tensor range check" && 0 <= v13 && v13 < 16);
    assert("Tensor range check" && 0 <= v12 && v12 < 16);
    int v21;
    v21 = v17 + v7;
    int v22;
    v22 = v19 + v21;
    int v23;
    v23 = 0;
    while (while_method_12(v23)){
        assert("Tensor range check" && 0 <= v23 && v23 < 16);
        int v25;
        v25 = 1024 * v23;
        int v26;
        v26 = v25 + v20;
        float v27[4];
        int v28[4];
        int v29;
        v29 = 0;
        while (while_method_6(v29)){
            assert("Tensor range check" && 0 <= v29 && v29 < 1);
            int v31;
            v31 = 4 * v29;
            assert("Tensor range check" && 0 <= v29 && v29 < 1);
            int v32;
            v32 = 64 * v29;
            int v33;
            v33 = v32 + v26;
            int4* v34;
            v34 = reinterpret_cast<int4*>(v2 + v33);
            int4* v35;
            v35 = reinterpret_cast<int4*>(v27 + v31);
            assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v34) % 16 == 0 && reinterpret_cast<unsigned long long>(v35) % 16 == 0);
            *v35 = *v34;
            v29 += 1 ;
        }
        int v36;
        v36 = 0;
        while (while_method_6(v36)){
            int v38;
            v38 = 0;
            while (while_method_3(v38)){
                bool v40;
                v40 = 0 <= v38;
                bool v42;
                if (v40){
                    bool v41;
                    v41 = v38 < 4;
                    v42 = v41;
                } else {
                    v42 = false;
                }
                bool v43;
                v43 = v42 == false;
                if (v43){
                    assert("The indices should be inside the range of the dimension." && v42);
                } else {
                }
                bool v45;
                v45 = 0 <= v12;
                bool v47;
                if (v45){
                    bool v46;
                    v46 = v12 < 16;
                    v47 = v46;
                } else {
                    v47 = false;
                }
                bool v48;
                v48 = v47 == false;
                if (v48){
                    assert("The indices should be inside the range of the dimension." && v47);
                } else {
                }
                int v50;
                v50 = v12 * 4;
                int v51;
                v51 = v38 + v50;
                bool v52;
                v52 = 0 <= v36;
                bool v54;
                if (v52){
                    bool v53;
                    v53 = v36 < 1;
                    v54 = v53;
                } else {
                    v54 = false;
                }
                bool v55;
                v55 = v54 == false;
                if (v55){
                    assert("The indices should be inside the range of the dimension." && v54);
                } else {
                }
                int v57;
                v57 = v36 * 64;
                int v58;
                v58 = v51 + v57;
                assert("Tensor range check" && 0 <= v36 && v36 < 1);
                assert("Tensor range check" && 0 <= v38 && v38 < 4);
                int v59;
                v59 = 4 * v36;
                int v60;
                v60 = v59 + v38;
                v28[v60] = v58;
                v38 += 1 ;
            }
            v36 += 1 ;
        }
        bool v61;
        v61 = 0 <= v13;
        bool v62;
        v62 = v61 && v14;
        bool v63;
        v63 = v62 == false;
        if (v63){
            assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v62);
        } else {
        }
        bool v65;
        v65 = 0 <= v23;
        bool v67;
        if (v65){
            bool v66;
            v66 = v23 < 16;
            v67 = v66;
        } else {
            v67 = false;
        }
        bool v68;
        v68 = v67 == false;
        if (v68){
            assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v67);
        } else {
        }
        int v70;
        v70 = v23 * 16;
        int v71;
        v71 = v70 + v13;
        bool v72[4];
        int v73;
        v73 = 0;
        while (while_method_6(v73)){
            int v75;
            v75 = 0;
            while (while_method_3(v75)){
                assert("Tensor range check" && 0 <= v73 && v73 < 1);
                assert("Tensor range check" && 0 <= v75 && v75 < 4);
                int v77;
                v77 = 4 * v73;
                int v78;
                v78 = v77 + v75;
                float v79;
                v79 = v27[v78];
                int v80;
                v80 = v28[v78];
                bool v81;
                v81 = v80 < 3;
                assert("Tensor range check" && 0 <= v73 && v73 < 1);
                assert("Tensor range check" && 0 <= v75 && v75 < 4);
                v72[v78] = v81;
                v75 += 1 ;
            }
            v73 += 1 ;
        }
        float v82[4];
        int v83;
        v83 = 0;
        while (while_method_6(v83)){
            int v85;
            v85 = 0;
            while (while_method_3(v85)){
                assert("Tensor range check" && 0 <= v83 && v83 < 1);
                assert("Tensor range check" && 0 <= v85 && v85 < 4);
                int v87;
                v87 = 4 * v83;
                int v88;
                v88 = v87 + v85;
                float v89;
                v89 = v27[v88];
                bool v90;
                v90 = v72[v88];
                bool v91;
                v91 = isnan(v89);
                bool v92;
                v92 = v91 == false;
                bool v93;
                v93 = v92 == false;
                if (v93){
                    assert("What comes into regret matching must not be a nan." && v92);
                } else {
                }
                float v97;
                if (v90){
                    bool v95;
                    v95 = 0.0f >= v89;
                    if (v95){
                        v97 = 0.0f;
                    } else {
                        v97 = v89;
                    }
                } else {
                    v97 = 0.0f;
                }
                assert("Tensor range check" && 0 <= v83 && v83 < 1);
                assert("Tensor range check" && 0 <= v85 && v85 < 4);
                v82[v88] = v97;
                v85 += 1 ;
            }
            v83 += 1 ;
        }
        float v98;
        v98 = 0.0f;
        int v99;
        v99 = 0;
        while (while_method_6(v99)){
            int v101;
            v101 = 0;
            while (while_method_3(v101)){
                assert("Tensor range check" && 0 <= v99 && v99 < 1);
                assert("Tensor range check" && 0 <= v101 && v101 < 4);
                int v103;
                v103 = 4 * v99;
                int v104;
                v104 = v103 + v101;
                float v105;
                v105 = v82[v104];
                float v106;
                v106 = v98 + v105;
                v98 = v106;
                v101 += 1 ;
            }
            v99 += 1 ;
        }
        auto v107 = cooperative_groups::coalesced_threads();
        int v108;
        v108 = threadIdx.x;
        int v109;
        v109 = v108 / 16;
        auto v110 = cooperative_groups::labeled_partition(v107,v109);
        Closure0 v111{};
        float v112;
        v112 = cooperative_groups::reduce(v110, v98, v111);
        int v113[4];
        int v114;
        v114 = 0;
        while (while_method_6(v114)){
            int v116;
            v116 = 0;
            while (while_method_3(v116)){
                assert("Tensor range check" && 0 <= v114 && v114 < 1);
                assert("Tensor range check" && 0 <= v116 && v116 < 4);
                int v118;
                v118 = 4 * v114;
                int v119;
                v119 = v118 + v116;
                bool v120;
                v120 = v72[v119];
                int v121;
                if (v120){
                    v121 = 1;
                } else {
                    v121 = 0;
                }
                assert("Tensor range check" && 0 <= v114 && v114 < 1);
                assert("Tensor range check" && 0 <= v116 && v116 < 4);
                v113[v119] = v121;
                v116 += 1 ;
            }
            v114 += 1 ;
        }
        int v122;
        v122 = 0;
        int v123;
        v123 = 0;
        while (while_method_6(v123)){
            int v125;
            v125 = 0;
            while (while_method_3(v125)){
                assert("Tensor range check" && 0 <= v123 && v123 < 1);
                assert("Tensor range check" && 0 <= v125 && v125 < 4);
                int v127;
                v127 = 4 * v123;
                int v128;
                v128 = v127 + v125;
                int v129;
                v129 = v113[v128];
                int v130;
                v130 = v122 + v129;
                v122 = v130;
                v125 += 1 ;
            }
            v123 += 1 ;
        }
        auto v131 = cooperative_groups::coalesced_threads();
        int v132;
        v132 = threadIdx.x;
        int v133;
        v133 = v132 / 16;
        auto v134 = cooperative_groups::labeled_partition(v131,v133);
        Closure1 v135{};
        int v136;
        v136 = cooperative_groups::reduce(v134, v122, v135);
        float v137;
        v137 = (float)v136;
        float v138;
        v138 = 1.0f / v137;
        bool v139;
        v139 = isnan(v138);
        bool v140;
        v140 = v139 == false;
        bool v141;
        v141 = v140 == false;
        if (v141){
            assert("Inverse length in regret matching must not be nan." && v140);
        } else {
        }
        float v143[4];
        int v144;
        v144 = 0;
        while (while_method_6(v144)){
            int v146;
            v146 = 0;
            while (while_method_3(v146)){
                assert("Tensor range check" && 0 <= v144 && v144 < 1);
                assert("Tensor range check" && 0 <= v146 && v146 < 4);
                int v148;
                v148 = 4 * v144;
                int v149;
                v149 = v148 + v146;
                float v150;
                v150 = v82[v149];
                bool v151;
                v151 = v72[v149];
                bool v152;
                v152 = v151 == false;
                float v157;
                if (v152){
                    v157 = 0.0f;
                } else {
                    bool v153;
                    v153 = v112 == 0.0f;
                    bool v154;
                    v154 = v153 != true;
                    if (v154){
                        float v155;
                        v155 = v150 / v112;
                        v157 = v155;
                    } else {
                        v157 = v138;
                    }
                }
                bool v158;
                v158 = isnan(v157);
                bool v159;
                v159 = v158 == false;
                bool v160;
                v160 = v159 == false;
                if (v160){
                    assert("What comes out of regret matching must not be a nan." && v159);
                } else {
                }
                bool v162;
                v162 = v157 >= 0.0f;
                bool v163;
                v163 = v162 == false;
                if (v163){
                    assert("What comes out of regret matching must be >= 0." && v162);
                } else {
                }
                bool v165;
                v165 = v157 <= 1.0f;
                bool v166;
                v166 = v165 == false;
                if (v166){
                    assert("What comes out of regret matching must be <= 1." && v165);
                } else {
                }
                assert("Tensor range check" && 0 <= v144 && v144 < 1);
                assert("Tensor range check" && 0 <= v146 && v146 < 4);
                v143[v149] = v157;
                v146 += 1 ;
            }
            v144 += 1 ;
        }
        assert("Tensor range check" && 0 <= v23 && v23 < 16);
        int v168;
        v168 = v25 + v22;
        int v169;
        v169 = 0;
        while (while_method_6(v169)){
            assert("Tensor range check" && 0 <= v169 && v169 < 1);
            int v171;
            v171 = 64 * v169;
            int v172;
            v172 = v171 + v168;
            assert("Tensor range check" && 0 <= v169 && v169 < 1);
            int v173;
            v173 = 4 * v169;
            int4* v174;
            v174 = reinterpret_cast<int4*>(v143 + v173);
            int4* v175;
            v175 = reinterpret_cast<int4*>(v0 + v172);
            assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v174) % 16 == 0 && reinterpret_cast<unsigned long long>(v175) % 16 == 0);
            *v175 = *v174;
            v169 += 1 ;
        }
        v23 += 1 ;
    }
    __syncthreads();
    return ;
}
__device__ inline bool while_method_13(int v0){
    bool v1;
    v1 = v0 < 6;
    return v1;
}
__device__ inline bool while_method_14(static_array<float,6> v0, int v1){
    bool v2;
    v2 = v1 < 6;
    return v2;
}
__device__ inline bool while_method_15(int v0, int v1){
    bool v2;
    v2 = v1 > v0;
    return v2;
}
__device__ int loop_50(static_array<float,6> v0, float v1, int v2){
    bool v3;
    v3 = v2 < 6;
    if (v3){
        bool v4;
        v4 = 0 <= v2;
        bool v5;
        v5 = v4 && v3;
        bool v6;
        v6 = v5 == false;
        if (v6){
            assert("Index must be in range." && v5);
        } else {
        }
        float v8;
        v8 = v0[v2];
        bool v10;
        v10 = v1 <= v8;
        if (v10){
            return v2;
        } else {
            int v11;
            v11 = v2 + 1;
            return loop_50(v0, v1, v11);
        }
    } else {
        return 5;
    }
}
__device__ int pick_discrete__49(static_array<float,6> v0, float v1){
    static_array<float,6> v2;
    int v4;
    v4 = 0;
    while (while_method_13(v4)){
        bool v6;
        v6 = 0 <= v4;
        bool v8;
        if (v6){
            bool v7;
            v7 = v4 < 6;
            v8 = v7;
        } else {
            v8 = false;
        }
        bool v9;
        v9 = v8 == false;
        if (v9){
            assert("Index must be in range." && v8);
        } else {
        }
        float v11;
        v11 = v0[v4];
        v2[v4] = v11;
        v4 += 1 ;
    }
    int v13;
    v13 = 1;
    while (while_method_14(v2, v13)){
        int v15;
        v15 = 6;
        while (while_method_15(v13, v15)){
            v15 -= 1 ;
            int v17;
            v17 = v15 - v13;
            bool v18;
            v18 = 0 <= v17;
            bool v20;
            if (v18){
                bool v19;
                v19 = v17 < 6;
                v20 = v19;
            } else {
                v20 = false;
            }
            bool v21;
            v21 = v20 == false;
            if (v21){
                assert("Index must be in range." && v20);
            } else {
            }
            float v23;
            v23 = v2[v17];
            bool v25;
            v25 = 0 <= v15;
            bool v27;
            if (v25){
                bool v26;
                v26 = v15 < 6;
                v27 = v26;
            } else {
                v27 = false;
            }
            bool v28;
            v28 = v27 == false;
            if (v28){
                assert("Index must be in range." && v27);
            } else {
            }
            float v30;
            v30 = v2[v15];
            float v32;
            v32 = v23 + v30;
            v2[v15] = v32;
        }
        int v33;
        v33 = v13 * 2;
        v13 = v33;
    }
    float v34;
    v34 = v2[5];
    float v36;
    v36 = v1 * v34;
    int v37;
    v37 = 0;
    return loop_50(v2, v36, v37);
}
__device__ int sample_discrete__48(static_array<float,6> v0, curandStatePhilox4_32_10_t & v1){
    float v2;
    v2 = curand_uniform(&v1);
    return pick_discrete__49(v0, v2);
}
__device__ Union1 sample_discrete_47(static_array<Tuple17,6> v0, curandStatePhilox4_32_10_t & v1){
    static_array<float,6> v2;
    int v4;
    v4 = 0;
    while (while_method_13(v4)){
        bool v6;
        v6 = 0 <= v4;
        bool v8;
        if (v6){
            bool v7;
            v7 = v4 < 6;
            v8 = v7;
        } else {
            v8 = false;
        }
        bool v9;
        v9 = v8 == false;
        if (v9){
            assert("Index must be in range." && v8);
        } else {
        }
        Union1 v11; float v12;
        Tuple17 tmp47 = v0[v4];
        v11 = tmp47.v0; v12 = tmp47.v1;
        v2[v4] = v12;
        v4 += 1 ;
    }
    int v15;
    v15 = sample_discrete__48(v2, v1);
    bool v16;
    v16 = 0 <= v15;
    bool v18;
    if (v16){
        bool v17;
        v17 = v15 < 6;
        v18 = v17;
    } else {
        v18 = false;
    }
    bool v19;
    v19 = v18 == false;
    if (v19){
        assert("Index must be in range." && v18);
    } else {
    }
    Union1 v21; float v22;
    Tuple17 tmp48 = v0[v15];
    v21 = tmp48.v0; v22 = tmp48.v1;
    return v21;
}
__device__ inline bool while_method_16(int v0){
    bool v1;
    v1 = v0 < 7;
    return v1;
}
__device__ inline bool while_method_17(static_array<unsigned char,7> v0, bool v1, int v2){
    bool v3;
    v3 = v2 < 7;
    return v3;
}
__device__ inline bool while_method_18(static_array<unsigned char,7> v0, int v1){
    bool v2;
    v2 = v1 < 7;
    return v2;
}
__device__ inline bool while_method_19(int v0, int v1, int v2, int v3){
    bool v4;
    v4 = v3 < v0;
    return v4;
}
__device__ Tuple0 score_51(static_array<unsigned char,7> v0){
    static_array<unsigned char,7> v1;
    int v3;
    v3 = 0;
    while (while_method_16(v3)){
        bool v5;
        v5 = 0 <= v3;
        bool v7;
        if (v5){
            bool v6;
            v6 = v3 < 7;
            v7 = v6;
        } else {
            v7 = false;
        }
        bool v8;
        v8 = v7 == false;
        if (v8){
            assert("Index must be in range." && v7);
        } else {
        }
        unsigned char v10;
        v10 = v0[v3];
        v1[v3] = v10;
        v3 += 1 ;
    }
    static_array<unsigned char,7> v12;
    bool v14; int v15;
    Tuple18 tmp55 = Tuple18{true, 1};
    v14 = tmp55.v0; v15 = tmp55.v1;
    while (while_method_17(v1, v14, v15)){
        int v17;
        v17 = 0;
        while (while_method_18(v1, v17)){
            int v19;
            v19 = v17 + v15;
            bool v20;
            v20 = v19 < 7;
            int v21;
            if (v20){
                v21 = v19;
            } else {
                v21 = 7;
            }
            int v22;
            v22 = v15 * 2;
            int v23;
            v23 = v17 + v22;
            bool v24;
            v24 = v23 < 7;
            int v25;
            if (v24){
                v25 = v23;
            } else {
                v25 = 7;
            }
            int v26; int v27; int v28;
            Tuple19 tmp56 = Tuple19{v17, v21, v17};
            v26 = tmp56.v0; v27 = tmp56.v1; v28 = tmp56.v2;
            while (while_method_19(v25, v26, v27, v28)){
                bool v30;
                v30 = v26 < v21;
                bool v32;
                if (v30){
                    bool v31;
                    v31 = v27 < v25;
                    v32 = v31;
                } else {
                    v32 = false;
                }
                unsigned char v122; int v123; int v124;
                if (v32){
                    unsigned char v47;
                    if (v14){
                        bool v33;
                        v33 = 0 <= v26;
                        bool v35;
                        if (v33){
                            bool v34;
                            v34 = v26 < 7;
                            v35 = v34;
                        } else {
                            v35 = false;
                        }
                        bool v36;
                        v36 = v35 == false;
                        if (v36){
                            assert("Index must be in range." && v35);
                        } else {
                        }
                        unsigned char v38;
                        v38 = v1[v26];
                        v47 = v38;
                    } else {
                        bool v40;
                        v40 = 0 <= v26;
                        bool v42;
                        if (v40){
                            bool v41;
                            v41 = v26 < 7;
                            v42 = v41;
                        } else {
                            v42 = false;
                        }
                        bool v43;
                        v43 = v42 == false;
                        if (v43){
                            assert("Index must be in range." && v42);
                        } else {
                        }
                        unsigned char v45;
                        v45 = v12[v26];
                        v47 = v45;
                    }
                    unsigned char v62;
                    if (v14){
                        bool v48;
                        v48 = 0 <= v27;
                        bool v50;
                        if (v48){
                            bool v49;
                            v49 = v27 < 7;
                            v50 = v49;
                        } else {
                            v50 = false;
                        }
                        bool v51;
                        v51 = v50 == false;
                        if (v51){
                            assert("Index must be in range." && v50);
                        } else {
                        }
                        unsigned char v53;
                        v53 = v1[v27];
                        v62 = v53;
                    } else {
                        bool v55;
                        v55 = 0 <= v27;
                        bool v57;
                        if (v55){
                            bool v56;
                            v56 = v27 < 7;
                            v57 = v56;
                        } else {
                            v57 = false;
                        }
                        bool v58;
                        v58 = v57 == false;
                        if (v58){
                            assert("Index must be in range." && v57);
                        } else {
                        }
                        unsigned char v60;
                        v60 = v12[v27];
                        v62 = v60;
                    }
                    unsigned char v63;
                    v63 = v62 / 4u;
                    unsigned char v64;
                    v64 = v47 / 4u;
                    bool v65;
                    v65 = v63 < v64;
                    Union11 v71;
                    if (v65){
                        v71 = Union11{Union11_2{}};
                    } else {
                        bool v67;
                        v67 = v63 > v64;
                        if (v67){
                            v71 = Union11{Union11_1{}};
                        } else {
                            v71 = Union11{Union11_0{}};
                        }
                    }
                    Union11 v81;
                    switch (v71.tag) {
                        case 0: { // Eq
                            unsigned char v72;
                            v72 = v47 % 4u;
                            unsigned char v73;
                            v73 = v62 % 4u;
                            bool v74;
                            v74 = v72 < v73;
                            if (v74){
                                v81 = Union11{Union11_2{}};
                            } else {
                                bool v76;
                                v76 = v72 > v73;
                                if (v76){
                                    v81 = Union11{Union11_1{}};
                                } else {
                                    v81 = Union11{Union11_0{}};
                                }
                            }
                            break;
                        }
                        default: {
                            v81 = v71;
                        }
                    }
                    switch (v81.tag) {
                        case 1: { // Gt
                            int v82;
                            v82 = v27 + 1;
                            v122 = v62; v123 = v26; v124 = v82;
                            break;
                        }
                        default: {
                            int v83;
                            v83 = v26 + 1;
                            v122 = v47; v123 = v83; v124 = v27;
                        }
                    }
                } else {
                    if (v30){
                        unsigned char v101;
                        if (v14){
                            bool v87;
                            v87 = 0 <= v26;
                            bool v89;
                            if (v87){
                                bool v88;
                                v88 = v26 < 7;
                                v89 = v88;
                            } else {
                                v89 = false;
                            }
                            bool v90;
                            v90 = v89 == false;
                            if (v90){
                                assert("Index must be in range." && v89);
                            } else {
                            }
                            unsigned char v92;
                            v92 = v1[v26];
                            v101 = v92;
                        } else {
                            bool v94;
                            v94 = 0 <= v26;
                            bool v96;
                            if (v94){
                                bool v95;
                                v95 = v26 < 7;
                                v96 = v95;
                            } else {
                                v96 = false;
                            }
                            bool v97;
                            v97 = v96 == false;
                            if (v97){
                                assert("Index must be in range." && v96);
                            } else {
                            }
                            unsigned char v99;
                            v99 = v12[v26];
                            v101 = v99;
                        }
                        int v102;
                        v102 = v26 + 1;
                        v122 = v101; v123 = v102; v124 = v27;
                    } else {
                        unsigned char v117;
                        if (v14){
                            bool v103;
                            v103 = 0 <= v27;
                            bool v105;
                            if (v103){
                                bool v104;
                                v104 = v27 < 7;
                                v105 = v104;
                            } else {
                                v105 = false;
                            }
                            bool v106;
                            v106 = v105 == false;
                            if (v106){
                                assert("Index must be in range." && v105);
                            } else {
                            }
                            unsigned char v108;
                            v108 = v1[v27];
                            v117 = v108;
                        } else {
                            bool v110;
                            v110 = 0 <= v27;
                            bool v112;
                            if (v110){
                                bool v111;
                                v111 = v27 < 7;
                                v112 = v111;
                            } else {
                                v112 = false;
                            }
                            bool v113;
                            v113 = v112 == false;
                            if (v113){
                                assert("Index must be in range." && v112);
                            } else {
                            }
                            unsigned char v115;
                            v115 = v12[v27];
                            v117 = v115;
                        }
                        int v118;
                        v118 = v27 + 1;
                        v122 = v117; v123 = v26; v124 = v118;
                    }
                }
                if (v14){
                    v12[v28] = v122;
                } else {
                    v1[v28] = v122;
                }
                int v125;
                v125 = v28 + 1;
                v26 = v123;
                v27 = v124;
                v28 = v125;
            }
            v17 = v23;
        }
        bool v126;
        v126 = v14 == false;
        int v127;
        v127 = v15 * 2;
        v14 = v126;
        v15 = v127;
    }
    bool v128;
    v128 = v14 == false;
    static_array<unsigned char,7> v129;
    if (v128){
        v129 = v12;
    } else {
        v129 = v1;
    }
    static_array<unsigned char,5> v130;
    int v132; int v133; unsigned char v134;
    Tuple20 tmp57 = Tuple20{0, 0, 12u};
    v132 = tmp57.v0; v133 = tmp57.v1; v134 = tmp57.v2;
    while (while_method_16(v132)){
        bool v136;
        v136 = 0 <= v132;
        bool v138;
        if (v136){
            bool v137;
            v137 = v132 < 7;
            v138 = v137;
        } else {
            v138 = false;
        }
        bool v139;
        v139 = v138 == false;
        if (v139){
            assert("Index must be in range." && v138);
        } else {
        }
        unsigned char v141;
        v141 = v129[v132];
        bool v143;
        v143 = v133 < 5;
        int v155; unsigned char v156;
        if (v143){
            unsigned char v144;
            v144 = v141 % 4u;
            bool v145;
            v145 = 0u == v144;
            if (v145){
                unsigned char v146;
                v146 = v141 / 4u;
                bool v147;
                v147 = v134 == v146;
                int v148;
                if (v147){
                    v148 = v133;
                } else {
                    v148 = 0;
                }
                v130[v148] = v141;
                int v149;
                v149 = v148 + 1;
                unsigned char v150;
                v150 = v146 - 1u;
                v155 = v149; v156 = v150;
            } else {
                v155 = v133; v156 = v134;
            }
        } else {
            break;
        }
        v133 = v155;
        v134 = v156;
        v132 += 1 ;
    }
    bool v157;
    v157 = v133 == 4;
    bool v196;
    if (v157){
        unsigned char v158;
        v158 = v134 + 1u;
        bool v159;
        v159 = v158 == 0u;
        if (v159){
            unsigned char v160;
            v160 = v129[0];
            unsigned char v162;
            v162 = v160 % 4u;
            bool v163;
            v163 = 0u == v162;
            bool v167;
            if (v163){
                unsigned char v164;
                v164 = v160 / 4u;
                bool v165;
                v165 = v164 == 12u;
                if (v165){
                    v130[4] = v160;
                    v167 = true;
                } else {
                    v167 = false;
                }
            } else {
                v167 = false;
            }
            if (v167){
                v196 = true;
            } else {
                unsigned char v168;
                v168 = v129[1];
                unsigned char v170;
                v170 = v168 % 4u;
                bool v171;
                v171 = 0u == v170;
                bool v175;
                if (v171){
                    unsigned char v172;
                    v172 = v168 / 4u;
                    bool v173;
                    v173 = v172 == 12u;
                    if (v173){
                        v130[4] = v168;
                        v175 = true;
                    } else {
                        v175 = false;
                    }
                } else {
                    v175 = false;
                }
                if (v175){
                    v196 = true;
                } else {
                    unsigned char v176;
                    v176 = v129[2];
                    unsigned char v178;
                    v178 = v176 % 4u;
                    bool v179;
                    v179 = 0u == v178;
                    bool v183;
                    if (v179){
                        unsigned char v180;
                        v180 = v176 / 4u;
                        bool v181;
                        v181 = v180 == 12u;
                        if (v181){
                            v130[4] = v176;
                            v183 = true;
                        } else {
                            v183 = false;
                        }
                    } else {
                        v183 = false;
                    }
                    if (v183){
                        v196 = true;
                    } else {
                        unsigned char v184;
                        v184 = v129[3];
                        unsigned char v186;
                        v186 = v184 % 4u;
                        bool v187;
                        v187 = 0u == v186;
                        if (v187){
                            unsigned char v188;
                            v188 = v184 / 4u;
                            bool v189;
                            v189 = v188 == 12u;
                            if (v189){
                                v130[4] = v184;
                                v196 = true;
                            } else {
                                v196 = false;
                            }
                        } else {
                            v196 = false;
                        }
                    }
                }
            }
        } else {
            v196 = false;
        }
    } else {
        v196 = false;
    }
    Union12 v202;
    if (v196){
        v202 = Union12{Union12_1{v130}};
    } else {
        bool v198;
        v198 = v133 == 5;
        if (v198){
            v202 = Union12{Union12_1{v130}};
        } else {
            v202 = Union12{Union12_0{}};
        }
    }
    static_array<unsigned char,5> v203;
    int v205; int v206; unsigned char v207;
    Tuple20 tmp58 = Tuple20{0, 0, 12u};
    v205 = tmp58.v0; v206 = tmp58.v1; v207 = tmp58.v2;
    while (while_method_16(v205)){
        bool v209;
        v209 = 0 <= v205;
        bool v211;
        if (v209){
            bool v210;
            v210 = v205 < 7;
            v211 = v210;
        } else {
            v211 = false;
        }
        bool v212;
        v212 = v211 == false;
        if (v212){
            assert("Index must be in range." && v211);
        } else {
        }
        unsigned char v214;
        v214 = v129[v205];
        bool v216;
        v216 = v206 < 5;
        int v228; unsigned char v229;
        if (v216){
            unsigned char v217;
            v217 = v214 % 4u;
            bool v218;
            v218 = 1u == v217;
            if (v218){
                unsigned char v219;
                v219 = v214 / 4u;
                bool v220;
                v220 = v207 == v219;
                int v221;
                if (v220){
                    v221 = v206;
                } else {
                    v221 = 0;
                }
                v203[v221] = v214;
                int v222;
                v222 = v221 + 1;
                unsigned char v223;
                v223 = v219 - 1u;
                v228 = v222; v229 = v223;
            } else {
                v228 = v206; v229 = v207;
            }
        } else {
            break;
        }
        v206 = v228;
        v207 = v229;
        v205 += 1 ;
    }
    bool v230;
    v230 = v206 == 4;
    bool v269;
    if (v230){
        unsigned char v231;
        v231 = v207 + 1u;
        bool v232;
        v232 = v231 == 0u;
        if (v232){
            unsigned char v233;
            v233 = v129[0];
            unsigned char v235;
            v235 = v233 % 4u;
            bool v236;
            v236 = 1u == v235;
            bool v240;
            if (v236){
                unsigned char v237;
                v237 = v233 / 4u;
                bool v238;
                v238 = v237 == 12u;
                if (v238){
                    v203[4] = v233;
                    v240 = true;
                } else {
                    v240 = false;
                }
            } else {
                v240 = false;
            }
            if (v240){
                v269 = true;
            } else {
                unsigned char v241;
                v241 = v129[1];
                unsigned char v243;
                v243 = v241 % 4u;
                bool v244;
                v244 = 1u == v243;
                bool v248;
                if (v244){
                    unsigned char v245;
                    v245 = v241 / 4u;
                    bool v246;
                    v246 = v245 == 12u;
                    if (v246){
                        v203[4] = v241;
                        v248 = true;
                    } else {
                        v248 = false;
                    }
                } else {
                    v248 = false;
                }
                if (v248){
                    v269 = true;
                } else {
                    unsigned char v249;
                    v249 = v129[2];
                    unsigned char v251;
                    v251 = v249 % 4u;
                    bool v252;
                    v252 = 1u == v251;
                    bool v256;
                    if (v252){
                        unsigned char v253;
                        v253 = v249 / 4u;
                        bool v254;
                        v254 = v253 == 12u;
                        if (v254){
                            v203[4] = v249;
                            v256 = true;
                        } else {
                            v256 = false;
                        }
                    } else {
                        v256 = false;
                    }
                    if (v256){
                        v269 = true;
                    } else {
                        unsigned char v257;
                        v257 = v129[3];
                        unsigned char v259;
                        v259 = v257 % 4u;
                        bool v260;
                        v260 = 1u == v259;
                        if (v260){
                            unsigned char v261;
                            v261 = v257 / 4u;
                            bool v262;
                            v262 = v261 == 12u;
                            if (v262){
                                v203[4] = v257;
                                v269 = true;
                            } else {
                                v269 = false;
                            }
                        } else {
                            v269 = false;
                        }
                    }
                }
            }
        } else {
            v269 = false;
        }
    } else {
        v269 = false;
    }
    Union12 v275;
    if (v269){
        v275 = Union12{Union12_1{v203}};
    } else {
        bool v271;
        v271 = v206 == 5;
        if (v271){
            v275 = Union12{Union12_1{v203}};
        } else {
            v275 = Union12{Union12_0{}};
        }
    }
    Union12 v312;
    switch (v202.tag) {
        case 0: { // None
            v312 = v275;
            break;
        }
        case 1: { // Some
            static_array<unsigned char,5> v276 = v202.case1.v0;
            switch (v275.tag) {
                case 0: { // None
                    v312 = v202;
                    break;
                }
                case 1: { // Some
                    static_array<unsigned char,5> v277 = v275.case1.v0;
                    Union11 v278;
                    v278 = Union11{Union11_0{}};
                    int v279; Union11 v280;
                    Tuple21 tmp59 = Tuple21{0, v278};
                    v279 = tmp59.v0; v280 = tmp59.v1;
                    while (while_method_2(v279)){
                        bool v282;
                        v282 = 0 <= v279;
                        bool v284;
                        if (v282){
                            bool v283;
                            v283 = v279 < 5;
                            v284 = v283;
                        } else {
                            v284 = false;
                        }
                        bool v285;
                        v285 = v284 == false;
                        if (v285){
                            assert("Index must be in range." && v284);
                        } else {
                        }
                        unsigned char v287;
                        v287 = v276[v279];
                        bool v290;
                        if (v282){
                            bool v289;
                            v289 = v279 < 5;
                            v290 = v289;
                        } else {
                            v290 = false;
                        }
                        bool v291;
                        v291 = v290 == false;
                        if (v291){
                            assert("Index must be in range." && v290);
                        } else {
                        }
                        unsigned char v293;
                        v293 = v277[v279];
                        Union11 v305;
                        switch (v280.tag) {
                            case 0: { // Eq
                                unsigned char v295;
                                v295 = v287 / 4u;
                                unsigned char v296;
                                v296 = v293 / 4u;
                                bool v297;
                                v297 = v295 < v296;
                                if (v297){
                                    v305 = Union11{Union11_2{}};
                                } else {
                                    bool v299;
                                    v299 = v295 > v296;
                                    if (v299){
                                        v305 = Union11{Union11_1{}};
                                    } else {
                                        v305 = Union11{Union11_0{}};
                                    }
                                }
                                break;
                            }
                            default: {
                                break;
                            }
                        }
                        v280 = v305;
                        v279 += 1 ;
                    }
                    bool v306;
                    switch (v280.tag) {
                        case 1: { // Gt
                            v306 = true;
                            break;
                        }
                        default: {
                            v306 = false;
                        }
                    }
                    static_array<unsigned char,5> v307;
                    if (v306){
                        v307 = v276;
                    } else {
                        v307 = v277;
                    }
                    v312 = Union12{Union12_1{v307}};
                    break;
                }
                default: {
                    assert("Invalid tag." && false); __trap();
                }
            }
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
    static_array<unsigned char,5> v313;
    int v315; int v316; unsigned char v317;
    Tuple20 tmp60 = Tuple20{0, 0, 12u};
    v315 = tmp60.v0; v316 = tmp60.v1; v317 = tmp60.v2;
    while (while_method_16(v315)){
        bool v319;
        v319 = 0 <= v315;
        bool v321;
        if (v319){
            bool v320;
            v320 = v315 < 7;
            v321 = v320;
        } else {
            v321 = false;
        }
        bool v322;
        v322 = v321 == false;
        if (v322){
            assert("Index must be in range." && v321);
        } else {
        }
        unsigned char v324;
        v324 = v129[v315];
        bool v326;
        v326 = v316 < 5;
        int v338; unsigned char v339;
        if (v326){
            unsigned char v327;
            v327 = v324 % 4u;
            bool v328;
            v328 = 2u == v327;
            if (v328){
                unsigned char v329;
                v329 = v324 / 4u;
                bool v330;
                v330 = v317 == v329;
                int v331;
                if (v330){
                    v331 = v316;
                } else {
                    v331 = 0;
                }
                v313[v331] = v324;
                int v332;
                v332 = v331 + 1;
                unsigned char v333;
                v333 = v329 - 1u;
                v338 = v332; v339 = v333;
            } else {
                v338 = v316; v339 = v317;
            }
        } else {
            break;
        }
        v316 = v338;
        v317 = v339;
        v315 += 1 ;
    }
    bool v340;
    v340 = v316 == 4;
    bool v379;
    if (v340){
        unsigned char v341;
        v341 = v317 + 1u;
        bool v342;
        v342 = v341 == 0u;
        if (v342){
            unsigned char v343;
            v343 = v129[0];
            unsigned char v345;
            v345 = v343 % 4u;
            bool v346;
            v346 = 2u == v345;
            bool v350;
            if (v346){
                unsigned char v347;
                v347 = v343 / 4u;
                bool v348;
                v348 = v347 == 12u;
                if (v348){
                    v313[4] = v343;
                    v350 = true;
                } else {
                    v350 = false;
                }
            } else {
                v350 = false;
            }
            if (v350){
                v379 = true;
            } else {
                unsigned char v351;
                v351 = v129[1];
                unsigned char v353;
                v353 = v351 % 4u;
                bool v354;
                v354 = 2u == v353;
                bool v358;
                if (v354){
                    unsigned char v355;
                    v355 = v351 / 4u;
                    bool v356;
                    v356 = v355 == 12u;
                    if (v356){
                        v313[4] = v351;
                        v358 = true;
                    } else {
                        v358 = false;
                    }
                } else {
                    v358 = false;
                }
                if (v358){
                    v379 = true;
                } else {
                    unsigned char v359;
                    v359 = v129[2];
                    unsigned char v361;
                    v361 = v359 % 4u;
                    bool v362;
                    v362 = 2u == v361;
                    bool v366;
                    if (v362){
                        unsigned char v363;
                        v363 = v359 / 4u;
                        bool v364;
                        v364 = v363 == 12u;
                        if (v364){
                            v313[4] = v359;
                            v366 = true;
                        } else {
                            v366 = false;
                        }
                    } else {
                        v366 = false;
                    }
                    if (v366){
                        v379 = true;
                    } else {
                        unsigned char v367;
                        v367 = v129[3];
                        unsigned char v369;
                        v369 = v367 % 4u;
                        bool v370;
                        v370 = 2u == v369;
                        if (v370){
                            unsigned char v371;
                            v371 = v367 / 4u;
                            bool v372;
                            v372 = v371 == 12u;
                            if (v372){
                                v313[4] = v367;
                                v379 = true;
                            } else {
                                v379 = false;
                            }
                        } else {
                            v379 = false;
                        }
                    }
                }
            }
        } else {
            v379 = false;
        }
    } else {
        v379 = false;
    }
    Union12 v385;
    if (v379){
        v385 = Union12{Union12_1{v313}};
    } else {
        bool v381;
        v381 = v316 == 5;
        if (v381){
            v385 = Union12{Union12_1{v313}};
        } else {
            v385 = Union12{Union12_0{}};
        }
    }
    Union12 v422;
    switch (v312.tag) {
        case 0: { // None
            v422 = v385;
            break;
        }
        case 1: { // Some
            static_array<unsigned char,5> v386 = v312.case1.v0;
            switch (v385.tag) {
                case 0: { // None
                    v422 = v312;
                    break;
                }
                case 1: { // Some
                    static_array<unsigned char,5> v387 = v385.case1.v0;
                    Union11 v388;
                    v388 = Union11{Union11_0{}};
                    int v389; Union11 v390;
                    Tuple21 tmp61 = Tuple21{0, v388};
                    v389 = tmp61.v0; v390 = tmp61.v1;
                    while (while_method_2(v389)){
                        bool v392;
                        v392 = 0 <= v389;
                        bool v394;
                        if (v392){
                            bool v393;
                            v393 = v389 < 5;
                            v394 = v393;
                        } else {
                            v394 = false;
                        }
                        bool v395;
                        v395 = v394 == false;
                        if (v395){
                            assert("Index must be in range." && v394);
                        } else {
                        }
                        unsigned char v397;
                        v397 = v386[v389];
                        bool v400;
                        if (v392){
                            bool v399;
                            v399 = v389 < 5;
                            v400 = v399;
                        } else {
                            v400 = false;
                        }
                        bool v401;
                        v401 = v400 == false;
                        if (v401){
                            assert("Index must be in range." && v400);
                        } else {
                        }
                        unsigned char v403;
                        v403 = v387[v389];
                        Union11 v415;
                        switch (v390.tag) {
                            case 0: { // Eq
                                unsigned char v405;
                                v405 = v397 / 4u;
                                unsigned char v406;
                                v406 = v403 / 4u;
                                bool v407;
                                v407 = v405 < v406;
                                if (v407){
                                    v415 = Union11{Union11_2{}};
                                } else {
                                    bool v409;
                                    v409 = v405 > v406;
                                    if (v409){
                                        v415 = Union11{Union11_1{}};
                                    } else {
                                        v415 = Union11{Union11_0{}};
                                    }
                                }
                                break;
                            }
                            default: {
                                break;
                            }
                        }
                        v390 = v415;
                        v389 += 1 ;
                    }
                    bool v416;
                    switch (v390.tag) {
                        case 1: { // Gt
                            v416 = true;
                            break;
                        }
                        default: {
                            v416 = false;
                        }
                    }
                    static_array<unsigned char,5> v417;
                    if (v416){
                        v417 = v386;
                    } else {
                        v417 = v387;
                    }
                    v422 = Union12{Union12_1{v417}};
                    break;
                }
                default: {
                    assert("Invalid tag." && false); __trap();
                }
            }
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
    static_array<unsigned char,5> v423;
    int v425; int v426; unsigned char v427;
    Tuple20 tmp62 = Tuple20{0, 0, 12u};
    v425 = tmp62.v0; v426 = tmp62.v1; v427 = tmp62.v2;
    while (while_method_16(v425)){
        bool v429;
        v429 = 0 <= v425;
        bool v431;
        if (v429){
            bool v430;
            v430 = v425 < 7;
            v431 = v430;
        } else {
            v431 = false;
        }
        bool v432;
        v432 = v431 == false;
        if (v432){
            assert("Index must be in range." && v431);
        } else {
        }
        unsigned char v434;
        v434 = v129[v425];
        bool v436;
        v436 = v426 < 5;
        int v448; unsigned char v449;
        if (v436){
            unsigned char v437;
            v437 = v434 % 4u;
            bool v438;
            v438 = 3u == v437;
            if (v438){
                unsigned char v439;
                v439 = v434 / 4u;
                bool v440;
                v440 = v427 == v439;
                int v441;
                if (v440){
                    v441 = v426;
                } else {
                    v441 = 0;
                }
                v423[v441] = v434;
                int v442;
                v442 = v441 + 1;
                unsigned char v443;
                v443 = v439 - 1u;
                v448 = v442; v449 = v443;
            } else {
                v448 = v426; v449 = v427;
            }
        } else {
            break;
        }
        v426 = v448;
        v427 = v449;
        v425 += 1 ;
    }
    bool v450;
    v450 = v426 == 4;
    bool v489;
    if (v450){
        unsigned char v451;
        v451 = v427 + 1u;
        bool v452;
        v452 = v451 == 0u;
        if (v452){
            unsigned char v453;
            v453 = v129[0];
            unsigned char v455;
            v455 = v453 % 4u;
            bool v456;
            v456 = 3u == v455;
            bool v460;
            if (v456){
                unsigned char v457;
                v457 = v453 / 4u;
                bool v458;
                v458 = v457 == 12u;
                if (v458){
                    v423[4] = v453;
                    v460 = true;
                } else {
                    v460 = false;
                }
            } else {
                v460 = false;
            }
            if (v460){
                v489 = true;
            } else {
                unsigned char v461;
                v461 = v129[1];
                unsigned char v463;
                v463 = v461 % 4u;
                bool v464;
                v464 = 3u == v463;
                bool v468;
                if (v464){
                    unsigned char v465;
                    v465 = v461 / 4u;
                    bool v466;
                    v466 = v465 == 12u;
                    if (v466){
                        v423[4] = v461;
                        v468 = true;
                    } else {
                        v468 = false;
                    }
                } else {
                    v468 = false;
                }
                if (v468){
                    v489 = true;
                } else {
                    unsigned char v469;
                    v469 = v129[2];
                    unsigned char v471;
                    v471 = v469 % 4u;
                    bool v472;
                    v472 = 3u == v471;
                    bool v476;
                    if (v472){
                        unsigned char v473;
                        v473 = v469 / 4u;
                        bool v474;
                        v474 = v473 == 12u;
                        if (v474){
                            v423[4] = v469;
                            v476 = true;
                        } else {
                            v476 = false;
                        }
                    } else {
                        v476 = false;
                    }
                    if (v476){
                        v489 = true;
                    } else {
                        unsigned char v477;
                        v477 = v129[3];
                        unsigned char v479;
                        v479 = v477 % 4u;
                        bool v480;
                        v480 = 3u == v479;
                        if (v480){
                            unsigned char v481;
                            v481 = v477 / 4u;
                            bool v482;
                            v482 = v481 == 12u;
                            if (v482){
                                v423[4] = v477;
                                v489 = true;
                            } else {
                                v489 = false;
                            }
                        } else {
                            v489 = false;
                        }
                    }
                }
            }
        } else {
            v489 = false;
        }
    } else {
        v489 = false;
    }
    Union12 v495;
    if (v489){
        v495 = Union12{Union12_1{v423}};
    } else {
        bool v491;
        v491 = v426 == 5;
        if (v491){
            v495 = Union12{Union12_1{v423}};
        } else {
            v495 = Union12{Union12_0{}};
        }
    }
    Union12 v532;
    switch (v422.tag) {
        case 0: { // None
            v532 = v495;
            break;
        }
        case 1: { // Some
            static_array<unsigned char,5> v496 = v422.case1.v0;
            switch (v495.tag) {
                case 0: { // None
                    v532 = v422;
                    break;
                }
                case 1: { // Some
                    static_array<unsigned char,5> v497 = v495.case1.v0;
                    Union11 v498;
                    v498 = Union11{Union11_0{}};
                    int v499; Union11 v500;
                    Tuple21 tmp63 = Tuple21{0, v498};
                    v499 = tmp63.v0; v500 = tmp63.v1;
                    while (while_method_2(v499)){
                        bool v502;
                        v502 = 0 <= v499;
                        bool v504;
                        if (v502){
                            bool v503;
                            v503 = v499 < 5;
                            v504 = v503;
                        } else {
                            v504 = false;
                        }
                        bool v505;
                        v505 = v504 == false;
                        if (v505){
                            assert("Index must be in range." && v504);
                        } else {
                        }
                        unsigned char v507;
                        v507 = v496[v499];
                        bool v510;
                        if (v502){
                            bool v509;
                            v509 = v499 < 5;
                            v510 = v509;
                        } else {
                            v510 = false;
                        }
                        bool v511;
                        v511 = v510 == false;
                        if (v511){
                            assert("Index must be in range." && v510);
                        } else {
                        }
                        unsigned char v513;
                        v513 = v497[v499];
                        Union11 v525;
                        switch (v500.tag) {
                            case 0: { // Eq
                                unsigned char v515;
                                v515 = v507 / 4u;
                                unsigned char v516;
                                v516 = v513 / 4u;
                                bool v517;
                                v517 = v515 < v516;
                                if (v517){
                                    v525 = Union11{Union11_2{}};
                                } else {
                                    bool v519;
                                    v519 = v515 > v516;
                                    if (v519){
                                        v525 = Union11{Union11_1{}};
                                    } else {
                                        v525 = Union11{Union11_0{}};
                                    }
                                }
                                break;
                            }
                            default: {
                                break;
                            }
                        }
                        v500 = v525;
                        v499 += 1 ;
                    }
                    bool v526;
                    switch (v500.tag) {
                        case 1: { // Gt
                            v526 = true;
                            break;
                        }
                        default: {
                            v526 = false;
                        }
                    }
                    static_array<unsigned char,5> v527;
                    if (v526){
                        v527 = v496;
                    } else {
                        v527 = v497;
                    }
                    v532 = Union12{Union12_1{v527}};
                    break;
                }
                default: {
                    assert("Invalid tag." && false); __trap();
                }
            }
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
    static_array<unsigned char,5> v1331; char v1332;
    switch (v532.tag) {
        case 0: { // None
            static_array<unsigned char,4> v534;
            static_array<unsigned char,3> v536;
            int v538; int v539; int v540; unsigned char v541;
            Tuple22 tmp64 = Tuple22{0, 0, 0, 12u};
            v538 = tmp64.v0; v539 = tmp64.v1; v540 = tmp64.v2; v541 = tmp64.v3;
            while (while_method_16(v538)){
                bool v543;
                v543 = 0 <= v538;
                bool v545;
                if (v543){
                    bool v544;
                    v544 = v538 < 7;
                    v545 = v544;
                } else {
                    v545 = false;
                }
                bool v546;
                v546 = v545 == false;
                if (v546){
                    assert("Index must be in range." && v545);
                } else {
                }
                unsigned char v548;
                v548 = v129[v538];
                bool v550;
                v550 = v540 < 4;
                int v558; int v559; unsigned char v560;
                if (v550){
                    unsigned char v551;
                    v551 = v548 / 4u;
                    bool v552;
                    v552 = v541 == v551;
                    int v553;
                    if (v552){
                        v553 = v540;
                    } else {
                        v553 = 0;
                    }
                    v534[v553] = v548;
                    int v554;
                    v554 = v553 + 1;
                    v558 = v538; v559 = v554; v560 = v551;
                } else {
                    break;
                }
                v539 = v558;
                v540 = v559;
                v541 = v560;
                v538 += 1 ;
            }
            bool v561;
            v561 = v540 == 4;
            Union13 v577;
            if (v561){
                int v562;
                v562 = 0;
                while (while_method_1(v562)){
                    int v564;
                    v564 = v539 + -3;
                    bool v565;
                    v565 = v562 < v564;
                    int v566;
                    if (v565){
                        v566 = 0;
                    } else {
                        v566 = 4;
                    }
                    int v567;
                    v567 = v566 + v562;
                    bool v568;
                    v568 = 0 <= v567;
                    bool v570;
                    if (v568){
                        bool v569;
                        v569 = v567 < 7;
                        v570 = v569;
                    } else {
                        v570 = false;
                    }
                    bool v571;
                    v571 = v570 == false;
                    if (v571){
                        assert("Index must be in range." && v570);
                    } else {
                    }
                    unsigned char v573;
                    v573 = v129[v567];
                    v536[v562] = v573;
                    v562 += 1 ;
                }
                v577 = Union13{Union13_1{v534, v536}};
            } else {
                v577 = Union13{Union13_0{}};
            }
            Union12 v615;
            switch (v577.tag) {
                case 0: { // None
                    v615 = Union12{Union12_0{}};
                    break;
                }
                case 1: { // Some
                    static_array<unsigned char,4> v578 = v577.case1.v0; static_array<unsigned char,3> v579 = v577.case1.v1;
                    static_array<unsigned char,1> v580;
                    int v582;
                    v582 = 0;
                    while (while_method_6(v582)){
                        bool v584;
                        v584 = 0 <= v582;
                        bool v586;
                        if (v584){
                            bool v585;
                            v585 = v582 < 3;
                            v586 = v585;
                        } else {
                            v586 = false;
                        }
                        bool v587;
                        v587 = v586 == false;
                        if (v587){
                            assert("Index must be in range." && v586);
                        } else {
                        }
                        unsigned char v589;
                        v589 = v579[v582];
                        v580[v582] = v589;
                        v582 += 1 ;
                    }
                    static_array<unsigned char,5> v591;
                    int v593;
                    v593 = 0;
                    while (while_method_3(v593)){
                        bool v595;
                        v595 = 0 <= v593;
                        bool v597;
                        if (v595){
                            bool v596;
                            v596 = v593 < 4;
                            v597 = v596;
                        } else {
                            v597 = false;
                        }
                        bool v598;
                        v598 = v597 == false;
                        if (v598){
                            assert("Index must be in range." && v597);
                        } else {
                        }
                        unsigned char v600;
                        v600 = v578[v593];
                        v591[v593] = v600;
                        v593 += 1 ;
                    }
                    int v602;
                    v602 = 0;
                    while (while_method_6(v602)){
                        bool v604;
                        v604 = 0 <= v602;
                        bool v606;
                        if (v604){
                            bool v605;
                            v605 = v602 < 1;
                            v606 = v605;
                        } else {
                            v606 = false;
                        }
                        bool v607;
                        v607 = v606 == false;
                        if (v607){
                            assert("Index must be in range." && v606);
                        } else {
                        }
                        unsigned char v609;
                        v609 = v580[v602];
                        int v611;
                        v611 = 4 + v602;
                        v591[v611] = v609;
                        v602 += 1 ;
                    }
                    v615 = Union12{Union12_1{v591}};
                    break;
                }
                default: {
                    assert("Invalid tag." && false); __trap();
                }
            }
            switch (v615.tag) {
                case 0: { // None
                    static_array<unsigned char,3> v617;
                    static_array<unsigned char,4> v619;
                    int v621; int v622; int v623; unsigned char v624;
                    Tuple22 tmp65 = Tuple22{0, 0, 0, 12u};
                    v621 = tmp65.v0; v622 = tmp65.v1; v623 = tmp65.v2; v624 = tmp65.v3;
                    while (while_method_16(v621)){
                        bool v626;
                        v626 = 0 <= v621;
                        bool v628;
                        if (v626){
                            bool v627;
                            v627 = v621 < 7;
                            v628 = v627;
                        } else {
                            v628 = false;
                        }
                        bool v629;
                        v629 = v628 == false;
                        if (v629){
                            assert("Index must be in range." && v628);
                        } else {
                        }
                        unsigned char v631;
                        v631 = v129[v621];
                        bool v633;
                        v633 = v623 < 3;
                        int v641; int v642; unsigned char v643;
                        if (v633){
                            unsigned char v634;
                            v634 = v631 / 4u;
                            bool v635;
                            v635 = v624 == v634;
                            int v636;
                            if (v635){
                                v636 = v623;
                            } else {
                                v636 = 0;
                            }
                            v617[v636] = v631;
                            int v637;
                            v637 = v636 + 1;
                            v641 = v621; v642 = v637; v643 = v634;
                        } else {
                            break;
                        }
                        v622 = v641;
                        v623 = v642;
                        v624 = v643;
                        v621 += 1 ;
                    }
                    bool v644;
                    v644 = v623 == 3;
                    Union14 v660;
                    if (v644){
                        int v645;
                        v645 = 0;
                        while (while_method_3(v645)){
                            int v647;
                            v647 = v622 + -2;
                            bool v648;
                            v648 = v645 < v647;
                            int v649;
                            if (v648){
                                v649 = 0;
                            } else {
                                v649 = 3;
                            }
                            int v650;
                            v650 = v649 + v645;
                            bool v651;
                            v651 = 0 <= v650;
                            bool v653;
                            if (v651){
                                bool v652;
                                v652 = v650 < 7;
                                v653 = v652;
                            } else {
                                v653 = false;
                            }
                            bool v654;
                            v654 = v653 == false;
                            if (v654){
                                assert("Index must be in range." && v653);
                            } else {
                            }
                            unsigned char v656;
                            v656 = v129[v650];
                            v619[v645] = v656;
                            v645 += 1 ;
                        }
                        v660 = Union14{Union14_1{v617, v619}};
                    } else {
                        v660 = Union14{Union14_0{}};
                    }
                    Union12 v736;
                    switch (v660.tag) {
                        case 0: { // None
                            v736 = Union12{Union12_0{}};
                            break;
                        }
                        case 1: { // Some
                            static_array<unsigned char,3> v661 = v660.case1.v0; static_array<unsigned char,4> v662 = v660.case1.v1;
                            static_array<unsigned char,2> v663;
                            static_array<unsigned char,2> v665;
                            int v667; int v668; int v669; unsigned char v670;
                            Tuple22 tmp66 = Tuple22{0, 0, 0, 12u};
                            v667 = tmp66.v0; v668 = tmp66.v1; v669 = tmp66.v2; v670 = tmp66.v3;
                            while (while_method_3(v667)){
                                bool v672;
                                v672 = 0 <= v667;
                                bool v674;
                                if (v672){
                                    bool v673;
                                    v673 = v667 < 4;
                                    v674 = v673;
                                } else {
                                    v674 = false;
                                }
                                bool v675;
                                v675 = v674 == false;
                                if (v675){
                                    assert("Index must be in range." && v674);
                                } else {
                                }
                                unsigned char v677;
                                v677 = v662[v667];
                                bool v679;
                                v679 = v669 < 2;
                                int v687; int v688; unsigned char v689;
                                if (v679){
                                    unsigned char v680;
                                    v680 = v677 / 4u;
                                    bool v681;
                                    v681 = v670 == v680;
                                    int v682;
                                    if (v681){
                                        v682 = v669;
                                    } else {
                                        v682 = 0;
                                    }
                                    v663[v682] = v677;
                                    int v683;
                                    v683 = v682 + 1;
                                    v687 = v667; v688 = v683; v689 = v680;
                                } else {
                                    break;
                                }
                                v668 = v687;
                                v669 = v688;
                                v670 = v689;
                                v667 += 1 ;
                            }
                            bool v690;
                            v690 = v669 == 2;
                            Union15 v706;
                            if (v690){
                                int v691;
                                v691 = 0;
                                while (while_method_0(v691)){
                                    int v693;
                                    v693 = v668 + -1;
                                    bool v694;
                                    v694 = v691 < v693;
                                    int v695;
                                    if (v694){
                                        v695 = 0;
                                    } else {
                                        v695 = 2;
                                    }
                                    int v696;
                                    v696 = v695 + v691;
                                    bool v697;
                                    v697 = 0 <= v696;
                                    bool v699;
                                    if (v697){
                                        bool v698;
                                        v698 = v696 < 4;
                                        v699 = v698;
                                    } else {
                                        v699 = false;
                                    }
                                    bool v700;
                                    v700 = v699 == false;
                                    if (v700){
                                        assert("Index must be in range." && v699);
                                    } else {
                                    }
                                    unsigned char v702;
                                    v702 = v662[v696];
                                    v665[v691] = v702;
                                    v691 += 1 ;
                                }
                                v706 = Union15{Union15_1{v663, v665}};
                            } else {
                                v706 = Union15{Union15_0{}};
                            }
                            switch (v706.tag) {
                                case 0: { // None
                                    v736 = Union12{Union12_0{}};
                                    break;
                                }
                                case 1: { // Some
                                    static_array<unsigned char,2> v707 = v706.case1.v0; static_array<unsigned char,2> v708 = v706.case1.v1;
                                    static_array<unsigned char,5> v709;
                                    int v711;
                                    v711 = 0;
                                    while (while_method_1(v711)){
                                        bool v713;
                                        v713 = 0 <= v711;
                                        bool v715;
                                        if (v713){
                                            bool v714;
                                            v714 = v711 < 3;
                                            v715 = v714;
                                        } else {
                                            v715 = false;
                                        }
                                        bool v716;
                                        v716 = v715 == false;
                                        if (v716){
                                            assert("Index must be in range." && v715);
                                        } else {
                                        }
                                        unsigned char v718;
                                        v718 = v661[v711];
                                        v709[v711] = v718;
                                        v711 += 1 ;
                                    }
                                    int v720;
                                    v720 = 0;
                                    while (while_method_0(v720)){
                                        bool v722;
                                        v722 = 0 <= v720;
                                        bool v724;
                                        if (v722){
                                            bool v723;
                                            v723 = v720 < 2;
                                            v724 = v723;
                                        } else {
                                            v724 = false;
                                        }
                                        bool v725;
                                        v725 = v724 == false;
                                        if (v725){
                                            assert("Index must be in range." && v724);
                                        } else {
                                        }
                                        unsigned char v727;
                                        v727 = v707[v720];
                                        int v729;
                                        v729 = 3 + v720;
                                        v709[v729] = v727;
                                        v720 += 1 ;
                                    }
                                    v736 = Union12{Union12_1{v709}};
                                    break;
                                }
                                default: {
                                    assert("Invalid tag." && false); __trap();
                                }
                            }
                            break;
                        }
                        default: {
                            assert("Invalid tag." && false); __trap();
                        }
                    }
                    switch (v736.tag) {
                        case 0: { // None
                            static_array<unsigned char,5> v738;
                            int v740; int v741;
                            Tuple4 tmp67 = Tuple4{0, 0};
                            v740 = tmp67.v0; v741 = tmp67.v1;
                            while (while_method_16(v740)){
                                bool v743;
                                v743 = 0 <= v740;
                                bool v745;
                                if (v743){
                                    bool v744;
                                    v744 = v740 < 7;
                                    v745 = v744;
                                } else {
                                    v745 = false;
                                }
                                bool v746;
                                v746 = v745 == false;
                                if (v746){
                                    assert("Index must be in range." && v745);
                                } else {
                                }
                                unsigned char v748;
                                v748 = v129[v740];
                                unsigned char v750;
                                v750 = v748 % 4u;
                                bool v751;
                                v751 = v750 == 0u;
                                bool v753;
                                if (v751){
                                    bool v752;
                                    v752 = v741 < 5;
                                    v753 = v752;
                                } else {
                                    v753 = false;
                                }
                                int v755;
                                if (v753){
                                    v738[v741] = v748;
                                    int v754;
                                    v754 = v741 + 1;
                                    v755 = v754;
                                } else {
                                    v755 = v741;
                                }
                                v741 = v755;
                                v740 += 1 ;
                            }
                            bool v756;
                            v756 = v741 == 5;
                            Union12 v759;
                            if (v756){
                                v759 = Union12{Union12_1{v738}};
                            } else {
                                v759 = Union12{Union12_0{}};
                            }
                            static_array<unsigned char,5> v760;
                            int v762; int v763;
                            Tuple4 tmp68 = Tuple4{0, 0};
                            v762 = tmp68.v0; v763 = tmp68.v1;
                            while (while_method_16(v762)){
                                bool v765;
                                v765 = 0 <= v762;
                                bool v767;
                                if (v765){
                                    bool v766;
                                    v766 = v762 < 7;
                                    v767 = v766;
                                } else {
                                    v767 = false;
                                }
                                bool v768;
                                v768 = v767 == false;
                                if (v768){
                                    assert("Index must be in range." && v767);
                                } else {
                                }
                                unsigned char v770;
                                v770 = v129[v762];
                                unsigned char v772;
                                v772 = v770 % 4u;
                                bool v773;
                                v773 = v772 == 1u;
                                bool v775;
                                if (v773){
                                    bool v774;
                                    v774 = v763 < 5;
                                    v775 = v774;
                                } else {
                                    v775 = false;
                                }
                                int v777;
                                if (v775){
                                    v760[v763] = v770;
                                    int v776;
                                    v776 = v763 + 1;
                                    v777 = v776;
                                } else {
                                    v777 = v763;
                                }
                                v763 = v777;
                                v762 += 1 ;
                            }
                            bool v778;
                            v778 = v763 == 5;
                            Union12 v781;
                            if (v778){
                                v781 = Union12{Union12_1{v760}};
                            } else {
                                v781 = Union12{Union12_0{}};
                            }
                            Union12 v818;
                            switch (v759.tag) {
                                case 0: { // None
                                    v818 = v781;
                                    break;
                                }
                                case 1: { // Some
                                    static_array<unsigned char,5> v782 = v759.case1.v0;
                                    switch (v781.tag) {
                                        case 0: { // None
                                            v818 = v759;
                                            break;
                                        }
                                        case 1: { // Some
                                            static_array<unsigned char,5> v783 = v781.case1.v0;
                                            Union11 v784;
                                            v784 = Union11{Union11_0{}};
                                            int v785; Union11 v786;
                                            Tuple21 tmp69 = Tuple21{0, v784};
                                            v785 = tmp69.v0; v786 = tmp69.v1;
                                            while (while_method_2(v785)){
                                                bool v788;
                                                v788 = 0 <= v785;
                                                bool v790;
                                                if (v788){
                                                    bool v789;
                                                    v789 = v785 < 5;
                                                    v790 = v789;
                                                } else {
                                                    v790 = false;
                                                }
                                                bool v791;
                                                v791 = v790 == false;
                                                if (v791){
                                                    assert("Index must be in range." && v790);
                                                } else {
                                                }
                                                unsigned char v793;
                                                v793 = v782[v785];
                                                bool v796;
                                                if (v788){
                                                    bool v795;
                                                    v795 = v785 < 5;
                                                    v796 = v795;
                                                } else {
                                                    v796 = false;
                                                }
                                                bool v797;
                                                v797 = v796 == false;
                                                if (v797){
                                                    assert("Index must be in range." && v796);
                                                } else {
                                                }
                                                unsigned char v799;
                                                v799 = v783[v785];
                                                Union11 v811;
                                                switch (v786.tag) {
                                                    case 0: { // Eq
                                                        unsigned char v801;
                                                        v801 = v793 / 4u;
                                                        unsigned char v802;
                                                        v802 = v799 / 4u;
                                                        bool v803;
                                                        v803 = v801 < v802;
                                                        if (v803){
                                                            v811 = Union11{Union11_2{}};
                                                        } else {
                                                            bool v805;
                                                            v805 = v801 > v802;
                                                            if (v805){
                                                                v811 = Union11{Union11_1{}};
                                                            } else {
                                                                v811 = Union11{Union11_0{}};
                                                            }
                                                        }
                                                        break;
                                                    }
                                                    default: {
                                                        break;
                                                    }
                                                }
                                                v786 = v811;
                                                v785 += 1 ;
                                            }
                                            bool v812;
                                            switch (v786.tag) {
                                                case 1: { // Gt
                                                    v812 = true;
                                                    break;
                                                }
                                                default: {
                                                    v812 = false;
                                                }
                                            }
                                            static_array<unsigned char,5> v813;
                                            if (v812){
                                                v813 = v782;
                                            } else {
                                                v813 = v783;
                                            }
                                            v818 = Union12{Union12_1{v813}};
                                            break;
                                        }
                                        default: {
                                            assert("Invalid tag." && false); __trap();
                                        }
                                    }
                                    break;
                                }
                                default: {
                                    assert("Invalid tag." && false); __trap();
                                }
                            }
                            static_array<unsigned char,5> v819;
                            int v821; int v822;
                            Tuple4 tmp70 = Tuple4{0, 0};
                            v821 = tmp70.v0; v822 = tmp70.v1;
                            while (while_method_16(v821)){
                                bool v824;
                                v824 = 0 <= v821;
                                bool v826;
                                if (v824){
                                    bool v825;
                                    v825 = v821 < 7;
                                    v826 = v825;
                                } else {
                                    v826 = false;
                                }
                                bool v827;
                                v827 = v826 == false;
                                if (v827){
                                    assert("Index must be in range." && v826);
                                } else {
                                }
                                unsigned char v829;
                                v829 = v129[v821];
                                unsigned char v831;
                                v831 = v829 % 4u;
                                bool v832;
                                v832 = v831 == 2u;
                                bool v834;
                                if (v832){
                                    bool v833;
                                    v833 = v822 < 5;
                                    v834 = v833;
                                } else {
                                    v834 = false;
                                }
                                int v836;
                                if (v834){
                                    v819[v822] = v829;
                                    int v835;
                                    v835 = v822 + 1;
                                    v836 = v835;
                                } else {
                                    v836 = v822;
                                }
                                v822 = v836;
                                v821 += 1 ;
                            }
                            bool v837;
                            v837 = v822 == 5;
                            Union12 v840;
                            if (v837){
                                v840 = Union12{Union12_1{v819}};
                            } else {
                                v840 = Union12{Union12_0{}};
                            }
                            Union12 v877;
                            switch (v818.tag) {
                                case 0: { // None
                                    v877 = v840;
                                    break;
                                }
                                case 1: { // Some
                                    static_array<unsigned char,5> v841 = v818.case1.v0;
                                    switch (v840.tag) {
                                        case 0: { // None
                                            v877 = v818;
                                            break;
                                        }
                                        case 1: { // Some
                                            static_array<unsigned char,5> v842 = v840.case1.v0;
                                            Union11 v843;
                                            v843 = Union11{Union11_0{}};
                                            int v844; Union11 v845;
                                            Tuple21 tmp71 = Tuple21{0, v843};
                                            v844 = tmp71.v0; v845 = tmp71.v1;
                                            while (while_method_2(v844)){
                                                bool v847;
                                                v847 = 0 <= v844;
                                                bool v849;
                                                if (v847){
                                                    bool v848;
                                                    v848 = v844 < 5;
                                                    v849 = v848;
                                                } else {
                                                    v849 = false;
                                                }
                                                bool v850;
                                                v850 = v849 == false;
                                                if (v850){
                                                    assert("Index must be in range." && v849);
                                                } else {
                                                }
                                                unsigned char v852;
                                                v852 = v841[v844];
                                                bool v855;
                                                if (v847){
                                                    bool v854;
                                                    v854 = v844 < 5;
                                                    v855 = v854;
                                                } else {
                                                    v855 = false;
                                                }
                                                bool v856;
                                                v856 = v855 == false;
                                                if (v856){
                                                    assert("Index must be in range." && v855);
                                                } else {
                                                }
                                                unsigned char v858;
                                                v858 = v842[v844];
                                                Union11 v870;
                                                switch (v845.tag) {
                                                    case 0: { // Eq
                                                        unsigned char v860;
                                                        v860 = v852 / 4u;
                                                        unsigned char v861;
                                                        v861 = v858 / 4u;
                                                        bool v862;
                                                        v862 = v860 < v861;
                                                        if (v862){
                                                            v870 = Union11{Union11_2{}};
                                                        } else {
                                                            bool v864;
                                                            v864 = v860 > v861;
                                                            if (v864){
                                                                v870 = Union11{Union11_1{}};
                                                            } else {
                                                                v870 = Union11{Union11_0{}};
                                                            }
                                                        }
                                                        break;
                                                    }
                                                    default: {
                                                        break;
                                                    }
                                                }
                                                v845 = v870;
                                                v844 += 1 ;
                                            }
                                            bool v871;
                                            switch (v845.tag) {
                                                case 1: { // Gt
                                                    v871 = true;
                                                    break;
                                                }
                                                default: {
                                                    v871 = false;
                                                }
                                            }
                                            static_array<unsigned char,5> v872;
                                            if (v871){
                                                v872 = v841;
                                            } else {
                                                v872 = v842;
                                            }
                                            v877 = Union12{Union12_1{v872}};
                                            break;
                                        }
                                        default: {
                                            assert("Invalid tag." && false); __trap();
                                        }
                                    }
                                    break;
                                }
                                default: {
                                    assert("Invalid tag." && false); __trap();
                                }
                            }
                            static_array<unsigned char,5> v878;
                            int v880; int v881;
                            Tuple4 tmp72 = Tuple4{0, 0};
                            v880 = tmp72.v0; v881 = tmp72.v1;
                            while (while_method_16(v880)){
                                bool v883;
                                v883 = 0 <= v880;
                                bool v885;
                                if (v883){
                                    bool v884;
                                    v884 = v880 < 7;
                                    v885 = v884;
                                } else {
                                    v885 = false;
                                }
                                bool v886;
                                v886 = v885 == false;
                                if (v886){
                                    assert("Index must be in range." && v885);
                                } else {
                                }
                                unsigned char v888;
                                v888 = v129[v880];
                                unsigned char v890;
                                v890 = v888 % 4u;
                                bool v891;
                                v891 = v890 == 3u;
                                bool v893;
                                if (v891){
                                    bool v892;
                                    v892 = v881 < 5;
                                    v893 = v892;
                                } else {
                                    v893 = false;
                                }
                                int v895;
                                if (v893){
                                    v878[v881] = v888;
                                    int v894;
                                    v894 = v881 + 1;
                                    v895 = v894;
                                } else {
                                    v895 = v881;
                                }
                                v881 = v895;
                                v880 += 1 ;
                            }
                            bool v896;
                            v896 = v881 == 5;
                            Union12 v899;
                            if (v896){
                                v899 = Union12{Union12_1{v878}};
                            } else {
                                v899 = Union12{Union12_0{}};
                            }
                            Union12 v936;
                            switch (v877.tag) {
                                case 0: { // None
                                    v936 = v899;
                                    break;
                                }
                                case 1: { // Some
                                    static_array<unsigned char,5> v900 = v877.case1.v0;
                                    switch (v899.tag) {
                                        case 0: { // None
                                            v936 = v877;
                                            break;
                                        }
                                        case 1: { // Some
                                            static_array<unsigned char,5> v901 = v899.case1.v0;
                                            Union11 v902;
                                            v902 = Union11{Union11_0{}};
                                            int v903; Union11 v904;
                                            Tuple21 tmp73 = Tuple21{0, v902};
                                            v903 = tmp73.v0; v904 = tmp73.v1;
                                            while (while_method_2(v903)){
                                                bool v906;
                                                v906 = 0 <= v903;
                                                bool v908;
                                                if (v906){
                                                    bool v907;
                                                    v907 = v903 < 5;
                                                    v908 = v907;
                                                } else {
                                                    v908 = false;
                                                }
                                                bool v909;
                                                v909 = v908 == false;
                                                if (v909){
                                                    assert("Index must be in range." && v908);
                                                } else {
                                                }
                                                unsigned char v911;
                                                v911 = v900[v903];
                                                bool v914;
                                                if (v906){
                                                    bool v913;
                                                    v913 = v903 < 5;
                                                    v914 = v913;
                                                } else {
                                                    v914 = false;
                                                }
                                                bool v915;
                                                v915 = v914 == false;
                                                if (v915){
                                                    assert("Index must be in range." && v914);
                                                } else {
                                                }
                                                unsigned char v917;
                                                v917 = v901[v903];
                                                Union11 v929;
                                                switch (v904.tag) {
                                                    case 0: { // Eq
                                                        unsigned char v919;
                                                        v919 = v911 / 4u;
                                                        unsigned char v920;
                                                        v920 = v917 / 4u;
                                                        bool v921;
                                                        v921 = v919 < v920;
                                                        if (v921){
                                                            v929 = Union11{Union11_2{}};
                                                        } else {
                                                            bool v923;
                                                            v923 = v919 > v920;
                                                            if (v923){
                                                                v929 = Union11{Union11_1{}};
                                                            } else {
                                                                v929 = Union11{Union11_0{}};
                                                            }
                                                        }
                                                        break;
                                                    }
                                                    default: {
                                                        break;
                                                    }
                                                }
                                                v904 = v929;
                                                v903 += 1 ;
                                            }
                                            bool v930;
                                            switch (v904.tag) {
                                                case 1: { // Gt
                                                    v930 = true;
                                                    break;
                                                }
                                                default: {
                                                    v930 = false;
                                                }
                                            }
                                            static_array<unsigned char,5> v931;
                                            if (v930){
                                                v931 = v900;
                                            } else {
                                                v931 = v901;
                                            }
                                            v936 = Union12{Union12_1{v931}};
                                            break;
                                        }
                                        default: {
                                            assert("Invalid tag." && false); __trap();
                                        }
                                    }
                                    break;
                                }
                                default: {
                                    assert("Invalid tag." && false); __trap();
                                }
                            }
                            switch (v936.tag) {
                                case 0: { // None
                                    static_array<unsigned char,5> v938;
                                    int v940; int v941; unsigned char v942;
                                    Tuple20 tmp74 = Tuple20{0, 0, 12u};
                                    v940 = tmp74.v0; v941 = tmp74.v1; v942 = tmp74.v2;
                                    while (while_method_16(v940)){
                                        bool v944;
                                        v944 = 0 <= v940;
                                        bool v946;
                                        if (v944){
                                            bool v945;
                                            v945 = v940 < 7;
                                            v946 = v945;
                                        } else {
                                            v946 = false;
                                        }
                                        bool v947;
                                        v947 = v946 == false;
                                        if (v947){
                                            assert("Index must be in range." && v946);
                                        } else {
                                        }
                                        unsigned char v949;
                                        v949 = v129[v940];
                                        bool v951;
                                        v951 = v941 < 5;
                                        int v963; unsigned char v964;
                                        if (v951){
                                            unsigned char v952;
                                            v952 = v949 / 4u;
                                            unsigned char v953;
                                            v953 = v952 - 1u;
                                            bool v954;
                                            v954 = v942 == v953;
                                            bool v955;
                                            v955 = v954 != true;
                                            if (v955){
                                                bool v956;
                                                v956 = v942 == v952;
                                                int v957;
                                                if (v956){
                                                    v957 = v941;
                                                } else {
                                                    v957 = 0;
                                                }
                                                v938[v957] = v949;
                                                int v958;
                                                v958 = v957 + 1;
                                                v963 = v958; v964 = v953;
                                            } else {
                                                v963 = v941; v964 = v942;
                                            }
                                        } else {
                                            break;
                                        }
                                        v941 = v963;
                                        v942 = v964;
                                        v940 += 1 ;
                                    }
                                    bool v965;
                                    v965 = v941 == 4;
                                    bool v974;
                                    if (v965){
                                        unsigned char v966;
                                        v966 = v942 + 1u;
                                        bool v967;
                                        v967 = v966 == 0u;
                                        if (v967){
                                            unsigned char v968;
                                            v968 = v129[0];
                                            unsigned char v970;
                                            v970 = v968 / 4u;
                                            bool v971;
                                            v971 = v970 == 12u;
                                            if (v971){
                                                v938[4] = v968;
                                                v974 = true;
                                            } else {
                                                v974 = false;
                                            }
                                        } else {
                                            v974 = false;
                                        }
                                    } else {
                                        v974 = false;
                                    }
                                    Union12 v980;
                                    if (v974){
                                        v980 = Union12{Union12_1{v938}};
                                    } else {
                                        bool v976;
                                        v976 = v941 == 5;
                                        if (v976){
                                            v980 = Union12{Union12_1{v938}};
                                        } else {
                                            v980 = Union12{Union12_0{}};
                                        }
                                    }
                                    switch (v980.tag) {
                                        case 0: { // None
                                            static_array<unsigned char,3> v982;
                                            static_array<unsigned char,4> v984;
                                            int v986; int v987; int v988; unsigned char v989;
                                            Tuple22 tmp75 = Tuple22{0, 0, 0, 12u};
                                            v986 = tmp75.v0; v987 = tmp75.v1; v988 = tmp75.v2; v989 = tmp75.v3;
                                            while (while_method_16(v986)){
                                                bool v991;
                                                v991 = 0 <= v986;
                                                bool v993;
                                                if (v991){
                                                    bool v992;
                                                    v992 = v986 < 7;
                                                    v993 = v992;
                                                } else {
                                                    v993 = false;
                                                }
                                                bool v994;
                                                v994 = v993 == false;
                                                if (v994){
                                                    assert("Index must be in range." && v993);
                                                } else {
                                                }
                                                unsigned char v996;
                                                v996 = v129[v986];
                                                bool v998;
                                                v998 = v988 < 3;
                                                int v1006; int v1007; unsigned char v1008;
                                                if (v998){
                                                    unsigned char v999;
                                                    v999 = v996 / 4u;
                                                    bool v1000;
                                                    v1000 = v989 == v999;
                                                    int v1001;
                                                    if (v1000){
                                                        v1001 = v988;
                                                    } else {
                                                        v1001 = 0;
                                                    }
                                                    v982[v1001] = v996;
                                                    int v1002;
                                                    v1002 = v1001 + 1;
                                                    v1006 = v986; v1007 = v1002; v1008 = v999;
                                                } else {
                                                    break;
                                                }
                                                v987 = v1006;
                                                v988 = v1007;
                                                v989 = v1008;
                                                v986 += 1 ;
                                            }
                                            bool v1009;
                                            v1009 = v988 == 3;
                                            Union14 v1025;
                                            if (v1009){
                                                int v1010;
                                                v1010 = 0;
                                                while (while_method_3(v1010)){
                                                    int v1012;
                                                    v1012 = v987 + -2;
                                                    bool v1013;
                                                    v1013 = v1010 < v1012;
                                                    int v1014;
                                                    if (v1013){
                                                        v1014 = 0;
                                                    } else {
                                                        v1014 = 3;
                                                    }
                                                    int v1015;
                                                    v1015 = v1014 + v1010;
                                                    bool v1016;
                                                    v1016 = 0 <= v1015;
                                                    bool v1018;
                                                    if (v1016){
                                                        bool v1017;
                                                        v1017 = v1015 < 7;
                                                        v1018 = v1017;
                                                    } else {
                                                        v1018 = false;
                                                    }
                                                    bool v1019;
                                                    v1019 = v1018 == false;
                                                    if (v1019){
                                                        assert("Index must be in range." && v1018);
                                                    } else {
                                                    }
                                                    unsigned char v1021;
                                                    v1021 = v129[v1015];
                                                    v984[v1010] = v1021;
                                                    v1010 += 1 ;
                                                }
                                                v1025 = Union14{Union14_1{v982, v984}};
                                            } else {
                                                v1025 = Union14{Union14_0{}};
                                            }
                                            Union12 v1063;
                                            switch (v1025.tag) {
                                                case 0: { // None
                                                    v1063 = Union12{Union12_0{}};
                                                    break;
                                                }
                                                case 1: { // Some
                                                    static_array<unsigned char,3> v1026 = v1025.case1.v0; static_array<unsigned char,4> v1027 = v1025.case1.v1;
                                                    static_array<unsigned char,2> v1028;
                                                    int v1030;
                                                    v1030 = 0;
                                                    while (while_method_0(v1030)){
                                                        bool v1032;
                                                        v1032 = 0 <= v1030;
                                                        bool v1034;
                                                        if (v1032){
                                                            bool v1033;
                                                            v1033 = v1030 < 4;
                                                            v1034 = v1033;
                                                        } else {
                                                            v1034 = false;
                                                        }
                                                        bool v1035;
                                                        v1035 = v1034 == false;
                                                        if (v1035){
                                                            assert("Index must be in range." && v1034);
                                                        } else {
                                                        }
                                                        unsigned char v1037;
                                                        v1037 = v1027[v1030];
                                                        v1028[v1030] = v1037;
                                                        v1030 += 1 ;
                                                    }
                                                    static_array<unsigned char,5> v1039;
                                                    int v1041;
                                                    v1041 = 0;
                                                    while (while_method_1(v1041)){
                                                        bool v1043;
                                                        v1043 = 0 <= v1041;
                                                        bool v1045;
                                                        if (v1043){
                                                            bool v1044;
                                                            v1044 = v1041 < 3;
                                                            v1045 = v1044;
                                                        } else {
                                                            v1045 = false;
                                                        }
                                                        bool v1046;
                                                        v1046 = v1045 == false;
                                                        if (v1046){
                                                            assert("Index must be in range." && v1045);
                                                        } else {
                                                        }
                                                        unsigned char v1048;
                                                        v1048 = v1026[v1041];
                                                        v1039[v1041] = v1048;
                                                        v1041 += 1 ;
                                                    }
                                                    int v1050;
                                                    v1050 = 0;
                                                    while (while_method_0(v1050)){
                                                        bool v1052;
                                                        v1052 = 0 <= v1050;
                                                        bool v1054;
                                                        if (v1052){
                                                            bool v1053;
                                                            v1053 = v1050 < 2;
                                                            v1054 = v1053;
                                                        } else {
                                                            v1054 = false;
                                                        }
                                                        bool v1055;
                                                        v1055 = v1054 == false;
                                                        if (v1055){
                                                            assert("Index must be in range." && v1054);
                                                        } else {
                                                        }
                                                        unsigned char v1057;
                                                        v1057 = v1028[v1050];
                                                        int v1059;
                                                        v1059 = 3 + v1050;
                                                        v1039[v1059] = v1057;
                                                        v1050 += 1 ;
                                                    }
                                                    v1063 = Union12{Union12_1{v1039}};
                                                    break;
                                                }
                                                default: {
                                                    assert("Invalid tag." && false); __trap();
                                                }
                                            }
                                            switch (v1063.tag) {
                                                case 0: { // None
                                                    static_array<unsigned char,2> v1065;
                                                    static_array<unsigned char,5> v1067;
                                                    int v1069; int v1070; int v1071; unsigned char v1072;
                                                    Tuple22 tmp76 = Tuple22{0, 0, 0, 12u};
                                                    v1069 = tmp76.v0; v1070 = tmp76.v1; v1071 = tmp76.v2; v1072 = tmp76.v3;
                                                    while (while_method_16(v1069)){
                                                        bool v1074;
                                                        v1074 = 0 <= v1069;
                                                        bool v1076;
                                                        if (v1074){
                                                            bool v1075;
                                                            v1075 = v1069 < 7;
                                                            v1076 = v1075;
                                                        } else {
                                                            v1076 = false;
                                                        }
                                                        bool v1077;
                                                        v1077 = v1076 == false;
                                                        if (v1077){
                                                            assert("Index must be in range." && v1076);
                                                        } else {
                                                        }
                                                        unsigned char v1079;
                                                        v1079 = v129[v1069];
                                                        bool v1081;
                                                        v1081 = v1071 < 2;
                                                        int v1089; int v1090; unsigned char v1091;
                                                        if (v1081){
                                                            unsigned char v1082;
                                                            v1082 = v1079 / 4u;
                                                            bool v1083;
                                                            v1083 = v1072 == v1082;
                                                            int v1084;
                                                            if (v1083){
                                                                v1084 = v1071;
                                                            } else {
                                                                v1084 = 0;
                                                            }
                                                            v1065[v1084] = v1079;
                                                            int v1085;
                                                            v1085 = v1084 + 1;
                                                            v1089 = v1069; v1090 = v1085; v1091 = v1082;
                                                        } else {
                                                            break;
                                                        }
                                                        v1070 = v1089;
                                                        v1071 = v1090;
                                                        v1072 = v1091;
                                                        v1069 += 1 ;
                                                    }
                                                    bool v1092;
                                                    v1092 = v1071 == 2;
                                                    Union16 v1108;
                                                    if (v1092){
                                                        int v1093;
                                                        v1093 = 0;
                                                        while (while_method_2(v1093)){
                                                            int v1095;
                                                            v1095 = v1070 + -1;
                                                            bool v1096;
                                                            v1096 = v1093 < v1095;
                                                            int v1097;
                                                            if (v1096){
                                                                v1097 = 0;
                                                            } else {
                                                                v1097 = 2;
                                                            }
                                                            int v1098;
                                                            v1098 = v1097 + v1093;
                                                            bool v1099;
                                                            v1099 = 0 <= v1098;
                                                            bool v1101;
                                                            if (v1099){
                                                                bool v1100;
                                                                v1100 = v1098 < 7;
                                                                v1101 = v1100;
                                                            } else {
                                                                v1101 = false;
                                                            }
                                                            bool v1102;
                                                            v1102 = v1101 == false;
                                                            if (v1102){
                                                                assert("Index must be in range." && v1101);
                                                            } else {
                                                            }
                                                            unsigned char v1104;
                                                            v1104 = v129[v1098];
                                                            v1067[v1093] = v1104;
                                                            v1093 += 1 ;
                                                        }
                                                        v1108 = Union16{Union16_1{v1065, v1067}};
                                                    } else {
                                                        v1108 = Union16{Union16_0{}};
                                                    }
                                                    Union12 v1205;
                                                    switch (v1108.tag) {
                                                        case 0: { // None
                                                            v1205 = Union12{Union12_0{}};
                                                            break;
                                                        }
                                                        case 1: { // Some
                                                            static_array<unsigned char,2> v1109 = v1108.case1.v0; static_array<unsigned char,5> v1110 = v1108.case1.v1;
                                                            static_array<unsigned char,2> v1111;
                                                            static_array<unsigned char,3> v1113;
                                                            int v1115; int v1116; int v1117; unsigned char v1118;
                                                            Tuple22 tmp77 = Tuple22{0, 0, 0, 12u};
                                                            v1115 = tmp77.v0; v1116 = tmp77.v1; v1117 = tmp77.v2; v1118 = tmp77.v3;
                                                            while (while_method_2(v1115)){
                                                                bool v1120;
                                                                v1120 = 0 <= v1115;
                                                                bool v1122;
                                                                if (v1120){
                                                                    bool v1121;
                                                                    v1121 = v1115 < 5;
                                                                    v1122 = v1121;
                                                                } else {
                                                                    v1122 = false;
                                                                }
                                                                bool v1123;
                                                                v1123 = v1122 == false;
                                                                if (v1123){
                                                                    assert("Index must be in range." && v1122);
                                                                } else {
                                                                }
                                                                unsigned char v1125;
                                                                v1125 = v1110[v1115];
                                                                bool v1127;
                                                                v1127 = v1117 < 2;
                                                                int v1135; int v1136; unsigned char v1137;
                                                                if (v1127){
                                                                    unsigned char v1128;
                                                                    v1128 = v1125 / 4u;
                                                                    bool v1129;
                                                                    v1129 = v1118 == v1128;
                                                                    int v1130;
                                                                    if (v1129){
                                                                        v1130 = v1117;
                                                                    } else {
                                                                        v1130 = 0;
                                                                    }
                                                                    v1111[v1130] = v1125;
                                                                    int v1131;
                                                                    v1131 = v1130 + 1;
                                                                    v1135 = v1115; v1136 = v1131; v1137 = v1128;
                                                                } else {
                                                                    break;
                                                                }
                                                                v1116 = v1135;
                                                                v1117 = v1136;
                                                                v1118 = v1137;
                                                                v1115 += 1 ;
                                                            }
                                                            bool v1138;
                                                            v1138 = v1117 == 2;
                                                            Union17 v1154;
                                                            if (v1138){
                                                                int v1139;
                                                                v1139 = 0;
                                                                while (while_method_1(v1139)){
                                                                    int v1141;
                                                                    v1141 = v1116 + -1;
                                                                    bool v1142;
                                                                    v1142 = v1139 < v1141;
                                                                    int v1143;
                                                                    if (v1142){
                                                                        v1143 = 0;
                                                                    } else {
                                                                        v1143 = 2;
                                                                    }
                                                                    int v1144;
                                                                    v1144 = v1143 + v1139;
                                                                    bool v1145;
                                                                    v1145 = 0 <= v1144;
                                                                    bool v1147;
                                                                    if (v1145){
                                                                        bool v1146;
                                                                        v1146 = v1144 < 5;
                                                                        v1147 = v1146;
                                                                    } else {
                                                                        v1147 = false;
                                                                    }
                                                                    bool v1148;
                                                                    v1148 = v1147 == false;
                                                                    if (v1148){
                                                                        assert("Index must be in range." && v1147);
                                                                    } else {
                                                                    }
                                                                    unsigned char v1150;
                                                                    v1150 = v1110[v1144];
                                                                    v1113[v1139] = v1150;
                                                                    v1139 += 1 ;
                                                                }
                                                                v1154 = Union17{Union17_1{v1111, v1113}};
                                                            } else {
                                                                v1154 = Union17{Union17_0{}};
                                                            }
                                                            switch (v1154.tag) {
                                                                case 0: { // None
                                                                    v1205 = Union12{Union12_0{}};
                                                                    break;
                                                                }
                                                                case 1: { // Some
                                                                    static_array<unsigned char,2> v1155 = v1154.case1.v0; static_array<unsigned char,3> v1156 = v1154.case1.v1;
                                                                    static_array<unsigned char,1> v1157;
                                                                    int v1159;
                                                                    v1159 = 0;
                                                                    while (while_method_6(v1159)){
                                                                        bool v1161;
                                                                        v1161 = 0 <= v1159;
                                                                        bool v1163;
                                                                        if (v1161){
                                                                            bool v1162;
                                                                            v1162 = v1159 < 3;
                                                                            v1163 = v1162;
                                                                        } else {
                                                                            v1163 = false;
                                                                        }
                                                                        bool v1164;
                                                                        v1164 = v1163 == false;
                                                                        if (v1164){
                                                                            assert("Index must be in range." && v1163);
                                                                        } else {
                                                                        }
                                                                        unsigned char v1166;
                                                                        v1166 = v1156[v1159];
                                                                        v1157[v1159] = v1166;
                                                                        v1159 += 1 ;
                                                                    }
                                                                    static_array<unsigned char,5> v1168;
                                                                    int v1170;
                                                                    v1170 = 0;
                                                                    while (while_method_0(v1170)){
                                                                        bool v1172;
                                                                        v1172 = 0 <= v1170;
                                                                        bool v1174;
                                                                        if (v1172){
                                                                            bool v1173;
                                                                            v1173 = v1170 < 2;
                                                                            v1174 = v1173;
                                                                        } else {
                                                                            v1174 = false;
                                                                        }
                                                                        bool v1175;
                                                                        v1175 = v1174 == false;
                                                                        if (v1175){
                                                                            assert("Index must be in range." && v1174);
                                                                        } else {
                                                                        }
                                                                        unsigned char v1177;
                                                                        v1177 = v1109[v1170];
                                                                        v1168[v1170] = v1177;
                                                                        v1170 += 1 ;
                                                                    }
                                                                    int v1179;
                                                                    v1179 = 0;
                                                                    while (while_method_0(v1179)){
                                                                        bool v1181;
                                                                        v1181 = 0 <= v1179;
                                                                        bool v1183;
                                                                        if (v1181){
                                                                            bool v1182;
                                                                            v1182 = v1179 < 2;
                                                                            v1183 = v1182;
                                                                        } else {
                                                                            v1183 = false;
                                                                        }
                                                                        bool v1184;
                                                                        v1184 = v1183 == false;
                                                                        if (v1184){
                                                                            assert("Index must be in range." && v1183);
                                                                        } else {
                                                                        }
                                                                        unsigned char v1186;
                                                                        v1186 = v1155[v1179];
                                                                        int v1188;
                                                                        v1188 = 2 + v1179;
                                                                        v1168[v1188] = v1186;
                                                                        v1179 += 1 ;
                                                                    }
                                                                    int v1189;
                                                                    v1189 = 0;
                                                                    while (while_method_6(v1189)){
                                                                        bool v1191;
                                                                        v1191 = 0 <= v1189;
                                                                        bool v1193;
                                                                        if (v1191){
                                                                            bool v1192;
                                                                            v1192 = v1189 < 1;
                                                                            v1193 = v1192;
                                                                        } else {
                                                                            v1193 = false;
                                                                        }
                                                                        bool v1194;
                                                                        v1194 = v1193 == false;
                                                                        if (v1194){
                                                                            assert("Index must be in range." && v1193);
                                                                        } else {
                                                                        }
                                                                        unsigned char v1196;
                                                                        v1196 = v1157[v1189];
                                                                        int v1198;
                                                                        v1198 = 4 + v1189;
                                                                        v1168[v1198] = v1196;
                                                                        v1189 += 1 ;
                                                                    }
                                                                    v1205 = Union12{Union12_1{v1168}};
                                                                    break;
                                                                }
                                                                default: {
                                                                    assert("Invalid tag." && false); __trap();
                                                                }
                                                            }
                                                            break;
                                                        }
                                                        default: {
                                                            assert("Invalid tag." && false); __trap();
                                                        }
                                                    }
                                                    switch (v1205.tag) {
                                                        case 0: { // None
                                                            static_array<unsigned char,2> v1207;
                                                            static_array<unsigned char,5> v1209;
                                                            int v1211; int v1212; int v1213; unsigned char v1214;
                                                            Tuple22 tmp78 = Tuple22{0, 0, 0, 12u};
                                                            v1211 = tmp78.v0; v1212 = tmp78.v1; v1213 = tmp78.v2; v1214 = tmp78.v3;
                                                            while (while_method_16(v1211)){
                                                                bool v1216;
                                                                v1216 = 0 <= v1211;
                                                                bool v1218;
                                                                if (v1216){
                                                                    bool v1217;
                                                                    v1217 = v1211 < 7;
                                                                    v1218 = v1217;
                                                                } else {
                                                                    v1218 = false;
                                                                }
                                                                bool v1219;
                                                                v1219 = v1218 == false;
                                                                if (v1219){
                                                                    assert("Index must be in range." && v1218);
                                                                } else {
                                                                }
                                                                unsigned char v1221;
                                                                v1221 = v129[v1211];
                                                                bool v1223;
                                                                v1223 = v1213 < 2;
                                                                int v1231; int v1232; unsigned char v1233;
                                                                if (v1223){
                                                                    unsigned char v1224;
                                                                    v1224 = v1221 / 4u;
                                                                    bool v1225;
                                                                    v1225 = v1214 == v1224;
                                                                    int v1226;
                                                                    if (v1225){
                                                                        v1226 = v1213;
                                                                    } else {
                                                                        v1226 = 0;
                                                                    }
                                                                    v1207[v1226] = v1221;
                                                                    int v1227;
                                                                    v1227 = v1226 + 1;
                                                                    v1231 = v1211; v1232 = v1227; v1233 = v1224;
                                                                } else {
                                                                    break;
                                                                }
                                                                v1212 = v1231;
                                                                v1213 = v1232;
                                                                v1214 = v1233;
                                                                v1211 += 1 ;
                                                            }
                                                            bool v1234;
                                                            v1234 = v1213 == 2;
                                                            Union16 v1250;
                                                            if (v1234){
                                                                int v1235;
                                                                v1235 = 0;
                                                                while (while_method_2(v1235)){
                                                                    int v1237;
                                                                    v1237 = v1212 + -1;
                                                                    bool v1238;
                                                                    v1238 = v1235 < v1237;
                                                                    int v1239;
                                                                    if (v1238){
                                                                        v1239 = 0;
                                                                    } else {
                                                                        v1239 = 2;
                                                                    }
                                                                    int v1240;
                                                                    v1240 = v1239 + v1235;
                                                                    bool v1241;
                                                                    v1241 = 0 <= v1240;
                                                                    bool v1243;
                                                                    if (v1241){
                                                                        bool v1242;
                                                                        v1242 = v1240 < 7;
                                                                        v1243 = v1242;
                                                                    } else {
                                                                        v1243 = false;
                                                                    }
                                                                    bool v1244;
                                                                    v1244 = v1243 == false;
                                                                    if (v1244){
                                                                        assert("Index must be in range." && v1243);
                                                                    } else {
                                                                    }
                                                                    unsigned char v1246;
                                                                    v1246 = v129[v1240];
                                                                    v1209[v1235] = v1246;
                                                                    v1235 += 1 ;
                                                                }
                                                                v1250 = Union16{Union16_1{v1207, v1209}};
                                                            } else {
                                                                v1250 = Union16{Union16_0{}};
                                                            }
                                                            Union12 v1288;
                                                            switch (v1250.tag) {
                                                                case 0: { // None
                                                                    v1288 = Union12{Union12_0{}};
                                                                    break;
                                                                }
                                                                case 1: { // Some
                                                                    static_array<unsigned char,2> v1251 = v1250.case1.v0; static_array<unsigned char,5> v1252 = v1250.case1.v1;
                                                                    static_array<unsigned char,3> v1253;
                                                                    int v1255;
                                                                    v1255 = 0;
                                                                    while (while_method_1(v1255)){
                                                                        bool v1257;
                                                                        v1257 = 0 <= v1255;
                                                                        bool v1259;
                                                                        if (v1257){
                                                                            bool v1258;
                                                                            v1258 = v1255 < 5;
                                                                            v1259 = v1258;
                                                                        } else {
                                                                            v1259 = false;
                                                                        }
                                                                        bool v1260;
                                                                        v1260 = v1259 == false;
                                                                        if (v1260){
                                                                            assert("Index must be in range." && v1259);
                                                                        } else {
                                                                        }
                                                                        unsigned char v1262;
                                                                        v1262 = v1252[v1255];
                                                                        v1253[v1255] = v1262;
                                                                        v1255 += 1 ;
                                                                    }
                                                                    static_array<unsigned char,5> v1264;
                                                                    int v1266;
                                                                    v1266 = 0;
                                                                    while (while_method_0(v1266)){
                                                                        bool v1268;
                                                                        v1268 = 0 <= v1266;
                                                                        bool v1270;
                                                                        if (v1268){
                                                                            bool v1269;
                                                                            v1269 = v1266 < 2;
                                                                            v1270 = v1269;
                                                                        } else {
                                                                            v1270 = false;
                                                                        }
                                                                        bool v1271;
                                                                        v1271 = v1270 == false;
                                                                        if (v1271){
                                                                            assert("Index must be in range." && v1270);
                                                                        } else {
                                                                        }
                                                                        unsigned char v1273;
                                                                        v1273 = v1251[v1266];
                                                                        v1264[v1266] = v1273;
                                                                        v1266 += 1 ;
                                                                    }
                                                                    int v1275;
                                                                    v1275 = 0;
                                                                    while (while_method_1(v1275)){
                                                                        bool v1277;
                                                                        v1277 = 0 <= v1275;
                                                                        bool v1279;
                                                                        if (v1277){
                                                                            bool v1278;
                                                                            v1278 = v1275 < 3;
                                                                            v1279 = v1278;
                                                                        } else {
                                                                            v1279 = false;
                                                                        }
                                                                        bool v1280;
                                                                        v1280 = v1279 == false;
                                                                        if (v1280){
                                                                            assert("Index must be in range." && v1279);
                                                                        } else {
                                                                        }
                                                                        unsigned char v1282;
                                                                        v1282 = v1253[v1275];
                                                                        int v1284;
                                                                        v1284 = 2 + v1275;
                                                                        v1264[v1284] = v1282;
                                                                        v1275 += 1 ;
                                                                    }
                                                                    v1288 = Union12{Union12_1{v1264}};
                                                                    break;
                                                                }
                                                                default: {
                                                                    assert("Invalid tag." && false); __trap();
                                                                }
                                                            }
                                                            switch (v1288.tag) {
                                                                case 0: { // None
                                                                    static_array<unsigned char,5> v1290;
                                                                    int v1292;
                                                                    v1292 = 0;
                                                                    while (while_method_2(v1292)){
                                                                        bool v1294;
                                                                        v1294 = 0 <= v1292;
                                                                        bool v1296;
                                                                        if (v1294){
                                                                            bool v1295;
                                                                            v1295 = v1292 < 7;
                                                                            v1296 = v1295;
                                                                        } else {
                                                                            v1296 = false;
                                                                        }
                                                                        bool v1297;
                                                                        v1297 = v1296 == false;
                                                                        if (v1297){
                                                                            assert("Index must be in range." && v1296);
                                                                        } else {
                                                                        }
                                                                        unsigned char v1299;
                                                                        v1299 = v129[v1292];
                                                                        v1290[v1292] = v1299;
                                                                        v1292 += 1 ;
                                                                    }
                                                                    v1331 = v1290; v1332 = 0;
                                                                    break;
                                                                }
                                                                case 1: { // Some
                                                                    static_array<unsigned char,5> v1289 = v1288.case1.v0;
                                                                    v1331 = v1289; v1332 = 1;
                                                                    break;
                                                                }
                                                                default: {
                                                                    assert("Invalid tag." && false); __trap();
                                                                }
                                                            }
                                                            break;
                                                        }
                                                        case 1: { // Some
                                                            static_array<unsigned char,5> v1206 = v1205.case1.v0;
                                                            v1331 = v1206; v1332 = 2;
                                                            break;
                                                        }
                                                        default: {
                                                            assert("Invalid tag." && false); __trap();
                                                        }
                                                    }
                                                    break;
                                                }
                                                case 1: { // Some
                                                    static_array<unsigned char,5> v1064 = v1063.case1.v0;
                                                    v1331 = v1064; v1332 = 3;
                                                    break;
                                                }
                                                default: {
                                                    assert("Invalid tag." && false); __trap();
                                                }
                                            }
                                            break;
                                        }
                                        case 1: { // Some
                                            static_array<unsigned char,5> v981 = v980.case1.v0;
                                            v1331 = v981; v1332 = 4;
                                            break;
                                        }
                                        default: {
                                            assert("Invalid tag." && false); __trap();
                                        }
                                    }
                                    break;
                                }
                                case 1: { // Some
                                    static_array<unsigned char,5> v937 = v936.case1.v0;
                                    v1331 = v937; v1332 = 5;
                                    break;
                                }
                                default: {
                                    assert("Invalid tag." && false); __trap();
                                }
                            }
                            break;
                        }
                        case 1: { // Some
                            static_array<unsigned char,5> v737 = v736.case1.v0;
                            v1331 = v737; v1332 = 6;
                            break;
                        }
                        default: {
                            assert("Invalid tag." && false); __trap();
                        }
                    }
                    break;
                }
                case 1: { // Some
                    static_array<unsigned char,5> v616 = v615.case1.v0;
                    v1331 = v616; v1332 = 7;
                    break;
                }
                default: {
                    assert("Invalid tag." && false); __trap();
                }
            }
            break;
        }
        case 1: { // Some
            static_array<unsigned char,5> v533 = v532.case1.v0;
            v1331 = v533; v1332 = 8;
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
    return Tuple0{v1331, v1332};
}
__device__ void play_loop_31(unsigned char * v0, unsigned char * v1, unsigned char * v2, StackMut0 & v3, Union4 v4){
    static_array_list<Union6,128> & v5 = v3.v2;
    unsigned long long & v6 = v3.v0;
    Union3 v7;
    v7 = Union3{Union3_1{v4}};
    Union3 v8;
    v8 = v7;
    while (while_method_5(v8)){
        Union3 v2359;
        switch (v8.tag) {
            case 0: { // None
                v2359 = Union3{Union3_0{}};
                break;
            }
            case 1: { // Some
                Union4 v10 = v8.case1.v0;
                switch (v10.tag) {
                    case 0: { // G_Flop
                        int v2217 = v10.case0.v0; static_array<static_array<unsigned char,2>,2> v2218 = v10.case0.v1; static_array<int,2> v2219 = v10.case0.v2; int v2220 = v10.case0.v3; static_array<int,2> v2221 = v10.case0.v4; Union5 v2222 = v10.case0.v5;
                        curandStatePhilox4_32_10_t & v2223 = v3.v4;
                        curandStatePhilox4_32_10_t & v2224 = v2223;
                        static_array<unsigned char,3> v2225; unsigned long long v2226;
                        Tuple8 tmp18 = draw_cards_32(v2224, v6);
                        v2225 = tmp18.v0; v2226 = tmp18.v1;
                        v3.v0 = v2226;
                        static_array_list<unsigned char,5> v2227;
                        v2227 = get_community_cards_35(v2222, v2225);
                        Union6 v2228;
                        v2228 = Union6{Union6_0{v2227}};
                        v5.push(v2228);
                        Union5 v2231;
                        switch (v2222.tag) {
                            case 1: { // Preflop
                                v2231 = Union5{Union5_0{v2225}};
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in flop.");
                                __trap();
                            }
                        }
                        int v2232;
                        v2232 = 2;
                        int v2233;
                        v2233 = 0;
                        Union4 v2234;
                        v2234 = try_round_36(v2232, v2218, v2219, v2233, v2221, v2231);
                        v2359 = Union3{Union3_1{v2234}};
                        break;
                    }
                    case 1: { // G_Fold
                        int v11 = v10.case1.v0; static_array<static_array<unsigned char,2>,2> v12 = v10.case1.v1; static_array<int,2> v13 = v10.case1.v2; int v14 = v10.case1.v3; static_array<int,2> v15 = v10.case1.v4; Union5 v16 = v10.case1.v5;
                        int v17;
                        v17 = v14 % 2;
                        bool v18;
                        v18 = 0 <= v17;
                        bool v20;
                        if (v18){
                            bool v19;
                            v19 = v17 < 2;
                            v20 = v19;
                        } else {
                            v20 = false;
                        }
                        bool v21;
                        v21 = v20 == false;
                        if (v21){
                            assert("Index must be in range." && v20);
                        } else {
                        }
                        int v23;
                        v23 = v13[v17];
                        int v25;
                        v25 = v14 + 1;
                        int v26;
                        v26 = v25 % 2;
                        Union6 v27;
                        v27 = Union6{Union6_1{v23, v26}};
                        v5.push(v27);
                        Union7 v28;
                        v28 = Union7{Union7_1{v11, v12, v13, v14, v15, v16}};
                        v3.v5 = v28;
                        Union3 v29;
                        v29 = Union3{Union3_0{}};
                        v3.v1 = v29;
                        v2359 = Union3{Union3_0{}};
                        break;
                    }
                    case 2: { // G_Preflop
                        curandStatePhilox4_32_10_t & v2318 = v3.v4;
                        curandStatePhilox4_32_10_t & v2319 = v2318;
                        static_array<unsigned char,2> v2320; unsigned long long v2321;
                        Tuple11 tmp23 = draw_cards_39(v2319, v6);
                        v2320 = tmp23.v0; v2321 = tmp23.v1;
                        v3.v0 = v2321;
                        curandStatePhilox4_32_10_t & v2322 = v3.v4;
                        curandStatePhilox4_32_10_t & v2323 = v2322;
                        static_array<unsigned char,2> v2324; unsigned long long v2325;
                        Tuple11 tmp24 = draw_cards_39(v2323, v6);
                        v2324 = tmp24.v0; v2325 = tmp24.v1;
                        v3.v0 = v2325;
                        Union6 v2326;
                        v2326 = Union6{Union6_3{0, v2320}};
                        v5.push(v2326);
                        Union6 v2327;
                        v2327 = Union6{Union6_3{1, v2324}};
                        v5.push(v2327);
                        static_array<static_array<unsigned char,2>,2> v2328;
                        v2328[0] = v2320;
                        v2328[1] = v2324;
                        static_array<int,2> v2330;
                        v2330[0] = 2;
                        v2330[1] = 1;
                        static_array<int,2> v2332;
                        int v2334;
                        v2334 = 0;
                        while (while_method_0(v2334)){
                            bool v2336;
                            v2336 = 0 <= v2334;
                            bool v2338;
                            if (v2336){
                                bool v2337;
                                v2337 = v2334 < 2;
                                v2338 = v2337;
                            } else {
                                v2338 = false;
                            }
                            bool v2339;
                            v2339 = v2338 == false;
                            if (v2339){
                                assert("Index must be in range." && v2338);
                            } else {
                            }
                            int v2341;
                            v2341 = v2330[v2334];
                            int v2343;
                            v2343 = 100 - v2341;
                            v2332[v2334] = v2343;
                            v2334 += 1 ;
                        }
                        int v2344;
                        v2344 = 2;
                        int v2345;
                        v2345 = 0;
                        Union5 v2346;
                        v2346 = Union5{Union5_1{}};
                        Union4 v2347;
                        v2347 = try_round_36(v2344, v2328, v2330, v2345, v2332, v2346);
                        v2359 = Union3{Union3_1{v2347}};
                        break;
                    }
                    case 3: { // G_River
                        int v2277 = v10.case3.v0; static_array<static_array<unsigned char,2>,2> v2278 = v10.case3.v1; static_array<int,2> v2279 = v10.case3.v2; int v2280 = v10.case3.v3; static_array<int,2> v2281 = v10.case3.v4; Union5 v2282 = v10.case3.v5;
                        curandStatePhilox4_32_10_t & v2283 = v3.v4;
                        curandStatePhilox4_32_10_t & v2284 = v2283;
                        static_array<unsigned char,1> v2285; unsigned long long v2286;
                        Tuple12 tmp27 = draw_cards_40(v2284, v6);
                        v2285 = tmp27.v0; v2286 = tmp27.v1;
                        v3.v0 = v2286;
                        static_array_list<unsigned char,5> v2287;
                        v2287 = get_community_cards_41(v2282, v2285);
                        Union6 v2288;
                        v2288 = Union6{Union6_0{v2287}};
                        v5.push(v2288);
                        Union5 v2313;
                        switch (v2282.tag) {
                            case 3: { // Turn
                                static_array<unsigned char,4> v2289 = v2282.case3.v0;
                                static_array<unsigned char,5> v2290;
                                int v2292;
                                v2292 = 0;
                                while (while_method_3(v2292)){
                                    bool v2294;
                                    v2294 = 0 <= v2292;
                                    bool v2296;
                                    if (v2294){
                                        bool v2295;
                                        v2295 = v2292 < 4;
                                        v2296 = v2295;
                                    } else {
                                        v2296 = false;
                                    }
                                    bool v2297;
                                    v2297 = v2296 == false;
                                    if (v2297){
                                        assert("Index must be in range." && v2296);
                                    } else {
                                    }
                                    unsigned char v2299;
                                    v2299 = v2289[v2292];
                                    v2290[v2292] = v2299;
                                    v2292 += 1 ;
                                }
                                int v2301;
                                v2301 = 0;
                                while (while_method_6(v2301)){
                                    bool v2303;
                                    v2303 = 0 <= v2301;
                                    bool v2305;
                                    if (v2303){
                                        bool v2304;
                                        v2304 = v2301 < 1;
                                        v2305 = v2304;
                                    } else {
                                        v2305 = false;
                                    }
                                    bool v2306;
                                    v2306 = v2305 == false;
                                    if (v2306){
                                        assert("Index must be in range." && v2305);
                                    } else {
                                    }
                                    unsigned char v2308;
                                    v2308 = v2285[v2301];
                                    int v2310;
                                    v2310 = 4 + v2301;
                                    v2290[v2310] = v2308;
                                    v2301 += 1 ;
                                }
                                v2313 = Union5{Union5_2{v2290}};
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in river.");
                                __trap();
                            }
                        }
                        int v2314;
                        v2314 = 2;
                        int v2315;
                        v2315 = 0;
                        Union4 v2316;
                        v2316 = try_round_36(v2314, v2278, v2279, v2315, v2281, v2313);
                        v2359 = Union3{Union3_1{v2316}};
                        break;
                    }
                    case 4: { // G_Round
                        int v145 = v10.case4.v0; static_array<static_array<unsigned char,2>,2> v146 = v10.case4.v1; static_array<int,2> v147 = v10.case4.v2; int v148 = v10.case4.v3; static_array<int,2> v149 = v10.case4.v4; Union5 v150 = v10.case4.v5;
                        int v151;
                        v151 = v148 % 2;
                        static_array<Union2,2> & v152 = v3.v3;
                        bool v153;
                        v153 = 0 <= v151;
                        bool v155;
                        if (v153){
                            bool v154;
                            v154 = v151 < 2;
                            v155 = v154;
                        } else {
                            v155 = false;
                        }
                        bool v156;
                        v156 = v155 == false;
                        if (v156){
                            assert("Index must be in range." && v155);
                        } else {
                        }
                        Union2 v158;
                        v158 = v152[v151];
                        switch (v158.tag) {
                            case 0: { // CallingMachine
                                Union1 v1793;
                                v1793 = Union1{Union1_1{}};
                                Union6 v1794;
                                v1794 = Union6{Union6_2{v151, v1793}};
                                v5.push(v1794);
                                static_array<int,2> v1795;
                                int v1797;
                                v1797 = 0;
                                while (while_method_0(v1797)){
                                    bool v1799;
                                    v1799 = 0 <= v1797;
                                    bool v1801;
                                    if (v1799){
                                        bool v1800;
                                        v1800 = v1797 < 2;
                                        v1801 = v1800;
                                    } else {
                                        v1801 = false;
                                    }
                                    bool v1802;
                                    v1802 = v1801 == false;
                                    if (v1802){
                                        assert("Index must be in range." && v1801);
                                    } else {
                                    }
                                    int v1804;
                                    v1804 = v149[v1797];
                                    bool v1807;
                                    if (v1799){
                                        bool v1806;
                                        v1806 = v1797 < 2;
                                        v1807 = v1806;
                                    } else {
                                        v1807 = false;
                                    }
                                    bool v1808;
                                    v1808 = v1807 == false;
                                    if (v1808){
                                        assert("Index must be in range." && v1807);
                                    } else {
                                    }
                                    int v1810;
                                    v1810 = v147[v1797];
                                    int v1812;
                                    v1812 = v1804 + v1810;
                                    v1795[v1797] = v1812;
                                    v1797 += 1 ;
                                }
                                int v1813;
                                v1813 = v147[0];
                                int v1815; int v1816;
                                Tuple4 tmp28 = Tuple4{1, v1813};
                                v1815 = tmp28.v0; v1816 = tmp28.v1;
                                while (while_method_0(v1815)){
                                    bool v1818;
                                    v1818 = 0 <= v1815;
                                    bool v1820;
                                    if (v1818){
                                        bool v1819;
                                        v1819 = v1815 < 2;
                                        v1820 = v1819;
                                    } else {
                                        v1820 = false;
                                    }
                                    bool v1821;
                                    v1821 = v1820 == false;
                                    if (v1821){
                                        assert("Index must be in range." && v1820);
                                    } else {
                                    }
                                    int v1823;
                                    v1823 = v147[v1815];
                                    bool v1825;
                                    v1825 = v1816 >= v1823;
                                    int v1826;
                                    if (v1825){
                                        v1826 = v1816;
                                    } else {
                                        v1826 = v1823;
                                    }
                                    v1816 = v1826;
                                    v1815 += 1 ;
                                }
                                bool v1828;
                                if (v153){
                                    bool v1827;
                                    v1827 = v151 < 2;
                                    v1828 = v1827;
                                } else {
                                    v1828 = false;
                                }
                                bool v1829;
                                v1829 = v1828 == false;
                                if (v1829){
                                    assert("Index must be in range." && v1828);
                                } else {
                                }
                                int v1831;
                                v1831 = v1795[v151];
                                bool v1833;
                                v1833 = v1816 < v1831;
                                int v1834;
                                if (v1833){
                                    v1834 = v1816;
                                } else {
                                    v1834 = v1831;
                                }
                                static_array<int,2> v1835;
                                int v1837;
                                v1837 = 0;
                                while (while_method_0(v1837)){
                                    bool v1839;
                                    v1839 = 0 <= v1837;
                                    bool v1841;
                                    if (v1839){
                                        bool v1840;
                                        v1840 = v1837 < 2;
                                        v1841 = v1840;
                                    } else {
                                        v1841 = false;
                                    }
                                    bool v1842;
                                    v1842 = v1841 == false;
                                    if (v1842){
                                        assert("Index must be in range." && v1841);
                                    } else {
                                    }
                                    int v1844;
                                    v1844 = v147[v1837];
                                    bool v1846;
                                    v1846 = v151 == v1837;
                                    int v1847;
                                    if (v1846){
                                        v1847 = v1834;
                                    } else {
                                        v1847 = v1844;
                                    }
                                    v1835[v1837] = v1847;
                                    v1837 += 1 ;
                                }
                                static_array<int,2> v1848;
                                int v1850;
                                v1850 = 0;
                                while (while_method_0(v1850)){
                                    bool v1852;
                                    v1852 = 0 <= v1850;
                                    bool v1854;
                                    if (v1852){
                                        bool v1853;
                                        v1853 = v1850 < 2;
                                        v1854 = v1853;
                                    } else {
                                        v1854 = false;
                                    }
                                    bool v1855;
                                    v1855 = v1854 == false;
                                    if (v1855){
                                        assert("Index must be in range." && v1854);
                                    } else {
                                    }
                                    int v1857;
                                    v1857 = v1795[v1850];
                                    bool v1860;
                                    if (v1852){
                                        bool v1859;
                                        v1859 = v1850 < 2;
                                        v1860 = v1859;
                                    } else {
                                        v1860 = false;
                                    }
                                    bool v1861;
                                    v1861 = v1860 == false;
                                    if (v1861){
                                        assert("Index must be in range." && v1860);
                                    } else {
                                    }
                                    int v1863;
                                    v1863 = v1835[v1850];
                                    int v1865;
                                    v1865 = v1857 - v1863;
                                    v1848[v1850] = v1865;
                                    v1850 += 1 ;
                                }
                                bool v1866;
                                v1866 = v151 < 2;
                                Union4 v1870;
                                if (v1866){
                                    int v1867;
                                    v1867 = v148 + 1;
                                    v1870 = try_round_36(v145, v146, v1835, v1867, v1848, v150);
                                } else {
                                    v1870 = go_next_street_38(v145, v146, v1835, v148, v1848, v150);
                                }
                                v2359 = Union3{Union3_1{v1870}};
                                break;
                            }
                            case 1: { // Computer
                                static_array_list<Union6,128> & v160 = v3.v2;
                                curandStatePhilox4_32_10_t & v161 = v3.v4;
                                curandStatePhilox4_32_10_t & v162 = v161;
                                float * v163;
                                v163 = reinterpret_cast<float *>(&v1[51904512ull]);
                                float * v165;
                                v165 = reinterpret_cast<float *>(&v1[0ull]);
                                float * v167;
                                v167 = reinterpret_cast<float *>(&v1[0ull]);
                                int v169;
                                v169 = blockIdx.x;
                                assert("Tensor range check" && 0 <= v169 && v169 < 24);
                                int v170;
                                v170 = 524288 * v169;
                                int v171;
                                v171 = threadIdx.x;
                                int v172;
                                v172 = v171;
                                while (while_method_7(v172)){
                                    bool v174;
                                    v174 = 0 <= v172;
                                    bool v175;
                                    v175 = v174 == false;
                                    if (v175){
                                        assert("The index needs to be zero or positive." && v174);
                                    } else {
                                    }
                                    int v177;
                                    v177 = v172 % 2048;
                                    int v178;
                                    v178 = v172 / 2048;
                                    bool v179;
                                    v179 = v178 < 256;
                                    bool v180;
                                    v180 = v179 == false;
                                    if (v180){
                                        assert("The last element of the projection dimensions needs to be greater than the index remainder." && v179);
                                    } else {
                                    }
                                    assert("Tensor range check" && 0 <= v178 && v178 < 256);
                                    assert("Tensor range check" && 0 <= v177 && v177 < 2048);
                                    int v182;
                                    v182 = v177 + v170;
                                    int v183;
                                    v183 = 2048 * v178;
                                    int v184;
                                    v184 = v183 + v182;
                                    v167[v184] = 0.0f;
                                    v172 += 256 ;
                                }
                                __syncthreads();
                                int v185;
                                v185 = threadIdx.x;
                                assert("Tensor range check" && 0 <= v185 && v185 < 256);
                                int v186;
                                v186 = 2048 * v185;
                                int v187;
                                v187 = v186 + v170;
                                int v188;
                                v188 = v160.length;
                                bool v189;
                                v189 = 128 >= v188;
                                bool v190;
                                v190 = v189 == false;
                                if (v190){
                                    assert("The type level dimension has to equal the value passed at runtime into create." && v189);
                                } else {
                                }
                                static_array_list<Union8,128> v192;
                                v192 = static_array_list<Union8,128>{};
                                v192.unsafe_set_length(v188);
                                int v194;
                                v194 = 0;
                                while (while_method_4(v188, v194)){
                                    Union6 v196;
                                    v196 = v160[v194];
                                    Union8 v202;
                                    switch (v196.tag) {
                                        case 2: { // PlayerAction
                                            int v198 = v196.case2.v0; Union1 v199 = v196.case2.v1;
                                            v202 = Union8{Union8_1{v199}};
                                            break;
                                        }
                                        default: {
                                            v202 = Union8{Union8_0{}};
                                        }
                                    }
                                    v192[v194] = v202;
                                    v194 += 1 ;
                                }
                                static_array<int,2> v203;
                                int v205;
                                v205 = 0;
                                while (while_method_0(v205)){
                                    int v207;
                                    v207 = v205 + v148;
                                    int v208;
                                    v208 = v207 % 2;
                                    bool v209;
                                    v209 = 0 <= v208;
                                    bool v211;
                                    if (v209){
                                        bool v210;
                                        v210 = v208 < 2;
                                        v211 = v210;
                                    } else {
                                        v211 = false;
                                    }
                                    bool v212;
                                    v212 = v211 == false;
                                    if (v212){
                                        assert("Index must be in range." && v211);
                                    } else {
                                    }
                                    int v214;
                                    v214 = v147[v208];
                                    v203[v205] = v214;
                                    v205 += 1 ;
                                }
                                static_array<int,2> v216;
                                int v218;
                                v218 = 0;
                                while (while_method_0(v218)){
                                    int v220;
                                    v220 = v218 + v148;
                                    int v221;
                                    v221 = v220 % 2;
                                    bool v222;
                                    v222 = 0 <= v221;
                                    bool v224;
                                    if (v222){
                                        bool v223;
                                        v223 = v221 < 2;
                                        v224 = v223;
                                    } else {
                                        v224 = false;
                                    }
                                    bool v225;
                                    v225 = v224 == false;
                                    if (v225){
                                        assert("Index must be in range." && v224);
                                    } else {
                                    }
                                    int v227;
                                    v227 = v149[v221];
                                    v216[v218] = v227;
                                    v218 += 1 ;
                                }
                                bool v230;
                                if (v153){
                                    bool v229;
                                    v229 = v151 < 2;
                                    v230 = v229;
                                } else {
                                    v230 = false;
                                }
                                bool v231;
                                v231 = v230 == false;
                                if (v231){
                                    assert("Index must be in range." && v230);
                                } else {
                                }
                                static_array<unsigned char,2> v233;
                                v233 = v146[v151];
                                static_array_list<unsigned char,5> v235;
                                v235 = static_array_list<unsigned char,5>{};
                                switch (v150.tag) {
                                    case 0: { // Flop
                                        static_array<unsigned char,3> v237 = v150.case0.v0;
                                        int v238;
                                        v238 = 0;
                                        while (while_method_1(v238)){
                                            bool v240;
                                            v240 = 0 <= v238;
                                            bool v242;
                                            if (v240){
                                                bool v241;
                                                v241 = v238 < 3;
                                                v242 = v241;
                                            } else {
                                                v242 = false;
                                            }
                                            bool v243;
                                            v243 = v242 == false;
                                            if (v243){
                                                assert("Index must be in range." && v242);
                                            } else {
                                            }
                                            unsigned char v245;
                                            v245 = v237[v238];
                                            v235.push(v245);
                                            v238 += 1 ;
                                        }
                                        break;
                                    }
                                    case 1: { // Preflop
                                        break;
                                    }
                                    case 2: { // River
                                        static_array<unsigned char,5> v257 = v150.case2.v0;
                                        int v258;
                                        v258 = 0;
                                        while (while_method_2(v258)){
                                            bool v260;
                                            v260 = 0 <= v258;
                                            bool v262;
                                            if (v260){
                                                bool v261;
                                                v261 = v258 < 5;
                                                v262 = v261;
                                            } else {
                                                v262 = false;
                                            }
                                            bool v263;
                                            v263 = v262 == false;
                                            if (v263){
                                                assert("Index must be in range." && v262);
                                            } else {
                                            }
                                            unsigned char v265;
                                            v265 = v257[v258];
                                            v235.push(v265);
                                            v258 += 1 ;
                                        }
                                        break;
                                    }
                                    case 3: { // Turn
                                        static_array<unsigned char,4> v247 = v150.case3.v0;
                                        int v248;
                                        v248 = 0;
                                        while (while_method_3(v248)){
                                            bool v250;
                                            v250 = 0 <= v248;
                                            bool v252;
                                            if (v250){
                                                bool v251;
                                                v251 = v248 < 4;
                                                v252 = v251;
                                            } else {
                                                v252 = false;
                                            }
                                            bool v253;
                                            v253 = v252 == false;
                                            if (v253){
                                                assert("Index must be in range." && v252);
                                            } else {
                                            }
                                            unsigned char v255;
                                            v255 = v247[v248];
                                            v235.push(v255);
                                            v248 += 1 ;
                                        }
                                        break;
                                    }
                                    default: {
                                        assert("Invalid tag." && false); __trap();
                                    }
                                }
                                float * v267;
                                v267 = v167+v187;
                                int v269;
                                v269 = v192.length;
                                bool v270;
                                v270 = v269 == 0;
                                if (v270){
                                    v267[0] = 1.0f;
                                } else {
                                }
                                int v271;
                                v271 = v192.length;
                                int v272;
                                v272 = 0;
                                while (while_method_4(v271, v272)){
                                    Union8 v274;
                                    v274 = v192[v272];
                                    int v276;
                                    v276 = v272 * 14;
                                    int v277;
                                    v277 = 1 + v276;
                                    switch (v274.tag) {
                                        case 0: { // None
                                            v267[v277] = 1.0f;
                                            break;
                                        }
                                        case 1: { // Some
                                            Union1 v278 = v274.case1.v0;
                                            int v279;
                                            v279 = v277 + 1;
                                            switch (v278.tag) {
                                                case 0: { // A_All_In
                                                    v267[v279] = 1.0f;
                                                    break;
                                                }
                                                case 1: { // A_Call
                                                    int v280;
                                                    v280 = v279 + 1;
                                                    v267[v280] = 1.0f;
                                                    break;
                                                }
                                                case 2: { // A_Fold
                                                    int v281;
                                                    v281 = v279 + 2;
                                                    v267[v281] = 1.0f;
                                                    break;
                                                }
                                                case 3: { // A_Raise
                                                    int v282 = v278.case3.v0;
                                                    int v283;
                                                    v283 = v279 + 3;
                                                    bool v284;
                                                    v284 = 1 <= v282;
                                                    bool v286;
                                                    if (v284){
                                                        bool v285;
                                                        v285 = v282 < 1023;
                                                        v286 = v285;
                                                    } else {
                                                        v286 = false;
                                                    }
                                                    bool v287;
                                                    v287 = v286 == false;
                                                    if (v287){
                                                        assert("Pickle failure. The input is out of the bounds of the given range." && v286);
                                                    } else {
                                                    }
                                                    int v289;
                                                    v289 = v282 - 1;
                                                    unsigned int v290;
                                                    v290 = (unsigned int)v289;
                                                    method_42(v290, v267, v283);
                                                    break;
                                                }
                                                default: {
                                                    assert("Invalid tag." && false); __trap();
                                                }
                                            }
                                            break;
                                        }
                                        default: {
                                            assert("Invalid tag." && false); __trap();
                                        }
                                    }
                                    v272 += 1 ;
                                }
                                int v291;
                                v291 = 0;
                                while (while_method_0(v291)){
                                    // 222;
                                    bool v293;
                                    v293 = 0 <= v291;
                                    bool v295;
                                    if (v293){
                                        bool v294;
                                        v294 = v291 < 2;
                                        v295 = v294;
                                    } else {
                                        v295 = false;
                                    }
                                    bool v296;
                                    v296 = v295 == false;
                                    if (v296){
                                        assert("Index must be in range." && v295);
                                    } else {
                                    }
                                    int v298;
                                    v298 = v203[v291];
                                    int v300;
                                    v300 = v291 * 11;
                                    int v301;
                                    v301 = 1794 + v300;
                                    bool v302;
                                    v302 = 0 <= v298;
                                    bool v304;
                                    if (v302){
                                        bool v303;
                                        v303 = v298 < 1023;
                                        v304 = v303;
                                    } else {
                                        v304 = false;
                                    }
                                    bool v305;
                                    v305 = v304 == false;
                                    if (v305){
                                        assert("Pickle failure. The input is out of the bounds of the given range." && v304);
                                    } else {
                                    }
                                    unsigned int v307;
                                    v307 = (unsigned int)v298;
                                    method_43(v307, v267, v301);
                                    v291 += 1 ;
                                }
                                int v308;
                                v308 = 0;
                                while (while_method_0(v308)){
                                    // 222;
                                    bool v310;
                                    v310 = 0 <= v308;
                                    bool v312;
                                    if (v310){
                                        bool v311;
                                        v311 = v308 < 2;
                                        v312 = v311;
                                    } else {
                                        v312 = false;
                                    }
                                    bool v313;
                                    v313 = v312 == false;
                                    if (v313){
                                        assert("Index must be in range." && v312);
                                    } else {
                                    }
                                    int v315;
                                    v315 = v216[v308];
                                    int v317;
                                    v317 = v308 * 11;
                                    int v318;
                                    v318 = 1817 + v317;
                                    bool v319;
                                    v319 = 0 <= v315;
                                    bool v321;
                                    if (v319){
                                        bool v320;
                                        v320 = v315 < 1023;
                                        v321 = v320;
                                    } else {
                                        v321 = false;
                                    }
                                    bool v322;
                                    v322 = v321 == false;
                                    if (v322){
                                        assert("Pickle failure. The input is out of the bounds of the given range." && v321);
                                    } else {
                                    }
                                    unsigned int v324;
                                    v324 = (unsigned int)v315;
                                    method_43(v324, v267, v318);
                                    v308 += 1 ;
                                }
                                int v325;
                                v325 = 0;
                                while (while_method_0(v325)){
                                    // 222;
                                    bool v327;
                                    v327 = 0 <= v325;
                                    bool v329;
                                    if (v327){
                                        bool v328;
                                        v328 = v325 < 2;
                                        v329 = v328;
                                    } else {
                                        v329 = false;
                                    }
                                    bool v330;
                                    v330 = v329 == false;
                                    if (v330){
                                        assert("Index must be in range." && v329);
                                    } else {
                                    }
                                    unsigned char v332;
                                    v332 = v233[v325];
                                    int v334;
                                    v334 = v325 * 17;
                                    int v335;
                                    v335 = 1840 + v334;
                                    unsigned char v336;
                                    v336 = v332 % 4u;
                                    int v337;
                                    v337 = (int)v336;
                                    unsigned char v338;
                                    v338 = v332 / 4u;
                                    int v339;
                                    v339 = (int)v338;
                                    unsigned int v340;
                                    v340 = (unsigned int)v337;
                                    int v341;
                                    v341 = (int)v340;
                                    bool v342;
                                    v342 = v341 < 4;
                                    bool v343;
                                    v343 = v342 == false;
                                    if (v343){
                                        assert("Pickle failure. Int value out of bounds." && v342);
                                    } else {
                                    }
                                    int v345;
                                    v345 = v335 + v341;
                                    v267[v345] = 1.0f;
                                    int v346;
                                    v346 = v335 + 4;
                                    unsigned int v347;
                                    v347 = (unsigned int)v339;
                                    int v348;
                                    v348 = (int)v347;
                                    bool v349;
                                    v349 = v348 < 13;
                                    bool v350;
                                    v350 = v349 == false;
                                    if (v350){
                                        assert("Pickle failure. Int value out of bounds." && v349);
                                    } else {
                                    }
                                    int v352;
                                    v352 = v346 + v348;
                                    v267[v352] = 1.0f;
                                    v325 += 1 ;
                                }
                                int v353;
                                v353 = v235.length;
                                bool v354;
                                v354 = v353 == 0;
                                if (v354){
                                    v267[1874] = 1.0f;
                                } else {
                                }
                                int v355;
                                v355 = v235.length;
                                int v356;
                                v356 = 0;
                                while (while_method_4(v355, v356)){
                                    unsigned char v358;
                                    v358 = v235[v356];
                                    int v360;
                                    v360 = v356 * 17;
                                    int v361;
                                    v361 = 1875 + v360;
                                    unsigned char v362;
                                    v362 = v358 % 4u;
                                    int v363;
                                    v363 = (int)v362;
                                    unsigned char v364;
                                    v364 = v358 / 4u;
                                    int v365;
                                    v365 = (int)v364;
                                    unsigned int v366;
                                    v366 = (unsigned int)v363;
                                    int v367;
                                    v367 = (int)v366;
                                    bool v368;
                                    v368 = v367 < 4;
                                    bool v369;
                                    v369 = v368 == false;
                                    if (v369){
                                        assert("Pickle failure. Int value out of bounds." && v368);
                                    } else {
                                    }
                                    int v371;
                                    v371 = v361 + v367;
                                    v267[v371] = 1.0f;
                                    int v372;
                                    v372 = v361 + 4;
                                    unsigned int v373;
                                    v373 = (unsigned int)v365;
                                    int v374;
                                    v374 = (int)v373;
                                    bool v375;
                                    v375 = v374 < 13;
                                    bool v376;
                                    v376 = v375 == false;
                                    if (v376){
                                        assert("Pickle failure. Int value out of bounds." && v375);
                                    } else {
                                    }
                                    int v378;
                                    v378 = v372 + v374;
                                    v267[v378] = 1.0f;
                                    v356 += 1 ;
                                }
                                __syncthreads();
                                int * v379;
                                v379 = reinterpret_cast<int *>(&v0[2097152ull]);
                                bool * v381;
                                v381 = reinterpret_cast<bool *>(&v0[2097168ull]);
                                float * v383;
                                v383 = reinterpret_cast<float *>(&v0[2097184ull]);
                                float * v385;
                                v385 = reinterpret_cast<float *>(&v0[2097200ull]);
                                int v387;
                                v387 = 0;
                                int v388;
                                v388 = 0;
                                while (while_method_3(v388)){
                                    assert("Tensor range check" && 0 <= v388 && v388 < 4);
                                    bool v390;
                                    v390 = v381[v388];
                                    int v392;
                                    if (v390){
                                        int v391;
                                        v391 = v387 + 1;
                                        v392 = v391;
                                    } else {
                                        v392 = v387;
                                    }
                                    v387 = v392;
                                    v388 += 1 ;
                                }
                                int v393;
                                v393 = 0;
                                int v394;
                                v394 = int_range_44(v387, v393, v162);
                                int v395;
                                v395 = 0;
                                int v396;
                                v396 = 0;
                                while (while_method_3(v396)){
                                    assert("Tensor range check" && 0 <= v396 && v396 < 4);
                                    bool v398;
                                    v398 = v381[v396];
                                    if (v398){
                                        bool v399;
                                        v399 = v394 == 0;
                                        if (v399){
                                            v395 = v396;
                                        } else {
                                        }
                                        int v400;
                                        v400 = v394 - 1;
                                        v394 = v400;
                                    } else {
                                    }
                                    v396 += 1 ;
                                }
                                extern __shared__ unsigned char v401[];
                                int * v402;
                                v402 = reinterpret_cast<int *>(&v401[0ull]);
                                int v404;
                                v404 = threadIdx.x;
                                bool v405;
                                v405 = v404 == 0;
                                if (v405){
                                    v402[0] = v395;
                                } else {
                                }
                                __syncthreads();
                                int v406;
                                v406 = v402[0];
                                __syncthreads();
                                float * v407;
                                v407 = reinterpret_cast<float *>(&v1[51904512ull]);
                                assert("Tensor range check" && 0 <= v406 && v406 < 4);
                                int v409;
                                v409 = 393216 * v406;
                                float * v410;
                                v410 = reinterpret_cast<float *>(&v1[0ull]);
                                float * v412;
                                v412 = reinterpret_cast<float *>(&v0[0ull]);
                                float * v414;
                                v414 = reinterpret_cast<float *>(&v2[0ull]);
                                assert("Tensor range check" && 0 <= v406 && v406 < 4);
                                int v416;
                                v416 = 131072 * v406;
                                float * v417;
                                v417 = reinterpret_cast<float *>(&v1[50331648ull]);
                                block_matmul_45(v417, v412, v416, v410);
                                block_row_map_46(v407, v409, v417);
                                int * v419;
                                v419 = reinterpret_cast<int *>(&v0[2097152ull]);
                                bool * v421;
                                v421 = reinterpret_cast<bool *>(&v0[2097168ull]);
                                float * v423;
                                v423 = reinterpret_cast<float *>(&v0[2097184ull]);
                                float * v425;
                                v425 = reinterpret_cast<float *>(&v0[2097200ull]);
                                double * v427;
                                v427 = reinterpret_cast<double *>(&v1[58195968ull]);
                                double * v429;
                                v429 = reinterpret_cast<double *>(&v1[58589184ull]);
                                __syncthreads();
                                float * v431;
                                v431 = reinterpret_cast<float *>(&v1[51904512ull]);
                                assert("Tensor range check" && 0 <= v406 && v406 < 4);
                                int v433;
                                v433 = blockIdx.x;
                                assert("Tensor range check" && 0 <= v433 && v433 < 24);
                                int v434;
                                v434 = 16384 * v433;
                                int v435;
                                v435 = v434 + v409;
                                int v436;
                                v436 = threadIdx.x;
                                assert("Tensor range check" && 0 <= v436 && v436 < 256);
                                int v437;
                                v437 = 64 * v436;
                                int v438;
                                v438 = v437 + v435;
                                float * v439;
                                v439 = v431+v438;
                                int v441;
                                v441 = sizeof(float *);
                                unsigned long long v442;
                                v442 = (unsigned long long)v441;
                                unsigned long long v443;
                                v443 = 256ull * v442;
                                unsigned long long v444;
                                v444 = v443 + 16ull;
                                unsigned long long v445;
                                v445 = v444 - 1ull;
                                unsigned long long v446;
                                v446 = v445 % 16ull;
                                unsigned long long v447;
                                v447 = v445 - v446;
                                unsigned long long v448;
                                v448 = v447 + 1024ull;
                                unsigned long long v449;
                                v449 = v448 + 16ull;
                                unsigned long long v450;
                                v450 = v449 - 1ull;
                                unsigned long long v451;
                                v451 = v450 % 16ull;
                                unsigned long long v452;
                                v452 = v450 - v451;
                                unsigned long long v453;
                                v453 = v452 + 1024ull;
                                bool v454;
                                v454 = v453 <= 98304ull;
                                bool v455;
                                v455 = v454 == false;
                                if (v455){
                                    assert("The dynamic shared memory is insufficient to allocate the tensor." && v454);
                                } else {
                                }
                                extern __shared__ unsigned char v457[];
                                bool v458;
                                v458 = v453 <= v453;
                                bool v459;
                                v459 = v458 == false;
                                if (v459){
                                    assert("The length of the partition has to be less than or equal to the length of the base array." && v458);
                                } else {
                                }
                                float * * v461;
                                v461 = reinterpret_cast<float * *>(&v457[0ull]);
                                float * v463;
                                v463 = reinterpret_cast<float *>(&v457[v447]);
                                int * v465;
                                v465 = reinterpret_cast<int *>(&v457[v452]);
                                int v467;
                                v467 = threadIdx.x;
                                assert("Tensor range check" && 0 <= v467 && v467 < 256);
                                v461[v467] = v439;
                                __syncthreads();
                                bool v468;
                                v468 = 0 <= v467;
                                bool v469;
                                v469 = v468 == false;
                                if (v469){
                                    assert("The index needs to be zero or positive." && v468);
                                } else {
                                }
                                int v471;
                                v471 = v467 % 16;
                                int v472;
                                v472 = v467 / 16;
                                bool v473;
                                v473 = v472 < 16;
                                bool v474;
                                v474 = v473 == false;
                                if (v474){
                                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v473);
                                } else {
                                }
                                assert("Tensor range check" && 0 <= v472 && v472 < 16);
                                int v476;
                                v476 = 0;
                                while (while_method_12(v476)){
                                    bool v478;
                                    v478 = 0 <= v472;
                                    bool v479;
                                    v479 = v478 && v473;
                                    bool v480;
                                    v480 = v479 == false;
                                    if (v480){
                                        assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v479);
                                    } else {
                                    }
                                    bool v482;
                                    v482 = 0 <= v476;
                                    bool v484;
                                    if (v482){
                                        bool v483;
                                        v483 = v476 < 16;
                                        v484 = v483;
                                    } else {
                                        v484 = false;
                                    }
                                    bool v485;
                                    v485 = v484 == false;
                                    if (v485){
                                        assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v484);
                                    } else {
                                    }
                                    int v487;
                                    v487 = v476 * 16;
                                    int v488;
                                    v488 = v487 + v472;
                                    assert("Tensor range check" && 0 <= v476 && v476 < 16);
                                    int v489;
                                    v489 = 16 * v476;
                                    int v490;
                                    v490 = v489 + v472;
                                    float * v491;
                                    v491 = v461[v490];
                                    int v492;
                                    v492 = blockIdx.x;
                                    int v493;
                                    v493 = v492 * 256;
                                    int v494;
                                    v494 = v493 + v488;
                                    assert("Tensor range check" && 0 <= v471 && v471 < 16);
                                    int v495;
                                    v495 = 4 * v471;
                                    float v496[4];
                                    int v497[4];
                                    int v498;
                                    v498 = 0;
                                    while (while_method_6(v498)){
                                        assert("Tensor range check" && 0 <= v498 && v498 < 1);
                                        int v500;
                                        v500 = 4 * v498;
                                        assert("Tensor range check" && 0 <= v498 && v498 < 1);
                                        int v501;
                                        v501 = 64 * v498;
                                        int v502;
                                        v502 = v501 + v495;
                                        int4* v503;
                                        v503 = reinterpret_cast<int4*>(v491 + v502);
                                        int4* v504;
                                        v504 = reinterpret_cast<int4*>(v496 + v500);
                                        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v503) % 16 == 0 && reinterpret_cast<unsigned long long>(v504) % 16 == 0);
                                        *v504 = *v503;
                                        v498 += 1 ;
                                    }
                                    int v505;
                                    v505 = 0;
                                    while (while_method_6(v505)){
                                        int v507;
                                        v507 = 0;
                                        while (while_method_3(v507)){
                                            bool v509;
                                            v509 = 0 <= v507;
                                            bool v511;
                                            if (v509){
                                                bool v510;
                                                v510 = v507 < 4;
                                                v511 = v510;
                                            } else {
                                                v511 = false;
                                            }
                                            bool v512;
                                            v512 = v511 == false;
                                            if (v512){
                                                assert("The indices should be inside the range of the dimension." && v511);
                                            } else {
                                            }
                                            bool v514;
                                            v514 = 0 <= v471;
                                            bool v516;
                                            if (v514){
                                                bool v515;
                                                v515 = v471 < 16;
                                                v516 = v515;
                                            } else {
                                                v516 = false;
                                            }
                                            bool v517;
                                            v517 = v516 == false;
                                            if (v517){
                                                assert("The indices should be inside the range of the dimension." && v516);
                                            } else {
                                            }
                                            int v519;
                                            v519 = v471 * 4;
                                            int v520;
                                            v520 = v507 + v519;
                                            bool v521;
                                            v521 = 0 <= v505;
                                            bool v523;
                                            if (v521){
                                                bool v522;
                                                v522 = v505 < 1;
                                                v523 = v522;
                                            } else {
                                                v523 = false;
                                            }
                                            bool v524;
                                            v524 = v523 == false;
                                            if (v524){
                                                assert("The indices should be inside the range of the dimension." && v523);
                                            } else {
                                            }
                                            int v526;
                                            v526 = v505 * 64;
                                            int v527;
                                            v527 = v520 + v526;
                                            assert("Tensor range check" && 0 <= v505 && v505 < 1);
                                            assert("Tensor range check" && 0 <= v507 && v507 < 4);
                                            int v528;
                                            v528 = 4 * v505;
                                            int v529;
                                            v529 = v528 + v507;
                                            v497[v529] = v527;
                                            v507 += 1 ;
                                        }
                                        v505 += 1 ;
                                    }
                                    float v530[4];
                                    float v531;
                                    v531 = 0.0f;
                                    int v532;
                                    v532 = 0;
                                    while (while_method_6(v532)){
                                        assert("Tensor range check" && 0 <= v532 && v532 < 1);
                                        int v534;
                                        v534 = 4 * v532;
                                        assert("Tensor range check" && 0 <= v532 && v532 < 1);
                                        float v535;
                                        v535 = 0.0f;
                                        int v536;
                                        v536 = 0;
                                        while (while_method_3(v536)){
                                            assert("Tensor range check" && 0 <= v536 && v536 < 4);
                                            int v538;
                                            v538 = v536 + v534;
                                            float v539;
                                            v539 = v496[v538];
                                            float v540;
                                            v540 = v535 + v539;
                                            v535 = v540;
                                            v536 += 1 ;
                                        }
                                        auto v541 = cooperative_groups::coalesced_threads();
                                        int v542;
                                        v542 = threadIdx.x;
                                        int v543;
                                        v543 = v542 / 16;
                                        auto v544 = cooperative_groups::labeled_partition(v541,v543);
                                        Closure2 v545{};
                                        float v546;
                                        v546 = cooperative_groups::inclusive_scan(v544, v535, v545);
                                        float v547;
                                        v547 = v544.shfl_up(v546,1);
                                        bool v548;
                                        v548 = v544.thread_rank() == 0;
                                        float v549;
                                        if (v548){
                                            v549 = 0.0f;
                                        } else {
                                            v549 = v547;
                                        }
                                        float v550;
                                        v550 = v544.shfl(v546,v544.num_threads()-1);
                                        float v551;
                                        v551 = v531 + v549;
                                        float v552;
                                        v552 = v551;
                                        int v553;
                                        v553 = 0;
                                        while (while_method_3(v553)){
                                            assert("Tensor range check" && 0 <= v553 && v553 < 4);
                                            int v555;
                                            v555 = v553 + v534;
                                            float v556;
                                            v556 = v496[v555];
                                            float v557;
                                            v557 = v552 + v556;
                                            assert("Tensor range check" && 0 <= v553 && v553 < 4);
                                            v530[v555] = v557;
                                            v552 = v557;
                                            v553 += 1 ;
                                        }
                                        float v558;
                                        v558 = v531 + v550;
                                        v531 = v558;
                                        v532 += 1 ;
                                    }
                                    float v559[4];
                                    bool v560[4];
                                    int v561;
                                    v561 = 0;
                                    while (while_method_6(v561)){
                                        int v563;
                                        v563 = 0;
                                        while (while_method_3(v563)){
                                            assert("Tensor range check" && 0 <= v561 && v561 < 1);
                                            assert("Tensor range check" && 0 <= v563 && v563 < 4);
                                            int v565;
                                            v565 = 4 * v561;
                                            int v566;
                                            v566 = v565 + v563;
                                            float v567;
                                            v567 = v530[v566];
                                            float v568;
                                            v568 = v496[v566];
                                            bool v569;
                                            v569 = v568 > 0.0f;
                                            assert("Tensor range check" && 0 <= v561 && v561 < 1);
                                            assert("Tensor range check" && 0 <= v563 && v563 < 4);
                                            v559[v566] = v567;
                                            v560[v566] = v569;
                                            v563 += 1 ;
                                        }
                                        v561 += 1 ;
                                    }
                                    float v570; bool v571;
                                    Tuple14 tmp31 = Tuple14{-1.0f / 0.0f, false};
                                    v570 = tmp31.v0; v571 = tmp31.v1;
                                    int v572;
                                    v572 = 0;
                                    while (while_method_6(v572)){
                                        int v574;
                                        v574 = 0;
                                        while (while_method_3(v574)){
                                            assert("Tensor range check" && 0 <= v572 && v572 < 1);
                                            assert("Tensor range check" && 0 <= v574 && v574 < 4);
                                            int v576;
                                            v576 = 4 * v572;
                                            int v577;
                                            v577 = v576 + v574;
                                            float v578;
                                            v578 = v559[v577];
                                            bool v579;
                                            v579 = v560[v577];
                                            float v586; bool v587;
                                            if (v571){
                                                if (v579){
                                                    bool v580;
                                                    v580 = v570 >= v578;
                                                    float v581;
                                                    if (v580){
                                                        v581 = v570;
                                                    } else {
                                                        v581 = v578;
                                                    }
                                                    v586 = v581; v587 = true;
                                                } else {
                                                    v586 = v570; v587 = v571;
                                                }
                                            } else {
                                                if (v579){
                                                    v586 = v578; v587 = v579;
                                                } else {
                                                    v586 = v570; v587 = v571;
                                                }
                                            }
                                            v570 = v586;
                                            v571 = v587;
                                            v574 += 1 ;
                                        }
                                        v572 += 1 ;
                                    }
                                    auto v588 = cooperative_groups::coalesced_threads();
                                    int v589;
                                    v589 = threadIdx.x;
                                    int v590;
                                    v590 = v589 / 16;
                                    auto v591 = cooperative_groups::labeled_partition(v588,v590);
                                    Closure3 v592{};
                                    float v593; bool v594;
                                    Tuple14 tmp32 = cooperative_groups::reduce(v591, Tuple14{v570, v571}, v592);
                                    v593 = tmp32.v0; v594 = tmp32.v1;
                                    bool v595;
                                    v595 = v594 == false;
                                    if (v595){
                                        int v596;
                                        v596 = threadIdx.x;
                                        int v597;
                                        v597 = blockIdx.x;
                                        int v598;
                                        v598 = v597 * 256;
                                        int v599;
                                        v599 = v596 + v598;
                                        cuda::counting_semaphore<cuda::thread_scope_system, 1> & v600 = console_lock;
                                        auto v601 = cooperative_groups::coalesced_threads();
                                        v600.acquire();
                                        int v602;
                                        v602 = 0;
                                        printf("{%s = %d; %s = %c","tid", v599, "x'", '[');
                                        int v603;
                                        v603 = 0;
                                        while (while_method_6(v603)){
                                            int v605;
                                            v605 = v602;
                                            bool v606;
                                            v606 = v605 >= 100;
                                            if (v606){
                                                printf("%s"," ...");
                                                break;
                                            } else {
                                            }
                                            bool v607;
                                            v607 = v603 == 0;
                                            bool v608;
                                            v608 = v607 != true;
                                            if (v608){
                                                printf("%s","; ");
                                            } else {
                                            }
                                            printf("%c",'[');
                                            int v609;
                                            v609 = 0;
                                            while (while_method_3(v609)){
                                                int v611;
                                                v611 = v602;
                                                bool v612;
                                                v612 = v611 >= 100;
                                                if (v612){
                                                    printf("%s"," ...");
                                                    break;
                                                } else {
                                                }
                                                bool v613;
                                                v613 = v609 == 0;
                                                bool v614;
                                                v614 = v613 != true;
                                                if (v614){
                                                    printf("%s","; ");
                                                } else {
                                                }
                                                int v615;
                                                v615 = v602 + 1;
                                                v602 = v615;
                                                int v616;
                                                v616 = v603 * 4;
                                                int v617;
                                                v617 = v616 + v609;
                                                float v618;
                                                v618 = v559[v617];
                                                bool v619;
                                                v619 = v560[v617];
                                                const char * v622;
                                                if (v619){
                                                    const char * v620;
                                                    v620 = "true";
                                                    v622 = v620;
                                                } else {
                                                    const char * v621;
                                                    v621 = "false";
                                                    v622 = v621;
                                                }
                                                printf("%f, %s",v618, v622);
                                                v609 += 1 ;
                                            }
                                            printf("%c",']');
                                            v603 += 1 ;
                                        }
                                        printf("%c",']');
                                        printf("}\n");
                                        v600.release();
                                        v601.sync() ;
                                    } else {
                                    }
                                    if (v595){
                                        assert("The local reduce must be true." && v594);
                                    } else {
                                    }
                                    float v658[4];
                                    int v659[4];
                                    int v660;
                                    v660 = 0;
                                    while (while_method_6(v660)){
                                        int v662;
                                        v662 = 0;
                                        while (while_method_3(v662)){
                                            assert("Tensor range check" && 0 <= v660 && v660 < 1);
                                            assert("Tensor range check" && 0 <= v662 && v662 < 4);
                                            int v664;
                                            v664 = 4 * v660;
                                            int v665;
                                            v665 = v664 + v662;
                                            int v666;
                                            v666 = v497[v665];
                                            float v667;
                                            v667 = curand_uniform(&v162);
                                            assert("Tensor range check" && 0 <= v660 && v660 < 1);
                                            assert("Tensor range check" && 0 <= v662 && v662 < 4);
                                            v658[v665] = v667;
                                            v659[v665] = v666;
                                            v662 += 1 ;
                                        }
                                        v660 += 1 ;
                                    }
                                    float v668; int v669;
                                    Tuple15 tmp33 = Tuple15{0.0f, 2147483647};
                                    v668 = tmp33.v0; v669 = tmp33.v1;
                                    int v670;
                                    v670 = 0;
                                    while (while_method_6(v670)){
                                        int v672;
                                        v672 = 0;
                                        while (while_method_3(v672)){
                                            assert("Tensor range check" && 0 <= v670 && v670 < 1);
                                            assert("Tensor range check" && 0 <= v672 && v672 < 4);
                                            int v674;
                                            v674 = 4 * v670;
                                            int v675;
                                            v675 = v674 + v672;
                                            float v676;
                                            v676 = v658[v675];
                                            int v677;
                                            v677 = v659[v675];
                                            bool v678;
                                            v678 = v669 < v677;
                                            float v679; int v680;
                                            if (v678){
                                                v679 = v668; v680 = v669;
                                            } else {
                                                v679 = v676; v680 = v677;
                                            }
                                            v668 = v679;
                                            v669 = v680;
                                            v672 += 1 ;
                                        }
                                        v670 += 1 ;
                                    }
                                    auto v681 = cooperative_groups::coalesced_threads();
                                    int v682;
                                    v682 = threadIdx.x;
                                    int v683;
                                    v683 = v682 / 16;
                                    auto v684 = cooperative_groups::labeled_partition(v681,v683);
                                    Closure4 v685{};
                                    float v686; int v687;
                                    Tuple15 tmp34 = cooperative_groups::reduce(v684, Tuple15{v668, v669}, v685);
                                    v686 = tmp34.v0; v687 = tmp34.v1;
                                    float v688;
                                    v688 = v593 * v686;
                                    int v689[4];
                                    bool v690[4];
                                    int v691;
                                    v691 = 0;
                                    while (while_method_6(v691)){
                                        int v693;
                                        v693 = 0;
                                        while (while_method_3(v693)){
                                            assert("Tensor range check" && 0 <= v691 && v691 < 1);
                                            assert("Tensor range check" && 0 <= v693 && v693 < 4);
                                            int v695;
                                            v695 = 4 * v691;
                                            int v696;
                                            v696 = v695 + v693;
                                            float v697;
                                            v697 = v559[v696];
                                            bool v698;
                                            v698 = v560[v696];
                                            int v699;
                                            v699 = v497[v696];
                                            int v702; bool v703;
                                            if (v698){
                                                float v700;
                                                v700 = v697 - v688;
                                                bool v701;
                                                v701 = v700 >= 0.0f;
                                                v702 = v699; v703 = v701;
                                            } else {
                                                v702 = 2147483647; v703 = false;
                                            }
                                            assert("Tensor range check" && 0 <= v691 && v691 < 1);
                                            assert("Tensor range check" && 0 <= v693 && v693 < 4);
                                            v689[v696] = v702;
                                            v690[v696] = v703;
                                            v693 += 1 ;
                                        }
                                        v691 += 1 ;
                                    }
                                    int v704; bool v705;
                                    Tuple16 tmp35 = Tuple16{2147483647, false};
                                    v704 = tmp35.v0; v705 = tmp35.v1;
                                    int v706;
                                    v706 = 0;
                                    while (while_method_6(v706)){
                                        int v708;
                                        v708 = 0;
                                        while (while_method_3(v708)){
                                            assert("Tensor range check" && 0 <= v706 && v706 < 1);
                                            assert("Tensor range check" && 0 <= v708 && v708 < 4);
                                            int v710;
                                            v710 = 4 * v706;
                                            int v711;
                                            v711 = v710 + v708;
                                            int v712;
                                            v712 = v689[v711];
                                            bool v713;
                                            v713 = v690[v711];
                                            int v720; bool v721;
                                            if (v705){
                                                if (v713){
                                                    bool v714;
                                                    v714 = v704 < v712;
                                                    int v715;
                                                    if (v714){
                                                        v715 = v704;
                                                    } else {
                                                        v715 = v712;
                                                    }
                                                    v720 = v715; v721 = true;
                                                } else {
                                                    v720 = v704; v721 = v705;
                                                }
                                            } else {
                                                if (v713){
                                                    v720 = v712; v721 = v713;
                                                } else {
                                                    v720 = v704; v721 = v705;
                                                }
                                            }
                                            v704 = v720;
                                            v705 = v721;
                                            v708 += 1 ;
                                        }
                                        v706 += 1 ;
                                    }
                                    auto v722 = cooperative_groups::coalesced_threads();
                                    int v723;
                                    v723 = threadIdx.x;
                                    int v724;
                                    v724 = v723 / 16;
                                    auto v725 = cooperative_groups::labeled_partition(v722,v724);
                                    Closure5 v726{};
                                    int v727; bool v728;
                                    Tuple16 tmp36 = cooperative_groups::reduce(v725, Tuple16{v704, v705}, v726);
                                    v727 = tmp36.v0; v728 = tmp36.v1;
                                    bool v729;
                                    v729 = v728 == false;
                                    if (v729){
                                        int v730;
                                        v730 = threadIdx.x;
                                        int v731;
                                        v731 = blockIdx.x;
                                        int v732;
                                        v732 = v731 * 256;
                                        int v733;
                                        v733 = v730 + v732;
                                        cuda::counting_semaphore<cuda::thread_scope_system, 1> & v734 = console_lock;
                                        auto v735 = cooperative_groups::coalesced_threads();
                                        v734.acquire();
                                        int v736;
                                        v736 = 0;
                                        printf("{%s = %d; %s = %c","tid", v733, "x'", '[');
                                        int v737;
                                        v737 = 0;
                                        while (while_method_6(v737)){
                                            int v739;
                                            v739 = v736;
                                            bool v740;
                                            v740 = v739 >= 100;
                                            if (v740){
                                                printf("%s"," ...");
                                                break;
                                            } else {
                                            }
                                            bool v741;
                                            v741 = v737 == 0;
                                            bool v742;
                                            v742 = v741 != true;
                                            if (v742){
                                                printf("%s","; ");
                                            } else {
                                            }
                                            printf("%c",'[');
                                            int v743;
                                            v743 = 0;
                                            while (while_method_3(v743)){
                                                int v745;
                                                v745 = v736;
                                                bool v746;
                                                v746 = v745 >= 100;
                                                if (v746){
                                                    printf("%s"," ...");
                                                    break;
                                                } else {
                                                }
                                                bool v747;
                                                v747 = v743 == 0;
                                                bool v748;
                                                v748 = v747 != true;
                                                if (v748){
                                                    printf("%s","; ");
                                                } else {
                                                }
                                                int v749;
                                                v749 = v736 + 1;
                                                v736 = v749;
                                                int v750;
                                                v750 = v737 * 4;
                                                int v751;
                                                v751 = v750 + v743;
                                                int v752;
                                                v752 = v689[v751];
                                                bool v753;
                                                v753 = v690[v751];
                                                const char * v756;
                                                if (v753){
                                                    const char * v754;
                                                    v754 = "true";
                                                    v756 = v754;
                                                } else {
                                                    const char * v755;
                                                    v755 = "false";
                                                    v756 = v755;
                                                }
                                                printf("%d, %s",v752, v756);
                                                v743 += 1 ;
                                            }
                                            printf("%c",']');
                                            v737 += 1 ;
                                        }
                                        printf("%c",']');
                                        printf("}\n");
                                        v734.release();
                                        v735.sync() ;
                                    } else {
                                    }
                                    if (v729){
                                        assert("The local reduce must be true." && v728);
                                    } else {
                                    }
                                    float v792; int v793;
                                    Tuple15 tmp37 = Tuple15{0.0f, 2147483647};
                                    v792 = tmp37.v0; v793 = tmp37.v1;
                                    int v794;
                                    v794 = 0;
                                    while (while_method_6(v794)){
                                        int v796;
                                        v796 = 0;
                                        while (while_method_3(v796)){
                                            assert("Tensor range check" && 0 <= v794 && v794 < 1);
                                            assert("Tensor range check" && 0 <= v796 && v796 < 4);
                                            int v798;
                                            v798 = 4 * v794;
                                            int v799;
                                            v799 = v798 + v796;
                                            float v800;
                                            v800 = v496[v799];
                                            int v801;
                                            v801 = v497[v799];
                                            bool v802;
                                            v802 = v793 == v727;
                                            float v806; int v807;
                                            if (v802){
                                                v806 = v792; v807 = v793;
                                            } else {
                                                bool v803;
                                                v803 = v801 == v727;
                                                if (v803){
                                                    v806 = v800; v807 = v801;
                                                } else {
                                                    v806 = v792; v807 = v793;
                                                }
                                            }
                                            v792 = v806;
                                            v793 = v807;
                                            v796 += 1 ;
                                        }
                                        v794 += 1 ;
                                    }
                                    auto v808 = cooperative_groups::coalesced_threads();
                                    int v809;
                                    v809 = threadIdx.x;
                                    int v810;
                                    v810 = v809 / 16;
                                    auto v811 = cooperative_groups::labeled_partition(v808,v810);
                                    Closure6 v812{v727};
                                    float v813; int v814;
                                    Tuple15 tmp38 = cooperative_groups::reduce(v811, Tuple15{v792, v793}, v812);
                                    v813 = tmp38.v0; v814 = tmp38.v1;
                                    bool v815;
                                    v815 = v814 == 2147483647;
                                    bool v816;
                                    v816 = v815 != true;
                                    bool v817;
                                    v817 = v816 == false;
                                    if (v817){
                                        assert("Expected a valid action id in get_prob." && v816);
                                    } else {
                                    }
                                    int v819;
                                    v819 = 0;
                                    while (while_method_6(v819)){
                                        assert("Tensor range check" && 0 <= v819 && v819 < 1);
                                        assert("Tensor range check" && 0 <= v819 && v819 < 1);
                                        v819 += 1 ;
                                    }
                                    assert("Tensor range check" && 0 <= v488 && v488 < 256);
                                    v463[v488] = v813;
                                    v465[v488] = v727;
                                    v476 += 1 ;
                                }
                                __syncthreads();
                                assert("Tensor range check" && 0 <= v467 && v467 < 256);
                                float v821;
                                v821 = v463[v467];
                                int v822;
                                v822 = v465[v467];
                                __syncthreads();
                                bool v823;
                                v823 = 0 == v822;
                                Union10 v832;
                                if (v823){
                                    v832 = Union10{Union10_1{}};
                                } else {
                                    bool v825;
                                    v825 = 1 == v822;
                                    if (v825){
                                        v832 = Union10{Union10_0{}};
                                    } else {
                                        bool v827;
                                        v827 = 2 == v822;
                                        if (v827){
                                            v832 = Union10{Union10_2{1, 1}};
                                        } else {
                                            printf("%s\n", "Invalid output id in the NL Holdem model.");
                                            __trap();
                                        }
                                    }
                                }
                                Union1 v960;
                                switch (v832.tag) {
                                    case 0: { // AA_Call
                                        v960 = Union1{Union1_1{}};
                                        break;
                                    }
                                    case 1: { // AA_Fold
                                        int v833;
                                        v833 = v147[0];
                                        int v835; int v836;
                                        Tuple4 tmp39 = Tuple4{1, v833};
                                        v835 = tmp39.v0; v836 = tmp39.v1;
                                        while (while_method_0(v835)){
                                            bool v838;
                                            v838 = 0 <= v835;
                                            bool v840;
                                            if (v838){
                                                bool v839;
                                                v839 = v835 < 2;
                                                v840 = v839;
                                            } else {
                                                v840 = false;
                                            }
                                            bool v841;
                                            v841 = v840 == false;
                                            if (v841){
                                                assert("Index must be in range." && v840);
                                            } else {
                                            }
                                            int v843;
                                            v843 = v147[v835];
                                            bool v845;
                                            v845 = v836 >= v843;
                                            int v846;
                                            if (v845){
                                                v846 = v836;
                                            } else {
                                                v846 = v843;
                                            }
                                            v836 = v846;
                                            v835 += 1 ;
                                        }
                                        bool v848;
                                        if (v153){
                                            bool v847;
                                            v847 = v151 < 2;
                                            v848 = v847;
                                        } else {
                                            v848 = false;
                                        }
                                        bool v849;
                                        v849 = v848 == false;
                                        if (v849){
                                            assert("Index must be in range." && v848);
                                        } else {
                                        }
                                        int v851;
                                        v851 = v147[v151];
                                        bool v853;
                                        v853 = v851 == v836;
                                        if (v853){
                                            v960 = Union1{Union1_1{}};
                                        } else {
                                            v960 = Union1{Union1_2{}};
                                        }
                                        break;
                                    }
                                    case 2: { // AA_Raise
                                        int v858 = v832.case2.v0; int v859 = v832.case2.v1;
                                        static_array<int,2> v860;
                                        int v862;
                                        v862 = 0;
                                        while (while_method_0(v862)){
                                            bool v864;
                                            v864 = 0 <= v862;
                                            bool v866;
                                            if (v864){
                                                bool v865;
                                                v865 = v862 < 2;
                                                v866 = v865;
                                            } else {
                                                v866 = false;
                                            }
                                            bool v867;
                                            v867 = v866 == false;
                                            if (v867){
                                                assert("Index must be in range." && v866);
                                            } else {
                                            }
                                            int v869;
                                            v869 = v149[v862];
                                            bool v872;
                                            if (v864){
                                                bool v871;
                                                v871 = v862 < 2;
                                                v872 = v871;
                                            } else {
                                                v872 = false;
                                            }
                                            bool v873;
                                            v873 = v872 == false;
                                            if (v873){
                                                assert("Index must be in range." && v872);
                                            } else {
                                            }
                                            int v875;
                                            v875 = v147[v862];
                                            int v877;
                                            v877 = v869 + v875;
                                            v860[v862] = v877;
                                            v862 += 1 ;
                                        }
                                        int v878;
                                        v878 = v147[0];
                                        int v880; int v881;
                                        Tuple4 tmp40 = Tuple4{1, v878};
                                        v880 = tmp40.v0; v881 = tmp40.v1;
                                        while (while_method_0(v880)){
                                            bool v883;
                                            v883 = 0 <= v880;
                                            bool v885;
                                            if (v883){
                                                bool v884;
                                                v884 = v880 < 2;
                                                v885 = v884;
                                            } else {
                                                v885 = false;
                                            }
                                            bool v886;
                                            v886 = v885 == false;
                                            if (v886){
                                                assert("Index must be in range." && v885);
                                            } else {
                                            }
                                            int v888;
                                            v888 = v147[v880];
                                            bool v890;
                                            v890 = v881 >= v888;
                                            int v891;
                                            if (v890){
                                                v891 = v881;
                                            } else {
                                                v891 = v888;
                                            }
                                            v881 = v891;
                                            v880 += 1 ;
                                        }
                                        bool v893;
                                        if (v153){
                                            bool v892;
                                            v892 = v151 < 2;
                                            v893 = v892;
                                        } else {
                                            v893 = false;
                                        }
                                        bool v894;
                                        v894 = v893 == false;
                                        if (v894){
                                            assert("Index must be in range." && v893);
                                        } else {
                                        }
                                        int v896;
                                        v896 = v860[v151];
                                        bool v898;
                                        v898 = v881 < v896;
                                        int v899;
                                        if (v898){
                                            v899 = v881;
                                        } else {
                                            v899 = v896;
                                        }
                                        static_array<int,2> v900;
                                        int v902;
                                        v902 = 0;
                                        while (while_method_0(v902)){
                                            bool v904;
                                            v904 = 0 <= v902;
                                            bool v906;
                                            if (v904){
                                                bool v905;
                                                v905 = v902 < 2;
                                                v906 = v905;
                                            } else {
                                                v906 = false;
                                            }
                                            bool v907;
                                            v907 = v906 == false;
                                            if (v907){
                                                assert("Index must be in range." && v906);
                                            } else {
                                            }
                                            int v909;
                                            v909 = v147[v902];
                                            bool v911;
                                            v911 = v151 == v902;
                                            int v912;
                                            if (v911){
                                                v912 = v899;
                                            } else {
                                                v912 = v909;
                                            }
                                            v900[v902] = v912;
                                            v902 += 1 ;
                                        }
                                        int v913;
                                        v913 = v900[0];
                                        int v915; int v916;
                                        Tuple4 tmp41 = Tuple4{1, v913};
                                        v915 = tmp41.v0; v916 = tmp41.v1;
                                        while (while_method_0(v915)){
                                            bool v918;
                                            v918 = 0 <= v915;
                                            bool v920;
                                            if (v918){
                                                bool v919;
                                                v919 = v915 < 2;
                                                v920 = v919;
                                            } else {
                                                v920 = false;
                                            }
                                            bool v921;
                                            v921 = v920 == false;
                                            if (v921){
                                                assert("Index must be in range." && v920);
                                            } else {
                                            }
                                            int v923;
                                            v923 = v900[v915];
                                            int v925;
                                            v925 = v916 + v923;
                                            v916 = v925;
                                            v915 += 1 ;
                                        }
                                        static_array<int,2> v926;
                                        int v928;
                                        v928 = 0;
                                        while (while_method_0(v928)){
                                            bool v930;
                                            v930 = 0 <= v928;
                                            bool v932;
                                            if (v930){
                                                bool v931;
                                                v931 = v928 < 2;
                                                v932 = v931;
                                            } else {
                                                v932 = false;
                                            }
                                            bool v933;
                                            v933 = v932 == false;
                                            if (v933){
                                                assert("Index must be in range." && v932);
                                            } else {
                                            }
                                            int v935;
                                            v935 = v860[v928];
                                            bool v938;
                                            if (v930){
                                                bool v937;
                                                v937 = v928 < 2;
                                                v938 = v937;
                                            } else {
                                                v938 = false;
                                            }
                                            bool v939;
                                            v939 = v938 == false;
                                            if (v939){
                                                assert("Index must be in range." && v938);
                                            } else {
                                            }
                                            int v941;
                                            v941 = v900[v928];
                                            int v943;
                                            v943 = v935 - v941;
                                            v926[v928] = v943;
                                            v928 += 1 ;
                                        }
                                        int v944;
                                        v944 = v858 * v916;
                                        int v945;
                                        v945 = v944 / v859;
                                        bool v946;
                                        v946 = v145 >= v945;
                                        int v947;
                                        if (v946){
                                            v947 = v145;
                                        } else {
                                            v947 = v945;
                                        }
                                        bool v949;
                                        if (v153){
                                            bool v948;
                                            v948 = v151 < 2;
                                            v949 = v948;
                                        } else {
                                            v949 = false;
                                        }
                                        bool v950;
                                        v950 = v949 == false;
                                        if (v950){
                                            assert("Index must be in range." && v949);
                                        } else {
                                        }
                                        int v952;
                                        v952 = v926[v151];
                                        bool v954;
                                        v954 = v947 >= v952;
                                        if (v954){
                                            v960 = Union1{Union1_0{}};
                                        } else {
                                            v960 = Union1{Union1_3{v947}};
                                        }
                                        break;
                                    }
                                    default: {
                                        assert("Invalid tag." && false); __trap();
                                    }
                                }
                                int v961;
                                v961 = sizeof(Union1);
                                unsigned long long v962;
                                v962 = (unsigned long long)v961;
                                bool v963;
                                v963 = v962 <= 98304ull;
                                bool v964;
                                v964 = v963 == false;
                                if (v964){
                                    assert("The dynamic shared memory is insufficient to allocate the tensor." && v963);
                                } else {
                                }
                                extern __shared__ unsigned char v966[];
                                bool v967;
                                v967 = v962 <= v962;
                                bool v968;
                                v968 = v967 == false;
                                if (v968){
                                    assert("The length of the partition has to be less than or equal to the length of the base array." && v967);
                                } else {
                                }
                                Union1 * v970;
                                v970 = reinterpret_cast<Union1 *>(&v966[0ull]);
                                int v972;
                                v972 = threadIdx.x;
                                bool v973;
                                v973 = v972 == 0;
                                if (v973){
                                    v970[0] = v960;
                                } else {
                                }
                                __syncthreads();
                                Union1 v974;
                                v974 = v970[0];
                                __syncthreads();
                                Union6 v975;
                                v975 = Union6{Union6_2{v151, v974}};
                                v5.push(v975);
                                Union4 v1303;
                                switch (v974.tag) {
                                    case 0: { // A_All_In
                                        static_array<int,2> v1179;
                                        int v1181;
                                        v1181 = 0;
                                        while (while_method_0(v1181)){
                                            bool v1183;
                                            v1183 = 0 <= v1181;
                                            bool v1185;
                                            if (v1183){
                                                bool v1184;
                                                v1184 = v1181 < 2;
                                                v1185 = v1184;
                                            } else {
                                                v1185 = false;
                                            }
                                            bool v1186;
                                            v1186 = v1185 == false;
                                            if (v1186){
                                                assert("Index must be in range." && v1185);
                                            } else {
                                            }
                                            int v1188;
                                            v1188 = v149[v1181];
                                            bool v1191;
                                            if (v1183){
                                                bool v1190;
                                                v1190 = v1181 < 2;
                                                v1191 = v1190;
                                            } else {
                                                v1191 = false;
                                            }
                                            bool v1192;
                                            v1192 = v1191 == false;
                                            if (v1192){
                                                assert("Index must be in range." && v1191);
                                            } else {
                                            }
                                            int v1194;
                                            v1194 = v147[v1181];
                                            int v1196;
                                            v1196 = v1188 + v1194;
                                            v1179[v1181] = v1196;
                                            v1181 += 1 ;
                                        }
                                        int v1197;
                                        v1197 = v147[0];
                                        int v1199; int v1200;
                                        Tuple4 tmp42 = Tuple4{1, v1197};
                                        v1199 = tmp42.v0; v1200 = tmp42.v1;
                                        while (while_method_0(v1199)){
                                            bool v1202;
                                            v1202 = 0 <= v1199;
                                            bool v1204;
                                            if (v1202){
                                                bool v1203;
                                                v1203 = v1199 < 2;
                                                v1204 = v1203;
                                            } else {
                                                v1204 = false;
                                            }
                                            bool v1205;
                                            v1205 = v1204 == false;
                                            if (v1205){
                                                assert("Index must be in range." && v1204);
                                            } else {
                                            }
                                            int v1207;
                                            v1207 = v147[v1199];
                                            bool v1209;
                                            v1209 = v1200 >= v1207;
                                            int v1210;
                                            if (v1209){
                                                v1210 = v1200;
                                            } else {
                                                v1210 = v1207;
                                            }
                                            v1200 = v1210;
                                            v1199 += 1 ;
                                        }
                                        bool v1212;
                                        if (v153){
                                            bool v1211;
                                            v1211 = v151 < 2;
                                            v1212 = v1211;
                                        } else {
                                            v1212 = false;
                                        }
                                        bool v1213;
                                        v1213 = v1212 == false;
                                        if (v1213){
                                            assert("Index must be in range." && v1212);
                                        } else {
                                        }
                                        int v1215;
                                        v1215 = v1179[v151];
                                        bool v1217;
                                        v1217 = v1200 < v1215;
                                        int v1218;
                                        if (v1217){
                                            v1218 = v1200;
                                        } else {
                                            v1218 = v1215;
                                        }
                                        static_array<int,2> v1219;
                                        int v1221;
                                        v1221 = 0;
                                        while (while_method_0(v1221)){
                                            bool v1223;
                                            v1223 = 0 <= v1221;
                                            bool v1225;
                                            if (v1223){
                                                bool v1224;
                                                v1224 = v1221 < 2;
                                                v1225 = v1224;
                                            } else {
                                                v1225 = false;
                                            }
                                            bool v1226;
                                            v1226 = v1225 == false;
                                            if (v1226){
                                                assert("Index must be in range." && v1225);
                                            } else {
                                            }
                                            int v1228;
                                            v1228 = v147[v1221];
                                            bool v1230;
                                            v1230 = v151 == v1221;
                                            int v1231;
                                            if (v1230){
                                                v1231 = v1218;
                                            } else {
                                                v1231 = v1228;
                                            }
                                            v1219[v1221] = v1231;
                                            v1221 += 1 ;
                                        }
                                        static_array<int,2> v1232;
                                        int v1234;
                                        v1234 = 0;
                                        while (while_method_0(v1234)){
                                            bool v1236;
                                            v1236 = 0 <= v1234;
                                            bool v1238;
                                            if (v1236){
                                                bool v1237;
                                                v1237 = v1234 < 2;
                                                v1238 = v1237;
                                            } else {
                                                v1238 = false;
                                            }
                                            bool v1239;
                                            v1239 = v1238 == false;
                                            if (v1239){
                                                assert("Index must be in range." && v1238);
                                            } else {
                                            }
                                            int v1241;
                                            v1241 = v1179[v1234];
                                            bool v1244;
                                            if (v1236){
                                                bool v1243;
                                                v1243 = v1234 < 2;
                                                v1244 = v1243;
                                            } else {
                                                v1244 = false;
                                            }
                                            bool v1245;
                                            v1245 = v1244 == false;
                                            if (v1245){
                                                assert("Index must be in range." && v1244);
                                            } else {
                                            }
                                            int v1247;
                                            v1247 = v1219[v1234];
                                            int v1249;
                                            v1249 = v1241 - v1247;
                                            v1232[v1234] = v1249;
                                            v1234 += 1 ;
                                        }
                                        bool v1251;
                                        if (v153){
                                            bool v1250;
                                            v1250 = v151 < 2;
                                            v1251 = v1250;
                                        } else {
                                            v1251 = false;
                                        }
                                        bool v1252;
                                        v1252 = v1251 == false;
                                        if (v1252){
                                            assert("Index must be in range." && v1251);
                                        } else {
                                        }
                                        int v1254;
                                        v1254 = v1232[v151];
                                        int v1256;
                                        v1256 = v1200 + v1254;
                                        bool v1258;
                                        if (v153){
                                            bool v1257;
                                            v1257 = v151 < 2;
                                            v1258 = v1257;
                                        } else {
                                            v1258 = false;
                                        }
                                        bool v1259;
                                        v1259 = v1258 == false;
                                        if (v1259){
                                            assert("Index must be in range." && v1258);
                                        } else {
                                        }
                                        int v1261;
                                        v1261 = v1179[v151];
                                        bool v1263;
                                        v1263 = v1256 < v1261;
                                        int v1264;
                                        if (v1263){
                                            v1264 = v1256;
                                        } else {
                                            v1264 = v1261;
                                        }
                                        static_array<int,2> v1265;
                                        int v1267;
                                        v1267 = 0;
                                        while (while_method_0(v1267)){
                                            bool v1269;
                                            v1269 = 0 <= v1267;
                                            bool v1271;
                                            if (v1269){
                                                bool v1270;
                                                v1270 = v1267 < 2;
                                                v1271 = v1270;
                                            } else {
                                                v1271 = false;
                                            }
                                            bool v1272;
                                            v1272 = v1271 == false;
                                            if (v1272){
                                                assert("Index must be in range." && v1271);
                                            } else {
                                            }
                                            int v1274;
                                            v1274 = v147[v1267];
                                            bool v1276;
                                            v1276 = v151 == v1267;
                                            int v1277;
                                            if (v1276){
                                                v1277 = v1264;
                                            } else {
                                                v1277 = v1274;
                                            }
                                            v1265[v1267] = v1277;
                                            v1267 += 1 ;
                                        }
                                        static_array<int,2> v1278;
                                        int v1280;
                                        v1280 = 0;
                                        while (while_method_0(v1280)){
                                            bool v1282;
                                            v1282 = 0 <= v1280;
                                            bool v1284;
                                            if (v1282){
                                                bool v1283;
                                                v1283 = v1280 < 2;
                                                v1284 = v1283;
                                            } else {
                                                v1284 = false;
                                            }
                                            bool v1285;
                                            v1285 = v1284 == false;
                                            if (v1285){
                                                assert("Index must be in range." && v1284);
                                            } else {
                                            }
                                            int v1287;
                                            v1287 = v1179[v1280];
                                            bool v1290;
                                            if (v1282){
                                                bool v1289;
                                                v1289 = v1280 < 2;
                                                v1290 = v1289;
                                            } else {
                                                v1290 = false;
                                            }
                                            bool v1291;
                                            v1291 = v1290 == false;
                                            if (v1291){
                                                assert("Index must be in range." && v1290);
                                            } else {
                                            }
                                            int v1293;
                                            v1293 = v1265[v1280];
                                            int v1295;
                                            v1295 = v1287 - v1293;
                                            v1278[v1280] = v1295;
                                            v1280 += 1 ;
                                        }
                                        bool v1296;
                                        v1296 = v1254 >= v145;
                                        int v1297;
                                        if (v1296){
                                            v1297 = v1254;
                                        } else {
                                            v1297 = v145;
                                        }
                                        int v1298;
                                        v1298 = v148 + 1;
                                        v1303 = try_round_36(v1297, v146, v1265, v1298, v1278, v150);
                                        break;
                                    }
                                    case 1: { // A_Call
                                        static_array<int,2> v977;
                                        int v979;
                                        v979 = 0;
                                        while (while_method_0(v979)){
                                            bool v981;
                                            v981 = 0 <= v979;
                                            bool v983;
                                            if (v981){
                                                bool v982;
                                                v982 = v979 < 2;
                                                v983 = v982;
                                            } else {
                                                v983 = false;
                                            }
                                            bool v984;
                                            v984 = v983 == false;
                                            if (v984){
                                                assert("Index must be in range." && v983);
                                            } else {
                                            }
                                            int v986;
                                            v986 = v149[v979];
                                            bool v989;
                                            if (v981){
                                                bool v988;
                                                v988 = v979 < 2;
                                                v989 = v988;
                                            } else {
                                                v989 = false;
                                            }
                                            bool v990;
                                            v990 = v989 == false;
                                            if (v990){
                                                assert("Index must be in range." && v989);
                                            } else {
                                            }
                                            int v992;
                                            v992 = v147[v979];
                                            int v994;
                                            v994 = v986 + v992;
                                            v977[v979] = v994;
                                            v979 += 1 ;
                                        }
                                        int v995;
                                        v995 = v147[0];
                                        int v997; int v998;
                                        Tuple4 tmp43 = Tuple4{1, v995};
                                        v997 = tmp43.v0; v998 = tmp43.v1;
                                        while (while_method_0(v997)){
                                            bool v1000;
                                            v1000 = 0 <= v997;
                                            bool v1002;
                                            if (v1000){
                                                bool v1001;
                                                v1001 = v997 < 2;
                                                v1002 = v1001;
                                            } else {
                                                v1002 = false;
                                            }
                                            bool v1003;
                                            v1003 = v1002 == false;
                                            if (v1003){
                                                assert("Index must be in range." && v1002);
                                            } else {
                                            }
                                            int v1005;
                                            v1005 = v147[v997];
                                            bool v1007;
                                            v1007 = v998 >= v1005;
                                            int v1008;
                                            if (v1007){
                                                v1008 = v998;
                                            } else {
                                                v1008 = v1005;
                                            }
                                            v998 = v1008;
                                            v997 += 1 ;
                                        }
                                        bool v1010;
                                        if (v153){
                                            bool v1009;
                                            v1009 = v151 < 2;
                                            v1010 = v1009;
                                        } else {
                                            v1010 = false;
                                        }
                                        bool v1011;
                                        v1011 = v1010 == false;
                                        if (v1011){
                                            assert("Index must be in range." && v1010);
                                        } else {
                                        }
                                        int v1013;
                                        v1013 = v977[v151];
                                        bool v1015;
                                        v1015 = v998 < v1013;
                                        int v1016;
                                        if (v1015){
                                            v1016 = v998;
                                        } else {
                                            v1016 = v1013;
                                        }
                                        static_array<int,2> v1017;
                                        int v1019;
                                        v1019 = 0;
                                        while (while_method_0(v1019)){
                                            bool v1021;
                                            v1021 = 0 <= v1019;
                                            bool v1023;
                                            if (v1021){
                                                bool v1022;
                                                v1022 = v1019 < 2;
                                                v1023 = v1022;
                                            } else {
                                                v1023 = false;
                                            }
                                            bool v1024;
                                            v1024 = v1023 == false;
                                            if (v1024){
                                                assert("Index must be in range." && v1023);
                                            } else {
                                            }
                                            int v1026;
                                            v1026 = v147[v1019];
                                            bool v1028;
                                            v1028 = v151 == v1019;
                                            int v1029;
                                            if (v1028){
                                                v1029 = v1016;
                                            } else {
                                                v1029 = v1026;
                                            }
                                            v1017[v1019] = v1029;
                                            v1019 += 1 ;
                                        }
                                        static_array<int,2> v1030;
                                        int v1032;
                                        v1032 = 0;
                                        while (while_method_0(v1032)){
                                            bool v1034;
                                            v1034 = 0 <= v1032;
                                            bool v1036;
                                            if (v1034){
                                                bool v1035;
                                                v1035 = v1032 < 2;
                                                v1036 = v1035;
                                            } else {
                                                v1036 = false;
                                            }
                                            bool v1037;
                                            v1037 = v1036 == false;
                                            if (v1037){
                                                assert("Index must be in range." && v1036);
                                            } else {
                                            }
                                            int v1039;
                                            v1039 = v977[v1032];
                                            bool v1042;
                                            if (v1034){
                                                bool v1041;
                                                v1041 = v1032 < 2;
                                                v1042 = v1041;
                                            } else {
                                                v1042 = false;
                                            }
                                            bool v1043;
                                            v1043 = v1042 == false;
                                            if (v1043){
                                                assert("Index must be in range." && v1042);
                                            } else {
                                            }
                                            int v1045;
                                            v1045 = v1017[v1032];
                                            int v1047;
                                            v1047 = v1039 - v1045;
                                            v1030[v1032] = v1047;
                                            v1032 += 1 ;
                                        }
                                        bool v1048;
                                        v1048 = v151 < 2;
                                        if (v1048){
                                            int v1049;
                                            v1049 = v148 + 1;
                                            v1303 = try_round_36(v145, v146, v1017, v1049, v1030, v150);
                                        } else {
                                            v1303 = go_next_street_38(v145, v146, v1017, v148, v1030, v150);
                                        }
                                        break;
                                    }
                                    case 2: { // A_Fold
                                        v1303 = Union4{Union4_1{v145, v146, v147, v148, v149, v150}};
                                        break;
                                    }
                                    case 3: { // A_Raise
                                        int v1053 = v974.case3.v0;
                                        bool v1054;
                                        v1054 = v145 <= v1053;
                                        bool v1055;
                                        v1055 = v1054 == false;
                                        if (v1055){
                                            assert("The raise amount must match the minimum." && v1054);
                                        } else {
                                        }
                                        static_array<int,2> v1057;
                                        int v1059;
                                        v1059 = 0;
                                        while (while_method_0(v1059)){
                                            bool v1061;
                                            v1061 = 0 <= v1059;
                                            bool v1063;
                                            if (v1061){
                                                bool v1062;
                                                v1062 = v1059 < 2;
                                                v1063 = v1062;
                                            } else {
                                                v1063 = false;
                                            }
                                            bool v1064;
                                            v1064 = v1063 == false;
                                            if (v1064){
                                                assert("Index must be in range." && v1063);
                                            } else {
                                            }
                                            int v1066;
                                            v1066 = v149[v1059];
                                            bool v1069;
                                            if (v1061){
                                                bool v1068;
                                                v1068 = v1059 < 2;
                                                v1069 = v1068;
                                            } else {
                                                v1069 = false;
                                            }
                                            bool v1070;
                                            v1070 = v1069 == false;
                                            if (v1070){
                                                assert("Index must be in range." && v1069);
                                            } else {
                                            }
                                            int v1072;
                                            v1072 = v147[v1059];
                                            int v1074;
                                            v1074 = v1066 + v1072;
                                            v1057[v1059] = v1074;
                                            v1059 += 1 ;
                                        }
                                        int v1075;
                                        v1075 = v147[0];
                                        int v1077; int v1078;
                                        Tuple4 tmp44 = Tuple4{1, v1075};
                                        v1077 = tmp44.v0; v1078 = tmp44.v1;
                                        while (while_method_0(v1077)){
                                            bool v1080;
                                            v1080 = 0 <= v1077;
                                            bool v1082;
                                            if (v1080){
                                                bool v1081;
                                                v1081 = v1077 < 2;
                                                v1082 = v1081;
                                            } else {
                                                v1082 = false;
                                            }
                                            bool v1083;
                                            v1083 = v1082 == false;
                                            if (v1083){
                                                assert("Index must be in range." && v1082);
                                            } else {
                                            }
                                            int v1085;
                                            v1085 = v147[v1077];
                                            bool v1087;
                                            v1087 = v1078 >= v1085;
                                            int v1088;
                                            if (v1087){
                                                v1088 = v1078;
                                            } else {
                                                v1088 = v1085;
                                            }
                                            v1078 = v1088;
                                            v1077 += 1 ;
                                        }
                                        bool v1090;
                                        if (v153){
                                            bool v1089;
                                            v1089 = v151 < 2;
                                            v1090 = v1089;
                                        } else {
                                            v1090 = false;
                                        }
                                        bool v1091;
                                        v1091 = v1090 == false;
                                        if (v1091){
                                            assert("Index must be in range." && v1090);
                                        } else {
                                        }
                                        int v1093;
                                        v1093 = v1057[v151];
                                        bool v1095;
                                        v1095 = v1078 < v1093;
                                        int v1096;
                                        if (v1095){
                                            v1096 = v1078;
                                        } else {
                                            v1096 = v1093;
                                        }
                                        static_array<int,2> v1097;
                                        int v1099;
                                        v1099 = 0;
                                        while (while_method_0(v1099)){
                                            bool v1101;
                                            v1101 = 0 <= v1099;
                                            bool v1103;
                                            if (v1101){
                                                bool v1102;
                                                v1102 = v1099 < 2;
                                                v1103 = v1102;
                                            } else {
                                                v1103 = false;
                                            }
                                            bool v1104;
                                            v1104 = v1103 == false;
                                            if (v1104){
                                                assert("Index must be in range." && v1103);
                                            } else {
                                            }
                                            int v1106;
                                            v1106 = v147[v1099];
                                            bool v1108;
                                            v1108 = v151 == v1099;
                                            int v1109;
                                            if (v1108){
                                                v1109 = v1096;
                                            } else {
                                                v1109 = v1106;
                                            }
                                            v1097[v1099] = v1109;
                                            v1099 += 1 ;
                                        }
                                        static_array<int,2> v1110;
                                        int v1112;
                                        v1112 = 0;
                                        while (while_method_0(v1112)){
                                            bool v1114;
                                            v1114 = 0 <= v1112;
                                            bool v1116;
                                            if (v1114){
                                                bool v1115;
                                                v1115 = v1112 < 2;
                                                v1116 = v1115;
                                            } else {
                                                v1116 = false;
                                            }
                                            bool v1117;
                                            v1117 = v1116 == false;
                                            if (v1117){
                                                assert("Index must be in range." && v1116);
                                            } else {
                                            }
                                            int v1119;
                                            v1119 = v1057[v1112];
                                            bool v1122;
                                            if (v1114){
                                                bool v1121;
                                                v1121 = v1112 < 2;
                                                v1122 = v1121;
                                            } else {
                                                v1122 = false;
                                            }
                                            bool v1123;
                                            v1123 = v1122 == false;
                                            if (v1123){
                                                assert("Index must be in range." && v1122);
                                            } else {
                                            }
                                            int v1125;
                                            v1125 = v1097[v1112];
                                            int v1127;
                                            v1127 = v1119 - v1125;
                                            v1110[v1112] = v1127;
                                            v1112 += 1 ;
                                        }
                                        bool v1129;
                                        if (v153){
                                            bool v1128;
                                            v1128 = v151 < 2;
                                            v1129 = v1128;
                                        } else {
                                            v1129 = false;
                                        }
                                        bool v1130;
                                        v1130 = v1129 == false;
                                        if (v1130){
                                            assert("Index must be in range." && v1129);
                                        } else {
                                        }
                                        int v1132;
                                        v1132 = v1110[v151];
                                        bool v1134;
                                        v1134 = v1053 < v1132;
                                        bool v1135;
                                        v1135 = v1134 == false;
                                        if (v1135){
                                            assert("The raise amount must be less than the stack size after calling." && v1134);
                                        } else {
                                        }
                                        int v1137;
                                        v1137 = v1078 + v1053;
                                        bool v1139;
                                        if (v153){
                                            bool v1138;
                                            v1138 = v151 < 2;
                                            v1139 = v1138;
                                        } else {
                                            v1139 = false;
                                        }
                                        bool v1140;
                                        v1140 = v1139 == false;
                                        if (v1140){
                                            assert("Index must be in range." && v1139);
                                        } else {
                                        }
                                        int v1142;
                                        v1142 = v1057[v151];
                                        bool v1144;
                                        v1144 = v1137 < v1142;
                                        int v1145;
                                        if (v1144){
                                            v1145 = v1137;
                                        } else {
                                            v1145 = v1142;
                                        }
                                        static_array<int,2> v1146;
                                        int v1148;
                                        v1148 = 0;
                                        while (while_method_0(v1148)){
                                            bool v1150;
                                            v1150 = 0 <= v1148;
                                            bool v1152;
                                            if (v1150){
                                                bool v1151;
                                                v1151 = v1148 < 2;
                                                v1152 = v1151;
                                            } else {
                                                v1152 = false;
                                            }
                                            bool v1153;
                                            v1153 = v1152 == false;
                                            if (v1153){
                                                assert("Index must be in range." && v1152);
                                            } else {
                                            }
                                            int v1155;
                                            v1155 = v147[v1148];
                                            bool v1157;
                                            v1157 = v151 == v1148;
                                            int v1158;
                                            if (v1157){
                                                v1158 = v1145;
                                            } else {
                                                v1158 = v1155;
                                            }
                                            v1146[v1148] = v1158;
                                            v1148 += 1 ;
                                        }
                                        static_array<int,2> v1159;
                                        int v1161;
                                        v1161 = 0;
                                        while (while_method_0(v1161)){
                                            bool v1163;
                                            v1163 = 0 <= v1161;
                                            bool v1165;
                                            if (v1163){
                                                bool v1164;
                                                v1164 = v1161 < 2;
                                                v1165 = v1164;
                                            } else {
                                                v1165 = false;
                                            }
                                            bool v1166;
                                            v1166 = v1165 == false;
                                            if (v1166){
                                                assert("Index must be in range." && v1165);
                                            } else {
                                            }
                                            int v1168;
                                            v1168 = v1057[v1161];
                                            bool v1171;
                                            if (v1163){
                                                bool v1170;
                                                v1170 = v1161 < 2;
                                                v1171 = v1170;
                                            } else {
                                                v1171 = false;
                                            }
                                            bool v1172;
                                            v1172 = v1171 == false;
                                            if (v1172){
                                                assert("Index must be in range." && v1171);
                                            } else {
                                            }
                                            int v1174;
                                            v1174 = v1146[v1161];
                                            int v1176;
                                            v1176 = v1168 - v1174;
                                            v1159[v1161] = v1176;
                                            v1161 += 1 ;
                                        }
                                        int v1177;
                                        v1177 = v148 + 1;
                                        v1303 = try_round_36(v1053, v146, v1146, v1177, v1159, v150);
                                        break;
                                    }
                                    default: {
                                        assert("Invalid tag." && false); __trap();
                                    }
                                }
                                v2359 = Union3{Union3_1{v1303}};
                                break;
                            }
                            case 2: { // Human
                                Union7 v1305;
                                v1305 = Union7{Union7_2{v145, v146, v147, v148, v149, v150}};
                                v3.v5 = v1305;
                                Union3 v1306;
                                v1306 = Union3{Union3_1{v10}};
                                v3.v1 = v1306;
                                v2359 = Union3{Union3_0{}};
                                break;
                            }
                            case 3: { // Random
                                curandStatePhilox4_32_10_t & v1308 = v3.v4;
                                curandStatePhilox4_32_10_t & v1309 = v1308;
                                static_array<int,2> v1310;
                                int v1312;
                                v1312 = 0;
                                while (while_method_0(v1312)){
                                    bool v1314;
                                    v1314 = 0 <= v1312;
                                    bool v1316;
                                    if (v1314){
                                        bool v1315;
                                        v1315 = v1312 < 2;
                                        v1316 = v1315;
                                    } else {
                                        v1316 = false;
                                    }
                                    bool v1317;
                                    v1317 = v1316 == false;
                                    if (v1317){
                                        assert("Index must be in range." && v1316);
                                    } else {
                                    }
                                    int v1319;
                                    v1319 = v149[v1312];
                                    bool v1322;
                                    if (v1314){
                                        bool v1321;
                                        v1321 = v1312 < 2;
                                        v1322 = v1321;
                                    } else {
                                        v1322 = false;
                                    }
                                    bool v1323;
                                    v1323 = v1322 == false;
                                    if (v1323){
                                        assert("Index must be in range." && v1322);
                                    } else {
                                    }
                                    int v1325;
                                    v1325 = v147[v1312];
                                    int v1327;
                                    v1327 = v1319 + v1325;
                                    v1310[v1312] = v1327;
                                    v1312 += 1 ;
                                }
                                int v1328;
                                v1328 = v147[0];
                                int v1330; int v1331;
                                Tuple4 tmp45 = Tuple4{1, v1328};
                                v1330 = tmp45.v0; v1331 = tmp45.v1;
                                while (while_method_0(v1330)){
                                    bool v1333;
                                    v1333 = 0 <= v1330;
                                    bool v1335;
                                    if (v1333){
                                        bool v1334;
                                        v1334 = v1330 < 2;
                                        v1335 = v1334;
                                    } else {
                                        v1335 = false;
                                    }
                                    bool v1336;
                                    v1336 = v1335 == false;
                                    if (v1336){
                                        assert("Index must be in range." && v1335);
                                    } else {
                                    }
                                    int v1338;
                                    v1338 = v147[v1330];
                                    bool v1340;
                                    v1340 = v1331 >= v1338;
                                    int v1341;
                                    if (v1340){
                                        v1341 = v1331;
                                    } else {
                                        v1341 = v1338;
                                    }
                                    v1331 = v1341;
                                    v1330 += 1 ;
                                }
                                bool v1343;
                                if (v153){
                                    bool v1342;
                                    v1342 = v151 < 2;
                                    v1343 = v1342;
                                } else {
                                    v1343 = false;
                                }
                                bool v1344;
                                v1344 = v1343 == false;
                                if (v1344){
                                    assert("Index must be in range." && v1343);
                                } else {
                                }
                                int v1346;
                                v1346 = v1310[v151];
                                bool v1348;
                                v1348 = v1331 < v1346;
                                int v1349;
                                if (v1348){
                                    v1349 = v1331;
                                } else {
                                    v1349 = v1346;
                                }
                                static_array<int,2> v1350;
                                int v1352;
                                v1352 = 0;
                                while (while_method_0(v1352)){
                                    bool v1354;
                                    v1354 = 0 <= v1352;
                                    bool v1356;
                                    if (v1354){
                                        bool v1355;
                                        v1355 = v1352 < 2;
                                        v1356 = v1355;
                                    } else {
                                        v1356 = false;
                                    }
                                    bool v1357;
                                    v1357 = v1356 == false;
                                    if (v1357){
                                        assert("Index must be in range." && v1356);
                                    } else {
                                    }
                                    int v1359;
                                    v1359 = v147[v1352];
                                    bool v1361;
                                    v1361 = v151 == v1352;
                                    int v1362;
                                    if (v1361){
                                        v1362 = v1349;
                                    } else {
                                        v1362 = v1359;
                                    }
                                    v1350[v1352] = v1362;
                                    v1352 += 1 ;
                                }
                                int v1363;
                                v1363 = v1350[0];
                                int v1365; int v1366;
                                Tuple4 tmp46 = Tuple4{1, v1363};
                                v1365 = tmp46.v0; v1366 = tmp46.v1;
                                while (while_method_0(v1365)){
                                    bool v1368;
                                    v1368 = 0 <= v1365;
                                    bool v1370;
                                    if (v1368){
                                        bool v1369;
                                        v1369 = v1365 < 2;
                                        v1370 = v1369;
                                    } else {
                                        v1370 = false;
                                    }
                                    bool v1371;
                                    v1371 = v1370 == false;
                                    if (v1371){
                                        assert("Index must be in range." && v1370);
                                    } else {
                                    }
                                    int v1373;
                                    v1373 = v1350[v1365];
                                    int v1375;
                                    v1375 = v1366 + v1373;
                                    v1366 = v1375;
                                    v1365 += 1 ;
                                }
                                static_array<int,2> v1376;
                                int v1378;
                                v1378 = 0;
                                while (while_method_0(v1378)){
                                    bool v1380;
                                    v1380 = 0 <= v1378;
                                    bool v1382;
                                    if (v1380){
                                        bool v1381;
                                        v1381 = v1378 < 2;
                                        v1382 = v1381;
                                    } else {
                                        v1382 = false;
                                    }
                                    bool v1383;
                                    v1383 = v1382 == false;
                                    if (v1383){
                                        assert("Index must be in range." && v1382);
                                    } else {
                                    }
                                    int v1385;
                                    v1385 = v1310[v1378];
                                    bool v1388;
                                    if (v1380){
                                        bool v1387;
                                        v1387 = v1378 < 2;
                                        v1388 = v1387;
                                    } else {
                                        v1388 = false;
                                    }
                                    bool v1389;
                                    v1389 = v1388 == false;
                                    if (v1389){
                                        assert("Index must be in range." && v1388);
                                    } else {
                                    }
                                    int v1391;
                                    v1391 = v1350[v1378];
                                    int v1393;
                                    v1393 = v1385 - v1391;
                                    v1376[v1378] = v1393;
                                    v1378 += 1 ;
                                }
                                bool v1395;
                                if (v153){
                                    bool v1394;
                                    v1394 = v151 < 2;
                                    v1395 = v1394;
                                } else {
                                    v1395 = false;
                                }
                                bool v1396;
                                v1396 = v1395 == false;
                                if (v1396){
                                    assert("Index must be in range." && v1395);
                                } else {
                                }
                                int v1398;
                                v1398 = v147[v151];
                                bool v1400;
                                v1400 = v1398 < v1331;
                                float v1401;
                                if (v1400){
                                    v1401 = 1.0f;
                                } else {
                                    v1401 = 0.0f;
                                }
                                int v1402;
                                v1402 = v1366 / 3;
                                bool v1403;
                                v1403 = v145 <= v1402;
                                bool v1411;
                                if (v1403){
                                    bool v1405;
                                    if (v153){
                                        bool v1404;
                                        v1404 = v151 < 2;
                                        v1405 = v1404;
                                    } else {
                                        v1405 = false;
                                    }
                                    bool v1406;
                                    v1406 = v1405 == false;
                                    if (v1406){
                                        assert("Index must be in range." && v1405);
                                    } else {
                                    }
                                    int v1408;
                                    v1408 = v1376[v151];
                                    bool v1410;
                                    v1410 = v1402 < v1408;
                                    v1411 = v1410;
                                } else {
                                    v1411 = false;
                                }
                                float v1412;
                                if (v1411){
                                    v1412 = 1.0f;
                                } else {
                                    v1412 = 0.0f;
                                }
                                int v1413;
                                v1413 = v1366 / 2;
                                bool v1414;
                                v1414 = v145 <= v1413;
                                bool v1422;
                                if (v1414){
                                    bool v1416;
                                    if (v153){
                                        bool v1415;
                                        v1415 = v151 < 2;
                                        v1416 = v1415;
                                    } else {
                                        v1416 = false;
                                    }
                                    bool v1417;
                                    v1417 = v1416 == false;
                                    if (v1417){
                                        assert("Index must be in range." && v1416);
                                    } else {
                                    }
                                    int v1419;
                                    v1419 = v1376[v151];
                                    bool v1421;
                                    v1421 = v1413 < v1419;
                                    v1422 = v1421;
                                } else {
                                    v1422 = false;
                                }
                                float v1423;
                                if (v1422){
                                    v1423 = 1.0f;
                                } else {
                                    v1423 = 0.0f;
                                }
                                bool v1424;
                                v1424 = v145 <= v1366;
                                bool v1432;
                                if (v1424){
                                    bool v1426;
                                    if (v153){
                                        bool v1425;
                                        v1425 = v151 < 2;
                                        v1426 = v1425;
                                    } else {
                                        v1426 = false;
                                    }
                                    bool v1427;
                                    v1427 = v1426 == false;
                                    if (v1427){
                                        assert("Index must be in range." && v1426);
                                    } else {
                                    }
                                    int v1429;
                                    v1429 = v1376[v151];
                                    bool v1431;
                                    v1431 = v1366 < v1429;
                                    v1432 = v1431;
                                } else {
                                    v1432 = false;
                                }
                                float v1433;
                                if (v1432){
                                    v1433 = 1.0f;
                                } else {
                                    v1433 = 0.0f;
                                }
                                static_array<Tuple17,6> v1434;
                                Union1 v1436;
                                v1436 = Union1{Union1_2{}};
                                v1434[0] = Tuple17{v1436, v1401};
                                Union1 v1438;
                                v1438 = Union1{Union1_1{}};
                                v1434[1] = Tuple17{v1438, 4.0f};
                                Union1 v1440;
                                v1440 = Union1{Union1_3{v1402}};
                                v1434[2] = Tuple17{v1440, v1412};
                                Union1 v1442;
                                v1442 = Union1{Union1_3{v1413}};
                                v1434[3] = Tuple17{v1442, v1423};
                                Union1 v1444;
                                v1444 = Union1{Union1_3{v1366}};
                                v1434[4] = Tuple17{v1444, v1433};
                                Union1 v1446;
                                v1446 = Union1{Union1_0{}};
                                v1434[5] = Tuple17{v1446, 1.0f};
                                Union1 v1448;
                                v1448 = sample_discrete_47(v1434, v1309);
                                int v1449;
                                v1449 = sizeof(Union1);
                                unsigned long long v1450;
                                v1450 = (unsigned long long)v1449;
                                bool v1451;
                                v1451 = v1450 <= 98304ull;
                                bool v1452;
                                v1452 = v1451 == false;
                                if (v1452){
                                    assert("The dynamic shared memory is insufficient to allocate the tensor." && v1451);
                                } else {
                                }
                                extern __shared__ unsigned char v1454[];
                                bool v1455;
                                v1455 = v1450 <= v1450;
                                bool v1456;
                                v1456 = v1455 == false;
                                if (v1456){
                                    assert("The length of the partition has to be less than or equal to the length of the base array." && v1455);
                                } else {
                                }
                                Union1 * v1458;
                                v1458 = reinterpret_cast<Union1 *>(&v1454[0ull]);
                                int v1460;
                                v1460 = threadIdx.x;
                                bool v1461;
                                v1461 = v1460 == 0;
                                if (v1461){
                                    v1458[0] = v1448;
                                } else {
                                }
                                __syncthreads();
                                Union1 v1462;
                                v1462 = v1458[0];
                                __syncthreads();
                                Union6 v1463;
                                v1463 = Union6{Union6_2{v151, v1462}};
                                v5.push(v1463);
                                Union4 v1791;
                                switch (v1462.tag) {
                                    case 0: { // A_All_In
                                        static_array<int,2> v1667;
                                        int v1669;
                                        v1669 = 0;
                                        while (while_method_0(v1669)){
                                            bool v1671;
                                            v1671 = 0 <= v1669;
                                            bool v1673;
                                            if (v1671){
                                                bool v1672;
                                                v1672 = v1669 < 2;
                                                v1673 = v1672;
                                            } else {
                                                v1673 = false;
                                            }
                                            bool v1674;
                                            v1674 = v1673 == false;
                                            if (v1674){
                                                assert("Index must be in range." && v1673);
                                            } else {
                                            }
                                            int v1676;
                                            v1676 = v149[v1669];
                                            bool v1679;
                                            if (v1671){
                                                bool v1678;
                                                v1678 = v1669 < 2;
                                                v1679 = v1678;
                                            } else {
                                                v1679 = false;
                                            }
                                            bool v1680;
                                            v1680 = v1679 == false;
                                            if (v1680){
                                                assert("Index must be in range." && v1679);
                                            } else {
                                            }
                                            int v1682;
                                            v1682 = v147[v1669];
                                            int v1684;
                                            v1684 = v1676 + v1682;
                                            v1667[v1669] = v1684;
                                            v1669 += 1 ;
                                        }
                                        int v1685;
                                        v1685 = v147[0];
                                        int v1687; int v1688;
                                        Tuple4 tmp49 = Tuple4{1, v1685};
                                        v1687 = tmp49.v0; v1688 = tmp49.v1;
                                        while (while_method_0(v1687)){
                                            bool v1690;
                                            v1690 = 0 <= v1687;
                                            bool v1692;
                                            if (v1690){
                                                bool v1691;
                                                v1691 = v1687 < 2;
                                                v1692 = v1691;
                                            } else {
                                                v1692 = false;
                                            }
                                            bool v1693;
                                            v1693 = v1692 == false;
                                            if (v1693){
                                                assert("Index must be in range." && v1692);
                                            } else {
                                            }
                                            int v1695;
                                            v1695 = v147[v1687];
                                            bool v1697;
                                            v1697 = v1688 >= v1695;
                                            int v1698;
                                            if (v1697){
                                                v1698 = v1688;
                                            } else {
                                                v1698 = v1695;
                                            }
                                            v1688 = v1698;
                                            v1687 += 1 ;
                                        }
                                        bool v1700;
                                        if (v153){
                                            bool v1699;
                                            v1699 = v151 < 2;
                                            v1700 = v1699;
                                        } else {
                                            v1700 = false;
                                        }
                                        bool v1701;
                                        v1701 = v1700 == false;
                                        if (v1701){
                                            assert("Index must be in range." && v1700);
                                        } else {
                                        }
                                        int v1703;
                                        v1703 = v1667[v151];
                                        bool v1705;
                                        v1705 = v1688 < v1703;
                                        int v1706;
                                        if (v1705){
                                            v1706 = v1688;
                                        } else {
                                            v1706 = v1703;
                                        }
                                        static_array<int,2> v1707;
                                        int v1709;
                                        v1709 = 0;
                                        while (while_method_0(v1709)){
                                            bool v1711;
                                            v1711 = 0 <= v1709;
                                            bool v1713;
                                            if (v1711){
                                                bool v1712;
                                                v1712 = v1709 < 2;
                                                v1713 = v1712;
                                            } else {
                                                v1713 = false;
                                            }
                                            bool v1714;
                                            v1714 = v1713 == false;
                                            if (v1714){
                                                assert("Index must be in range." && v1713);
                                            } else {
                                            }
                                            int v1716;
                                            v1716 = v147[v1709];
                                            bool v1718;
                                            v1718 = v151 == v1709;
                                            int v1719;
                                            if (v1718){
                                                v1719 = v1706;
                                            } else {
                                                v1719 = v1716;
                                            }
                                            v1707[v1709] = v1719;
                                            v1709 += 1 ;
                                        }
                                        static_array<int,2> v1720;
                                        int v1722;
                                        v1722 = 0;
                                        while (while_method_0(v1722)){
                                            bool v1724;
                                            v1724 = 0 <= v1722;
                                            bool v1726;
                                            if (v1724){
                                                bool v1725;
                                                v1725 = v1722 < 2;
                                                v1726 = v1725;
                                            } else {
                                                v1726 = false;
                                            }
                                            bool v1727;
                                            v1727 = v1726 == false;
                                            if (v1727){
                                                assert("Index must be in range." && v1726);
                                            } else {
                                            }
                                            int v1729;
                                            v1729 = v1667[v1722];
                                            bool v1732;
                                            if (v1724){
                                                bool v1731;
                                                v1731 = v1722 < 2;
                                                v1732 = v1731;
                                            } else {
                                                v1732 = false;
                                            }
                                            bool v1733;
                                            v1733 = v1732 == false;
                                            if (v1733){
                                                assert("Index must be in range." && v1732);
                                            } else {
                                            }
                                            int v1735;
                                            v1735 = v1707[v1722];
                                            int v1737;
                                            v1737 = v1729 - v1735;
                                            v1720[v1722] = v1737;
                                            v1722 += 1 ;
                                        }
                                        bool v1739;
                                        if (v153){
                                            bool v1738;
                                            v1738 = v151 < 2;
                                            v1739 = v1738;
                                        } else {
                                            v1739 = false;
                                        }
                                        bool v1740;
                                        v1740 = v1739 == false;
                                        if (v1740){
                                            assert("Index must be in range." && v1739);
                                        } else {
                                        }
                                        int v1742;
                                        v1742 = v1720[v151];
                                        int v1744;
                                        v1744 = v1688 + v1742;
                                        bool v1746;
                                        if (v153){
                                            bool v1745;
                                            v1745 = v151 < 2;
                                            v1746 = v1745;
                                        } else {
                                            v1746 = false;
                                        }
                                        bool v1747;
                                        v1747 = v1746 == false;
                                        if (v1747){
                                            assert("Index must be in range." && v1746);
                                        } else {
                                        }
                                        int v1749;
                                        v1749 = v1667[v151];
                                        bool v1751;
                                        v1751 = v1744 < v1749;
                                        int v1752;
                                        if (v1751){
                                            v1752 = v1744;
                                        } else {
                                            v1752 = v1749;
                                        }
                                        static_array<int,2> v1753;
                                        int v1755;
                                        v1755 = 0;
                                        while (while_method_0(v1755)){
                                            bool v1757;
                                            v1757 = 0 <= v1755;
                                            bool v1759;
                                            if (v1757){
                                                bool v1758;
                                                v1758 = v1755 < 2;
                                                v1759 = v1758;
                                            } else {
                                                v1759 = false;
                                            }
                                            bool v1760;
                                            v1760 = v1759 == false;
                                            if (v1760){
                                                assert("Index must be in range." && v1759);
                                            } else {
                                            }
                                            int v1762;
                                            v1762 = v147[v1755];
                                            bool v1764;
                                            v1764 = v151 == v1755;
                                            int v1765;
                                            if (v1764){
                                                v1765 = v1752;
                                            } else {
                                                v1765 = v1762;
                                            }
                                            v1753[v1755] = v1765;
                                            v1755 += 1 ;
                                        }
                                        static_array<int,2> v1766;
                                        int v1768;
                                        v1768 = 0;
                                        while (while_method_0(v1768)){
                                            bool v1770;
                                            v1770 = 0 <= v1768;
                                            bool v1772;
                                            if (v1770){
                                                bool v1771;
                                                v1771 = v1768 < 2;
                                                v1772 = v1771;
                                            } else {
                                                v1772 = false;
                                            }
                                            bool v1773;
                                            v1773 = v1772 == false;
                                            if (v1773){
                                                assert("Index must be in range." && v1772);
                                            } else {
                                            }
                                            int v1775;
                                            v1775 = v1667[v1768];
                                            bool v1778;
                                            if (v1770){
                                                bool v1777;
                                                v1777 = v1768 < 2;
                                                v1778 = v1777;
                                            } else {
                                                v1778 = false;
                                            }
                                            bool v1779;
                                            v1779 = v1778 == false;
                                            if (v1779){
                                                assert("Index must be in range." && v1778);
                                            } else {
                                            }
                                            int v1781;
                                            v1781 = v1753[v1768];
                                            int v1783;
                                            v1783 = v1775 - v1781;
                                            v1766[v1768] = v1783;
                                            v1768 += 1 ;
                                        }
                                        bool v1784;
                                        v1784 = v1742 >= v145;
                                        int v1785;
                                        if (v1784){
                                            v1785 = v1742;
                                        } else {
                                            v1785 = v145;
                                        }
                                        int v1786;
                                        v1786 = v148 + 1;
                                        v1791 = try_round_36(v1785, v146, v1753, v1786, v1766, v150);
                                        break;
                                    }
                                    case 1: { // A_Call
                                        static_array<int,2> v1465;
                                        int v1467;
                                        v1467 = 0;
                                        while (while_method_0(v1467)){
                                            bool v1469;
                                            v1469 = 0 <= v1467;
                                            bool v1471;
                                            if (v1469){
                                                bool v1470;
                                                v1470 = v1467 < 2;
                                                v1471 = v1470;
                                            } else {
                                                v1471 = false;
                                            }
                                            bool v1472;
                                            v1472 = v1471 == false;
                                            if (v1472){
                                                assert("Index must be in range." && v1471);
                                            } else {
                                            }
                                            int v1474;
                                            v1474 = v149[v1467];
                                            bool v1477;
                                            if (v1469){
                                                bool v1476;
                                                v1476 = v1467 < 2;
                                                v1477 = v1476;
                                            } else {
                                                v1477 = false;
                                            }
                                            bool v1478;
                                            v1478 = v1477 == false;
                                            if (v1478){
                                                assert("Index must be in range." && v1477);
                                            } else {
                                            }
                                            int v1480;
                                            v1480 = v147[v1467];
                                            int v1482;
                                            v1482 = v1474 + v1480;
                                            v1465[v1467] = v1482;
                                            v1467 += 1 ;
                                        }
                                        int v1483;
                                        v1483 = v147[0];
                                        int v1485; int v1486;
                                        Tuple4 tmp50 = Tuple4{1, v1483};
                                        v1485 = tmp50.v0; v1486 = tmp50.v1;
                                        while (while_method_0(v1485)){
                                            bool v1488;
                                            v1488 = 0 <= v1485;
                                            bool v1490;
                                            if (v1488){
                                                bool v1489;
                                                v1489 = v1485 < 2;
                                                v1490 = v1489;
                                            } else {
                                                v1490 = false;
                                            }
                                            bool v1491;
                                            v1491 = v1490 == false;
                                            if (v1491){
                                                assert("Index must be in range." && v1490);
                                            } else {
                                            }
                                            int v1493;
                                            v1493 = v147[v1485];
                                            bool v1495;
                                            v1495 = v1486 >= v1493;
                                            int v1496;
                                            if (v1495){
                                                v1496 = v1486;
                                            } else {
                                                v1496 = v1493;
                                            }
                                            v1486 = v1496;
                                            v1485 += 1 ;
                                        }
                                        bool v1498;
                                        if (v153){
                                            bool v1497;
                                            v1497 = v151 < 2;
                                            v1498 = v1497;
                                        } else {
                                            v1498 = false;
                                        }
                                        bool v1499;
                                        v1499 = v1498 == false;
                                        if (v1499){
                                            assert("Index must be in range." && v1498);
                                        } else {
                                        }
                                        int v1501;
                                        v1501 = v1465[v151];
                                        bool v1503;
                                        v1503 = v1486 < v1501;
                                        int v1504;
                                        if (v1503){
                                            v1504 = v1486;
                                        } else {
                                            v1504 = v1501;
                                        }
                                        static_array<int,2> v1505;
                                        int v1507;
                                        v1507 = 0;
                                        while (while_method_0(v1507)){
                                            bool v1509;
                                            v1509 = 0 <= v1507;
                                            bool v1511;
                                            if (v1509){
                                                bool v1510;
                                                v1510 = v1507 < 2;
                                                v1511 = v1510;
                                            } else {
                                                v1511 = false;
                                            }
                                            bool v1512;
                                            v1512 = v1511 == false;
                                            if (v1512){
                                                assert("Index must be in range." && v1511);
                                            } else {
                                            }
                                            int v1514;
                                            v1514 = v147[v1507];
                                            bool v1516;
                                            v1516 = v151 == v1507;
                                            int v1517;
                                            if (v1516){
                                                v1517 = v1504;
                                            } else {
                                                v1517 = v1514;
                                            }
                                            v1505[v1507] = v1517;
                                            v1507 += 1 ;
                                        }
                                        static_array<int,2> v1518;
                                        int v1520;
                                        v1520 = 0;
                                        while (while_method_0(v1520)){
                                            bool v1522;
                                            v1522 = 0 <= v1520;
                                            bool v1524;
                                            if (v1522){
                                                bool v1523;
                                                v1523 = v1520 < 2;
                                                v1524 = v1523;
                                            } else {
                                                v1524 = false;
                                            }
                                            bool v1525;
                                            v1525 = v1524 == false;
                                            if (v1525){
                                                assert("Index must be in range." && v1524);
                                            } else {
                                            }
                                            int v1527;
                                            v1527 = v1465[v1520];
                                            bool v1530;
                                            if (v1522){
                                                bool v1529;
                                                v1529 = v1520 < 2;
                                                v1530 = v1529;
                                            } else {
                                                v1530 = false;
                                            }
                                            bool v1531;
                                            v1531 = v1530 == false;
                                            if (v1531){
                                                assert("Index must be in range." && v1530);
                                            } else {
                                            }
                                            int v1533;
                                            v1533 = v1505[v1520];
                                            int v1535;
                                            v1535 = v1527 - v1533;
                                            v1518[v1520] = v1535;
                                            v1520 += 1 ;
                                        }
                                        bool v1536;
                                        v1536 = v151 < 2;
                                        if (v1536){
                                            int v1537;
                                            v1537 = v148 + 1;
                                            v1791 = try_round_36(v145, v146, v1505, v1537, v1518, v150);
                                        } else {
                                            v1791 = go_next_street_38(v145, v146, v1505, v148, v1518, v150);
                                        }
                                        break;
                                    }
                                    case 2: { // A_Fold
                                        v1791 = Union4{Union4_1{v145, v146, v147, v148, v149, v150}};
                                        break;
                                    }
                                    case 3: { // A_Raise
                                        int v1541 = v1462.case3.v0;
                                        bool v1542;
                                        v1542 = v145 <= v1541;
                                        bool v1543;
                                        v1543 = v1542 == false;
                                        if (v1543){
                                            assert("The raise amount must match the minimum." && v1542);
                                        } else {
                                        }
                                        static_array<int,2> v1545;
                                        int v1547;
                                        v1547 = 0;
                                        while (while_method_0(v1547)){
                                            bool v1549;
                                            v1549 = 0 <= v1547;
                                            bool v1551;
                                            if (v1549){
                                                bool v1550;
                                                v1550 = v1547 < 2;
                                                v1551 = v1550;
                                            } else {
                                                v1551 = false;
                                            }
                                            bool v1552;
                                            v1552 = v1551 == false;
                                            if (v1552){
                                                assert("Index must be in range." && v1551);
                                            } else {
                                            }
                                            int v1554;
                                            v1554 = v149[v1547];
                                            bool v1557;
                                            if (v1549){
                                                bool v1556;
                                                v1556 = v1547 < 2;
                                                v1557 = v1556;
                                            } else {
                                                v1557 = false;
                                            }
                                            bool v1558;
                                            v1558 = v1557 == false;
                                            if (v1558){
                                                assert("Index must be in range." && v1557);
                                            } else {
                                            }
                                            int v1560;
                                            v1560 = v147[v1547];
                                            int v1562;
                                            v1562 = v1554 + v1560;
                                            v1545[v1547] = v1562;
                                            v1547 += 1 ;
                                        }
                                        int v1563;
                                        v1563 = v147[0];
                                        int v1565; int v1566;
                                        Tuple4 tmp51 = Tuple4{1, v1563};
                                        v1565 = tmp51.v0; v1566 = tmp51.v1;
                                        while (while_method_0(v1565)){
                                            bool v1568;
                                            v1568 = 0 <= v1565;
                                            bool v1570;
                                            if (v1568){
                                                bool v1569;
                                                v1569 = v1565 < 2;
                                                v1570 = v1569;
                                            } else {
                                                v1570 = false;
                                            }
                                            bool v1571;
                                            v1571 = v1570 == false;
                                            if (v1571){
                                                assert("Index must be in range." && v1570);
                                            } else {
                                            }
                                            int v1573;
                                            v1573 = v147[v1565];
                                            bool v1575;
                                            v1575 = v1566 >= v1573;
                                            int v1576;
                                            if (v1575){
                                                v1576 = v1566;
                                            } else {
                                                v1576 = v1573;
                                            }
                                            v1566 = v1576;
                                            v1565 += 1 ;
                                        }
                                        bool v1578;
                                        if (v153){
                                            bool v1577;
                                            v1577 = v151 < 2;
                                            v1578 = v1577;
                                        } else {
                                            v1578 = false;
                                        }
                                        bool v1579;
                                        v1579 = v1578 == false;
                                        if (v1579){
                                            assert("Index must be in range." && v1578);
                                        } else {
                                        }
                                        int v1581;
                                        v1581 = v1545[v151];
                                        bool v1583;
                                        v1583 = v1566 < v1581;
                                        int v1584;
                                        if (v1583){
                                            v1584 = v1566;
                                        } else {
                                            v1584 = v1581;
                                        }
                                        static_array<int,2> v1585;
                                        int v1587;
                                        v1587 = 0;
                                        while (while_method_0(v1587)){
                                            bool v1589;
                                            v1589 = 0 <= v1587;
                                            bool v1591;
                                            if (v1589){
                                                bool v1590;
                                                v1590 = v1587 < 2;
                                                v1591 = v1590;
                                            } else {
                                                v1591 = false;
                                            }
                                            bool v1592;
                                            v1592 = v1591 == false;
                                            if (v1592){
                                                assert("Index must be in range." && v1591);
                                            } else {
                                            }
                                            int v1594;
                                            v1594 = v147[v1587];
                                            bool v1596;
                                            v1596 = v151 == v1587;
                                            int v1597;
                                            if (v1596){
                                                v1597 = v1584;
                                            } else {
                                                v1597 = v1594;
                                            }
                                            v1585[v1587] = v1597;
                                            v1587 += 1 ;
                                        }
                                        static_array<int,2> v1598;
                                        int v1600;
                                        v1600 = 0;
                                        while (while_method_0(v1600)){
                                            bool v1602;
                                            v1602 = 0 <= v1600;
                                            bool v1604;
                                            if (v1602){
                                                bool v1603;
                                                v1603 = v1600 < 2;
                                                v1604 = v1603;
                                            } else {
                                                v1604 = false;
                                            }
                                            bool v1605;
                                            v1605 = v1604 == false;
                                            if (v1605){
                                                assert("Index must be in range." && v1604);
                                            } else {
                                            }
                                            int v1607;
                                            v1607 = v1545[v1600];
                                            bool v1610;
                                            if (v1602){
                                                bool v1609;
                                                v1609 = v1600 < 2;
                                                v1610 = v1609;
                                            } else {
                                                v1610 = false;
                                            }
                                            bool v1611;
                                            v1611 = v1610 == false;
                                            if (v1611){
                                                assert("Index must be in range." && v1610);
                                            } else {
                                            }
                                            int v1613;
                                            v1613 = v1585[v1600];
                                            int v1615;
                                            v1615 = v1607 - v1613;
                                            v1598[v1600] = v1615;
                                            v1600 += 1 ;
                                        }
                                        bool v1617;
                                        if (v153){
                                            bool v1616;
                                            v1616 = v151 < 2;
                                            v1617 = v1616;
                                        } else {
                                            v1617 = false;
                                        }
                                        bool v1618;
                                        v1618 = v1617 == false;
                                        if (v1618){
                                            assert("Index must be in range." && v1617);
                                        } else {
                                        }
                                        int v1620;
                                        v1620 = v1598[v151];
                                        bool v1622;
                                        v1622 = v1541 < v1620;
                                        bool v1623;
                                        v1623 = v1622 == false;
                                        if (v1623){
                                            assert("The raise amount must be less than the stack size after calling." && v1622);
                                        } else {
                                        }
                                        int v1625;
                                        v1625 = v1566 + v1541;
                                        bool v1627;
                                        if (v153){
                                            bool v1626;
                                            v1626 = v151 < 2;
                                            v1627 = v1626;
                                        } else {
                                            v1627 = false;
                                        }
                                        bool v1628;
                                        v1628 = v1627 == false;
                                        if (v1628){
                                            assert("Index must be in range." && v1627);
                                        } else {
                                        }
                                        int v1630;
                                        v1630 = v1545[v151];
                                        bool v1632;
                                        v1632 = v1625 < v1630;
                                        int v1633;
                                        if (v1632){
                                            v1633 = v1625;
                                        } else {
                                            v1633 = v1630;
                                        }
                                        static_array<int,2> v1634;
                                        int v1636;
                                        v1636 = 0;
                                        while (while_method_0(v1636)){
                                            bool v1638;
                                            v1638 = 0 <= v1636;
                                            bool v1640;
                                            if (v1638){
                                                bool v1639;
                                                v1639 = v1636 < 2;
                                                v1640 = v1639;
                                            } else {
                                                v1640 = false;
                                            }
                                            bool v1641;
                                            v1641 = v1640 == false;
                                            if (v1641){
                                                assert("Index must be in range." && v1640);
                                            } else {
                                            }
                                            int v1643;
                                            v1643 = v147[v1636];
                                            bool v1645;
                                            v1645 = v151 == v1636;
                                            int v1646;
                                            if (v1645){
                                                v1646 = v1633;
                                            } else {
                                                v1646 = v1643;
                                            }
                                            v1634[v1636] = v1646;
                                            v1636 += 1 ;
                                        }
                                        static_array<int,2> v1647;
                                        int v1649;
                                        v1649 = 0;
                                        while (while_method_0(v1649)){
                                            bool v1651;
                                            v1651 = 0 <= v1649;
                                            bool v1653;
                                            if (v1651){
                                                bool v1652;
                                                v1652 = v1649 < 2;
                                                v1653 = v1652;
                                            } else {
                                                v1653 = false;
                                            }
                                            bool v1654;
                                            v1654 = v1653 == false;
                                            if (v1654){
                                                assert("Index must be in range." && v1653);
                                            } else {
                                            }
                                            int v1656;
                                            v1656 = v1545[v1649];
                                            bool v1659;
                                            if (v1651){
                                                bool v1658;
                                                v1658 = v1649 < 2;
                                                v1659 = v1658;
                                            } else {
                                                v1659 = false;
                                            }
                                            bool v1660;
                                            v1660 = v1659 == false;
                                            if (v1660){
                                                assert("Index must be in range." && v1659);
                                            } else {
                                            }
                                            int v1662;
                                            v1662 = v1634[v1649];
                                            int v1664;
                                            v1664 = v1656 - v1662;
                                            v1647[v1649] = v1664;
                                            v1649 += 1 ;
                                        }
                                        int v1665;
                                        v1665 = v148 + 1;
                                        v1791 = try_round_36(v1541, v146, v1634, v1665, v1647, v150);
                                        break;
                                    }
                                    default: {
                                        assert("Invalid tag." && false); __trap();
                                    }
                                }
                                v2359 = Union3{Union3_1{v1791}};
                                break;
                            }
                            default: {
                                assert("Invalid tag." && false); __trap();
                            }
                        }
                        break;
                    }
                    case 5: { // G_Round'
                        int v1876 = v10.case5.v0; static_array<static_array<unsigned char,2>,2> v1877 = v10.case5.v1; static_array<int,2> v1878 = v10.case5.v2; int v1879 = v10.case5.v3; static_array<int,2> v1880 = v10.case5.v4; Union5 v1881 = v10.case5.v5; Union1 v1882 = v10.case5.v6;
                        int v1883;
                        v1883 = v1879 % 2;
                        Union6 v1884;
                        v1884 = Union6{Union6_2{v1883, v1882}};
                        v5.push(v1884);
                        Union4 v2215;
                        switch (v1882.tag) {
                            case 0: { // A_All_In
                                static_array<int,2> v2090;
                                int v2092;
                                v2092 = 0;
                                while (while_method_0(v2092)){
                                    bool v2094;
                                    v2094 = 0 <= v2092;
                                    bool v2096;
                                    if (v2094){
                                        bool v2095;
                                        v2095 = v2092 < 2;
                                        v2096 = v2095;
                                    } else {
                                        v2096 = false;
                                    }
                                    bool v2097;
                                    v2097 = v2096 == false;
                                    if (v2097){
                                        assert("Index must be in range." && v2096);
                                    } else {
                                    }
                                    int v2099;
                                    v2099 = v1880[v2092];
                                    bool v2102;
                                    if (v2094){
                                        bool v2101;
                                        v2101 = v2092 < 2;
                                        v2102 = v2101;
                                    } else {
                                        v2102 = false;
                                    }
                                    bool v2103;
                                    v2103 = v2102 == false;
                                    if (v2103){
                                        assert("Index must be in range." && v2102);
                                    } else {
                                    }
                                    int v2105;
                                    v2105 = v1878[v2092];
                                    int v2107;
                                    v2107 = v2099 + v2105;
                                    v2090[v2092] = v2107;
                                    v2092 += 1 ;
                                }
                                int v2108;
                                v2108 = v1878[0];
                                int v2110; int v2111;
                                Tuple4 tmp52 = Tuple4{1, v2108};
                                v2110 = tmp52.v0; v2111 = tmp52.v1;
                                while (while_method_0(v2110)){
                                    bool v2113;
                                    v2113 = 0 <= v2110;
                                    bool v2115;
                                    if (v2113){
                                        bool v2114;
                                        v2114 = v2110 < 2;
                                        v2115 = v2114;
                                    } else {
                                        v2115 = false;
                                    }
                                    bool v2116;
                                    v2116 = v2115 == false;
                                    if (v2116){
                                        assert("Index must be in range." && v2115);
                                    } else {
                                    }
                                    int v2118;
                                    v2118 = v1878[v2110];
                                    bool v2120;
                                    v2120 = v2111 >= v2118;
                                    int v2121;
                                    if (v2120){
                                        v2121 = v2111;
                                    } else {
                                        v2121 = v2118;
                                    }
                                    v2111 = v2121;
                                    v2110 += 1 ;
                                }
                                bool v2122;
                                v2122 = 0 <= v1883;
                                bool v2124;
                                if (v2122){
                                    bool v2123;
                                    v2123 = v1883 < 2;
                                    v2124 = v2123;
                                } else {
                                    v2124 = false;
                                }
                                bool v2125;
                                v2125 = v2124 == false;
                                if (v2125){
                                    assert("Index must be in range." && v2124);
                                } else {
                                }
                                int v2127;
                                v2127 = v2090[v1883];
                                bool v2129;
                                v2129 = v2111 < v2127;
                                int v2130;
                                if (v2129){
                                    v2130 = v2111;
                                } else {
                                    v2130 = v2127;
                                }
                                static_array<int,2> v2131;
                                int v2133;
                                v2133 = 0;
                                while (while_method_0(v2133)){
                                    bool v2135;
                                    v2135 = 0 <= v2133;
                                    bool v2137;
                                    if (v2135){
                                        bool v2136;
                                        v2136 = v2133 < 2;
                                        v2137 = v2136;
                                    } else {
                                        v2137 = false;
                                    }
                                    bool v2138;
                                    v2138 = v2137 == false;
                                    if (v2138){
                                        assert("Index must be in range." && v2137);
                                    } else {
                                    }
                                    int v2140;
                                    v2140 = v1878[v2133];
                                    bool v2142;
                                    v2142 = v1883 == v2133;
                                    int v2143;
                                    if (v2142){
                                        v2143 = v2130;
                                    } else {
                                        v2143 = v2140;
                                    }
                                    v2131[v2133] = v2143;
                                    v2133 += 1 ;
                                }
                                static_array<int,2> v2144;
                                int v2146;
                                v2146 = 0;
                                while (while_method_0(v2146)){
                                    bool v2148;
                                    v2148 = 0 <= v2146;
                                    bool v2150;
                                    if (v2148){
                                        bool v2149;
                                        v2149 = v2146 < 2;
                                        v2150 = v2149;
                                    } else {
                                        v2150 = false;
                                    }
                                    bool v2151;
                                    v2151 = v2150 == false;
                                    if (v2151){
                                        assert("Index must be in range." && v2150);
                                    } else {
                                    }
                                    int v2153;
                                    v2153 = v2090[v2146];
                                    bool v2156;
                                    if (v2148){
                                        bool v2155;
                                        v2155 = v2146 < 2;
                                        v2156 = v2155;
                                    } else {
                                        v2156 = false;
                                    }
                                    bool v2157;
                                    v2157 = v2156 == false;
                                    if (v2157){
                                        assert("Index must be in range." && v2156);
                                    } else {
                                    }
                                    int v2159;
                                    v2159 = v2131[v2146];
                                    int v2161;
                                    v2161 = v2153 - v2159;
                                    v2144[v2146] = v2161;
                                    v2146 += 1 ;
                                }
                                bool v2163;
                                if (v2122){
                                    bool v2162;
                                    v2162 = v1883 < 2;
                                    v2163 = v2162;
                                } else {
                                    v2163 = false;
                                }
                                bool v2164;
                                v2164 = v2163 == false;
                                if (v2164){
                                    assert("Index must be in range." && v2163);
                                } else {
                                }
                                int v2166;
                                v2166 = v2144[v1883];
                                int v2168;
                                v2168 = v2111 + v2166;
                                bool v2170;
                                if (v2122){
                                    bool v2169;
                                    v2169 = v1883 < 2;
                                    v2170 = v2169;
                                } else {
                                    v2170 = false;
                                }
                                bool v2171;
                                v2171 = v2170 == false;
                                if (v2171){
                                    assert("Index must be in range." && v2170);
                                } else {
                                }
                                int v2173;
                                v2173 = v2090[v1883];
                                bool v2175;
                                v2175 = v2168 < v2173;
                                int v2176;
                                if (v2175){
                                    v2176 = v2168;
                                } else {
                                    v2176 = v2173;
                                }
                                static_array<int,2> v2177;
                                int v2179;
                                v2179 = 0;
                                while (while_method_0(v2179)){
                                    bool v2181;
                                    v2181 = 0 <= v2179;
                                    bool v2183;
                                    if (v2181){
                                        bool v2182;
                                        v2182 = v2179 < 2;
                                        v2183 = v2182;
                                    } else {
                                        v2183 = false;
                                    }
                                    bool v2184;
                                    v2184 = v2183 == false;
                                    if (v2184){
                                        assert("Index must be in range." && v2183);
                                    } else {
                                    }
                                    int v2186;
                                    v2186 = v1878[v2179];
                                    bool v2188;
                                    v2188 = v1883 == v2179;
                                    int v2189;
                                    if (v2188){
                                        v2189 = v2176;
                                    } else {
                                        v2189 = v2186;
                                    }
                                    v2177[v2179] = v2189;
                                    v2179 += 1 ;
                                }
                                static_array<int,2> v2190;
                                int v2192;
                                v2192 = 0;
                                while (while_method_0(v2192)){
                                    bool v2194;
                                    v2194 = 0 <= v2192;
                                    bool v2196;
                                    if (v2194){
                                        bool v2195;
                                        v2195 = v2192 < 2;
                                        v2196 = v2195;
                                    } else {
                                        v2196 = false;
                                    }
                                    bool v2197;
                                    v2197 = v2196 == false;
                                    if (v2197){
                                        assert("Index must be in range." && v2196);
                                    } else {
                                    }
                                    int v2199;
                                    v2199 = v2090[v2192];
                                    bool v2202;
                                    if (v2194){
                                        bool v2201;
                                        v2201 = v2192 < 2;
                                        v2202 = v2201;
                                    } else {
                                        v2202 = false;
                                    }
                                    bool v2203;
                                    v2203 = v2202 == false;
                                    if (v2203){
                                        assert("Index must be in range." && v2202);
                                    } else {
                                    }
                                    int v2205;
                                    v2205 = v2177[v2192];
                                    int v2207;
                                    v2207 = v2199 - v2205;
                                    v2190[v2192] = v2207;
                                    v2192 += 1 ;
                                }
                                bool v2208;
                                v2208 = v2166 >= v1876;
                                int v2209;
                                if (v2208){
                                    v2209 = v2166;
                                } else {
                                    v2209 = v1876;
                                }
                                int v2210;
                                v2210 = v1879 + 1;
                                v2215 = try_round_36(v2209, v1877, v2177, v2210, v2190, v1881);
                                break;
                            }
                            case 1: { // A_Call
                                static_array<int,2> v1886;
                                int v1888;
                                v1888 = 0;
                                while (while_method_0(v1888)){
                                    bool v1890;
                                    v1890 = 0 <= v1888;
                                    bool v1892;
                                    if (v1890){
                                        bool v1891;
                                        v1891 = v1888 < 2;
                                        v1892 = v1891;
                                    } else {
                                        v1892 = false;
                                    }
                                    bool v1893;
                                    v1893 = v1892 == false;
                                    if (v1893){
                                        assert("Index must be in range." && v1892);
                                    } else {
                                    }
                                    int v1895;
                                    v1895 = v1880[v1888];
                                    bool v1898;
                                    if (v1890){
                                        bool v1897;
                                        v1897 = v1888 < 2;
                                        v1898 = v1897;
                                    } else {
                                        v1898 = false;
                                    }
                                    bool v1899;
                                    v1899 = v1898 == false;
                                    if (v1899){
                                        assert("Index must be in range." && v1898);
                                    } else {
                                    }
                                    int v1901;
                                    v1901 = v1878[v1888];
                                    int v1903;
                                    v1903 = v1895 + v1901;
                                    v1886[v1888] = v1903;
                                    v1888 += 1 ;
                                }
                                int v1904;
                                v1904 = v1878[0];
                                int v1906; int v1907;
                                Tuple4 tmp53 = Tuple4{1, v1904};
                                v1906 = tmp53.v0; v1907 = tmp53.v1;
                                while (while_method_0(v1906)){
                                    bool v1909;
                                    v1909 = 0 <= v1906;
                                    bool v1911;
                                    if (v1909){
                                        bool v1910;
                                        v1910 = v1906 < 2;
                                        v1911 = v1910;
                                    } else {
                                        v1911 = false;
                                    }
                                    bool v1912;
                                    v1912 = v1911 == false;
                                    if (v1912){
                                        assert("Index must be in range." && v1911);
                                    } else {
                                    }
                                    int v1914;
                                    v1914 = v1878[v1906];
                                    bool v1916;
                                    v1916 = v1907 >= v1914;
                                    int v1917;
                                    if (v1916){
                                        v1917 = v1907;
                                    } else {
                                        v1917 = v1914;
                                    }
                                    v1907 = v1917;
                                    v1906 += 1 ;
                                }
                                bool v1918;
                                v1918 = 0 <= v1883;
                                bool v1920;
                                if (v1918){
                                    bool v1919;
                                    v1919 = v1883 < 2;
                                    v1920 = v1919;
                                } else {
                                    v1920 = false;
                                }
                                bool v1921;
                                v1921 = v1920 == false;
                                if (v1921){
                                    assert("Index must be in range." && v1920);
                                } else {
                                }
                                int v1923;
                                v1923 = v1886[v1883];
                                bool v1925;
                                v1925 = v1907 < v1923;
                                int v1926;
                                if (v1925){
                                    v1926 = v1907;
                                } else {
                                    v1926 = v1923;
                                }
                                static_array<int,2> v1927;
                                int v1929;
                                v1929 = 0;
                                while (while_method_0(v1929)){
                                    bool v1931;
                                    v1931 = 0 <= v1929;
                                    bool v1933;
                                    if (v1931){
                                        bool v1932;
                                        v1932 = v1929 < 2;
                                        v1933 = v1932;
                                    } else {
                                        v1933 = false;
                                    }
                                    bool v1934;
                                    v1934 = v1933 == false;
                                    if (v1934){
                                        assert("Index must be in range." && v1933);
                                    } else {
                                    }
                                    int v1936;
                                    v1936 = v1878[v1929];
                                    bool v1938;
                                    v1938 = v1883 == v1929;
                                    int v1939;
                                    if (v1938){
                                        v1939 = v1926;
                                    } else {
                                        v1939 = v1936;
                                    }
                                    v1927[v1929] = v1939;
                                    v1929 += 1 ;
                                }
                                static_array<int,2> v1940;
                                int v1942;
                                v1942 = 0;
                                while (while_method_0(v1942)){
                                    bool v1944;
                                    v1944 = 0 <= v1942;
                                    bool v1946;
                                    if (v1944){
                                        bool v1945;
                                        v1945 = v1942 < 2;
                                        v1946 = v1945;
                                    } else {
                                        v1946 = false;
                                    }
                                    bool v1947;
                                    v1947 = v1946 == false;
                                    if (v1947){
                                        assert("Index must be in range." && v1946);
                                    } else {
                                    }
                                    int v1949;
                                    v1949 = v1886[v1942];
                                    bool v1952;
                                    if (v1944){
                                        bool v1951;
                                        v1951 = v1942 < 2;
                                        v1952 = v1951;
                                    } else {
                                        v1952 = false;
                                    }
                                    bool v1953;
                                    v1953 = v1952 == false;
                                    if (v1953){
                                        assert("Index must be in range." && v1952);
                                    } else {
                                    }
                                    int v1955;
                                    v1955 = v1927[v1942];
                                    int v1957;
                                    v1957 = v1949 - v1955;
                                    v1940[v1942] = v1957;
                                    v1942 += 1 ;
                                }
                                bool v1958;
                                v1958 = v1883 < 2;
                                if (v1958){
                                    int v1959;
                                    v1959 = v1879 + 1;
                                    v2215 = try_round_36(v1876, v1877, v1927, v1959, v1940, v1881);
                                } else {
                                    v2215 = go_next_street_38(v1876, v1877, v1927, v1879, v1940, v1881);
                                }
                                break;
                            }
                            case 2: { // A_Fold
                                v2215 = Union4{Union4_1{v1876, v1877, v1878, v1879, v1880, v1881}};
                                break;
                            }
                            case 3: { // A_Raise
                                int v1963 = v1882.case3.v0;
                                bool v1964;
                                v1964 = v1876 <= v1963;
                                bool v1965;
                                v1965 = v1964 == false;
                                if (v1965){
                                    assert("The raise amount must match the minimum." && v1964);
                                } else {
                                }
                                static_array<int,2> v1967;
                                int v1969;
                                v1969 = 0;
                                while (while_method_0(v1969)){
                                    bool v1971;
                                    v1971 = 0 <= v1969;
                                    bool v1973;
                                    if (v1971){
                                        bool v1972;
                                        v1972 = v1969 < 2;
                                        v1973 = v1972;
                                    } else {
                                        v1973 = false;
                                    }
                                    bool v1974;
                                    v1974 = v1973 == false;
                                    if (v1974){
                                        assert("Index must be in range." && v1973);
                                    } else {
                                    }
                                    int v1976;
                                    v1976 = v1880[v1969];
                                    bool v1979;
                                    if (v1971){
                                        bool v1978;
                                        v1978 = v1969 < 2;
                                        v1979 = v1978;
                                    } else {
                                        v1979 = false;
                                    }
                                    bool v1980;
                                    v1980 = v1979 == false;
                                    if (v1980){
                                        assert("Index must be in range." && v1979);
                                    } else {
                                    }
                                    int v1982;
                                    v1982 = v1878[v1969];
                                    int v1984;
                                    v1984 = v1976 + v1982;
                                    v1967[v1969] = v1984;
                                    v1969 += 1 ;
                                }
                                int v1985;
                                v1985 = v1878[0];
                                int v1987; int v1988;
                                Tuple4 tmp54 = Tuple4{1, v1985};
                                v1987 = tmp54.v0; v1988 = tmp54.v1;
                                while (while_method_0(v1987)){
                                    bool v1990;
                                    v1990 = 0 <= v1987;
                                    bool v1992;
                                    if (v1990){
                                        bool v1991;
                                        v1991 = v1987 < 2;
                                        v1992 = v1991;
                                    } else {
                                        v1992 = false;
                                    }
                                    bool v1993;
                                    v1993 = v1992 == false;
                                    if (v1993){
                                        assert("Index must be in range." && v1992);
                                    } else {
                                    }
                                    int v1995;
                                    v1995 = v1878[v1987];
                                    bool v1997;
                                    v1997 = v1988 >= v1995;
                                    int v1998;
                                    if (v1997){
                                        v1998 = v1988;
                                    } else {
                                        v1998 = v1995;
                                    }
                                    v1988 = v1998;
                                    v1987 += 1 ;
                                }
                                bool v1999;
                                v1999 = 0 <= v1883;
                                bool v2001;
                                if (v1999){
                                    bool v2000;
                                    v2000 = v1883 < 2;
                                    v2001 = v2000;
                                } else {
                                    v2001 = false;
                                }
                                bool v2002;
                                v2002 = v2001 == false;
                                if (v2002){
                                    assert("Index must be in range." && v2001);
                                } else {
                                }
                                int v2004;
                                v2004 = v1967[v1883];
                                bool v2006;
                                v2006 = v1988 < v2004;
                                int v2007;
                                if (v2006){
                                    v2007 = v1988;
                                } else {
                                    v2007 = v2004;
                                }
                                static_array<int,2> v2008;
                                int v2010;
                                v2010 = 0;
                                while (while_method_0(v2010)){
                                    bool v2012;
                                    v2012 = 0 <= v2010;
                                    bool v2014;
                                    if (v2012){
                                        bool v2013;
                                        v2013 = v2010 < 2;
                                        v2014 = v2013;
                                    } else {
                                        v2014 = false;
                                    }
                                    bool v2015;
                                    v2015 = v2014 == false;
                                    if (v2015){
                                        assert("Index must be in range." && v2014);
                                    } else {
                                    }
                                    int v2017;
                                    v2017 = v1878[v2010];
                                    bool v2019;
                                    v2019 = v1883 == v2010;
                                    int v2020;
                                    if (v2019){
                                        v2020 = v2007;
                                    } else {
                                        v2020 = v2017;
                                    }
                                    v2008[v2010] = v2020;
                                    v2010 += 1 ;
                                }
                                static_array<int,2> v2021;
                                int v2023;
                                v2023 = 0;
                                while (while_method_0(v2023)){
                                    bool v2025;
                                    v2025 = 0 <= v2023;
                                    bool v2027;
                                    if (v2025){
                                        bool v2026;
                                        v2026 = v2023 < 2;
                                        v2027 = v2026;
                                    } else {
                                        v2027 = false;
                                    }
                                    bool v2028;
                                    v2028 = v2027 == false;
                                    if (v2028){
                                        assert("Index must be in range." && v2027);
                                    } else {
                                    }
                                    int v2030;
                                    v2030 = v1967[v2023];
                                    bool v2033;
                                    if (v2025){
                                        bool v2032;
                                        v2032 = v2023 < 2;
                                        v2033 = v2032;
                                    } else {
                                        v2033 = false;
                                    }
                                    bool v2034;
                                    v2034 = v2033 == false;
                                    if (v2034){
                                        assert("Index must be in range." && v2033);
                                    } else {
                                    }
                                    int v2036;
                                    v2036 = v2008[v2023];
                                    int v2038;
                                    v2038 = v2030 - v2036;
                                    v2021[v2023] = v2038;
                                    v2023 += 1 ;
                                }
                                bool v2040;
                                if (v1999){
                                    bool v2039;
                                    v2039 = v1883 < 2;
                                    v2040 = v2039;
                                } else {
                                    v2040 = false;
                                }
                                bool v2041;
                                v2041 = v2040 == false;
                                if (v2041){
                                    assert("Index must be in range." && v2040);
                                } else {
                                }
                                int v2043;
                                v2043 = v2021[v1883];
                                bool v2045;
                                v2045 = v1963 < v2043;
                                bool v2046;
                                v2046 = v2045 == false;
                                if (v2046){
                                    assert("The raise amount must be less than the stack size after calling." && v2045);
                                } else {
                                }
                                int v2048;
                                v2048 = v1988 + v1963;
                                bool v2050;
                                if (v1999){
                                    bool v2049;
                                    v2049 = v1883 < 2;
                                    v2050 = v2049;
                                } else {
                                    v2050 = false;
                                }
                                bool v2051;
                                v2051 = v2050 == false;
                                if (v2051){
                                    assert("Index must be in range." && v2050);
                                } else {
                                }
                                int v2053;
                                v2053 = v1967[v1883];
                                bool v2055;
                                v2055 = v2048 < v2053;
                                int v2056;
                                if (v2055){
                                    v2056 = v2048;
                                } else {
                                    v2056 = v2053;
                                }
                                static_array<int,2> v2057;
                                int v2059;
                                v2059 = 0;
                                while (while_method_0(v2059)){
                                    bool v2061;
                                    v2061 = 0 <= v2059;
                                    bool v2063;
                                    if (v2061){
                                        bool v2062;
                                        v2062 = v2059 < 2;
                                        v2063 = v2062;
                                    } else {
                                        v2063 = false;
                                    }
                                    bool v2064;
                                    v2064 = v2063 == false;
                                    if (v2064){
                                        assert("Index must be in range." && v2063);
                                    } else {
                                    }
                                    int v2066;
                                    v2066 = v1878[v2059];
                                    bool v2068;
                                    v2068 = v1883 == v2059;
                                    int v2069;
                                    if (v2068){
                                        v2069 = v2056;
                                    } else {
                                        v2069 = v2066;
                                    }
                                    v2057[v2059] = v2069;
                                    v2059 += 1 ;
                                }
                                static_array<int,2> v2070;
                                int v2072;
                                v2072 = 0;
                                while (while_method_0(v2072)){
                                    bool v2074;
                                    v2074 = 0 <= v2072;
                                    bool v2076;
                                    if (v2074){
                                        bool v2075;
                                        v2075 = v2072 < 2;
                                        v2076 = v2075;
                                    } else {
                                        v2076 = false;
                                    }
                                    bool v2077;
                                    v2077 = v2076 == false;
                                    if (v2077){
                                        assert("Index must be in range." && v2076);
                                    } else {
                                    }
                                    int v2079;
                                    v2079 = v1967[v2072];
                                    bool v2082;
                                    if (v2074){
                                        bool v2081;
                                        v2081 = v2072 < 2;
                                        v2082 = v2081;
                                    } else {
                                        v2082 = false;
                                    }
                                    bool v2083;
                                    v2083 = v2082 == false;
                                    if (v2083){
                                        assert("Index must be in range." && v2082);
                                    } else {
                                    }
                                    int v2085;
                                    v2085 = v2057[v2072];
                                    int v2087;
                                    v2087 = v2079 - v2085;
                                    v2070[v2072] = v2087;
                                    v2072 += 1 ;
                                }
                                int v2088;
                                v2088 = v1879 + 1;
                                v2215 = try_round_36(v1963, v1877, v2057, v2088, v2070, v1881);
                                break;
                            }
                            default: {
                                assert("Invalid tag." && false); __trap();
                            }
                        }
                        v2359 = Union3{Union3_1{v2215}};
                        break;
                    }
                    case 6: { // G_Showdown
                        int v31 = v10.case6.v0; static_array<static_array<unsigned char,2>,2> v32 = v10.case6.v1; static_array<int,2> v33 = v10.case6.v2; int v34 = v10.case6.v3; static_array<int,2> v35 = v10.case6.v4; Union5 v36 = v10.case6.v5;
                        static_array<unsigned char,5> v39;
                        switch (v36.tag) {
                            case 2: { // River
                                static_array<unsigned char,5> v37 = v36.case2.v0;
                                v39 = v37;
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in showdown.");
                                __trap();
                            }
                        }
                        static_array<unsigned char,2> v40;
                        v40 = v32[0];
                        static_array<unsigned char,7> v42;
                        int v44;
                        v44 = 0;
                        while (while_method_0(v44)){
                            bool v46;
                            v46 = 0 <= v44;
                            bool v48;
                            if (v46){
                                bool v47;
                                v47 = v44 < 2;
                                v48 = v47;
                            } else {
                                v48 = false;
                            }
                            bool v49;
                            v49 = v48 == false;
                            if (v49){
                                assert("Index must be in range." && v48);
                            } else {
                            }
                            unsigned char v51;
                            v51 = v40[v44];
                            v42[v44] = v51;
                            v44 += 1 ;
                        }
                        int v53;
                        v53 = 0;
                        while (while_method_2(v53)){
                            bool v55;
                            v55 = 0 <= v53;
                            bool v57;
                            if (v55){
                                bool v56;
                                v56 = v53 < 5;
                                v57 = v56;
                            } else {
                                v57 = false;
                            }
                            bool v58;
                            v58 = v57 == false;
                            if (v58){
                                assert("Index must be in range." && v57);
                            } else {
                            }
                            unsigned char v60;
                            v60 = v39[v53];
                            int v62;
                            v62 = 2 + v53;
                            v42[v62] = v60;
                            v53 += 1 ;
                        }
                        static_array<unsigned char,5> v63; char v64;
                        Tuple0 tmp79 = score_51(v42);
                        v63 = tmp79.v0; v64 = tmp79.v1;
                        static_array<unsigned char,2> v65;
                        v65 = v32[1];
                        static_array<unsigned char,7> v67;
                        int v69;
                        v69 = 0;
                        while (while_method_0(v69)){
                            bool v71;
                            v71 = 0 <= v69;
                            bool v73;
                            if (v71){
                                bool v72;
                                v72 = v69 < 2;
                                v73 = v72;
                            } else {
                                v73 = false;
                            }
                            bool v74;
                            v74 = v73 == false;
                            if (v74){
                                assert("Index must be in range." && v73);
                            } else {
                            }
                            unsigned char v76;
                            v76 = v65[v69];
                            v67[v69] = v76;
                            v69 += 1 ;
                        }
                        int v78;
                        v78 = 0;
                        while (while_method_2(v78)){
                            bool v80;
                            v80 = 0 <= v78;
                            bool v82;
                            if (v80){
                                bool v81;
                                v81 = v78 < 5;
                                v82 = v81;
                            } else {
                                v82 = false;
                            }
                            bool v83;
                            v83 = v82 == false;
                            if (v83){
                                assert("Index must be in range." && v82);
                            } else {
                            }
                            unsigned char v85;
                            v85 = v39[v78];
                            int v87;
                            v87 = 2 + v78;
                            v67[v87] = v85;
                            v78 += 1 ;
                        }
                        static_array<unsigned char,5> v88; char v89;
                        Tuple0 tmp80 = score_51(v67);
                        v88 = tmp80.v0; v89 = tmp80.v1;
                        int v90;
                        v90 = v34 % 2;
                        bool v91;
                        v91 = 0 <= v90;
                        bool v93;
                        if (v91){
                            bool v92;
                            v92 = v90 < 2;
                            v93 = v92;
                        } else {
                            v93 = false;
                        }
                        bool v94;
                        v94 = v93 == false;
                        if (v94){
                            assert("Index must be in range." && v93);
                        } else {
                        }
                        int v96;
                        v96 = v33[v90];
                        bool v98;
                        v98 = v64 < v89;
                        Union11 v104;
                        if (v98){
                            v104 = Union11{Union11_2{}};
                        } else {
                            bool v100;
                            v100 = v64 > v89;
                            if (v100){
                                v104 = Union11{Union11_1{}};
                            } else {
                                v104 = Union11{Union11_0{}};
                            }
                        }
                        Union11 v132;
                        switch (v104.tag) {
                            case 0: { // Eq
                                Union11 v105;
                                v105 = Union11{Union11_0{}};
                                int v106;
                                v106 = 0;
                                while (while_method_2(v106)){
                                    bool v108;
                                    v108 = 0 <= v106;
                                    bool v110;
                                    if (v108){
                                        bool v109;
                                        v109 = v106 < 5;
                                        v110 = v109;
                                    } else {
                                        v110 = false;
                                    }
                                    bool v111;
                                    v111 = v110 == false;
                                    if (v111){
                                        assert("Index must be in range." && v110);
                                    } else {
                                    }
                                    unsigned char v113;
                                    v113 = v63[v106];
                                    bool v116;
                                    if (v108){
                                        bool v115;
                                        v115 = v106 < 5;
                                        v116 = v115;
                                    } else {
                                        v116 = false;
                                    }
                                    bool v117;
                                    v117 = v116 == false;
                                    if (v117){
                                        assert("Index must be in range." && v116);
                                    } else {
                                    }
                                    unsigned char v119;
                                    v119 = v88[v106];
                                    unsigned char v121;
                                    v121 = v113 / 4u;
                                    unsigned char v122;
                                    v122 = v119 / 4u;
                                    bool v123;
                                    v123 = v121 < v122;
                                    Union11 v129;
                                    if (v123){
                                        v129 = Union11{Union11_2{}};
                                    } else {
                                        bool v125;
                                        v125 = v121 > v122;
                                        if (v125){
                                            v129 = Union11{Union11_1{}};
                                        } else {
                                            v129 = Union11{Union11_0{}};
                                        }
                                    }
                                    bool v130;
                                    switch (v129.tag) {
                                        case 0: { // Eq
                                            v130 = true;
                                            break;
                                        }
                                        default: {
                                            v130 = false;
                                        }
                                    }
                                    bool v131;
                                    v131 = v130 == false;
                                    if (v131){
                                        v105 = v129;
                                        break;
                                    } else {
                                    }
                                    v106 += 1 ;
                                }
                                v132 = v105;
                                break;
                            }
                            default: {
                                v132 = v104;
                            }
                        }
                        int v137; int v138;
                        switch (v132.tag) {
                            case 0: { // Eq
                                v137 = 0; v138 = -1;
                                break;
                            }
                            case 1: { // Gt
                                v137 = v96; v138 = 0;
                                break;
                            }
                            case 2: { // Lt
                                v137 = v96; v138 = 1;
                                break;
                            }
                            default: {
                                assert("Invalid tag." && false); __trap();
                            }
                        }
                        static_array<Tuple0,2> v139;
                        v139[0] = Tuple0{v63, v64};
                        v139[1] = Tuple0{v88, v89};
                        Union6 v141;
                        v141 = Union6{Union6_4{v137, v139, v138}};
                        v5.push(v141);
                        Union7 v142;
                        v142 = Union7{Union7_1{v31, v32, v33, v34, v35, v36}};
                        v3.v5 = v142;
                        Union3 v143;
                        v143 = Union3{Union3_0{}};
                        v3.v1 = v143;
                        v2359 = Union3{Union3_0{}};
                        break;
                    }
                    case 7: { // G_Turn
                        int v2236 = v10.case7.v0; static_array<static_array<unsigned char,2>,2> v2237 = v10.case7.v1; static_array<int,2> v2238 = v10.case7.v2; int v2239 = v10.case7.v3; static_array<int,2> v2240 = v10.case7.v4; Union5 v2241 = v10.case7.v5;
                        curandStatePhilox4_32_10_t & v2242 = v3.v4;
                        curandStatePhilox4_32_10_t & v2243 = v2242;
                        static_array<unsigned char,1> v2244; unsigned long long v2245;
                        Tuple12 tmp81 = draw_cards_40(v2243, v6);
                        v2244 = tmp81.v0; v2245 = tmp81.v1;
                        v3.v0 = v2245;
                        static_array_list<unsigned char,5> v2246;
                        v2246 = get_community_cards_41(v2241, v2244);
                        Union6 v2247;
                        v2247 = Union6{Union6_0{v2246}};
                        v5.push(v2247);
                        Union5 v2272;
                        switch (v2241.tag) {
                            case 0: { // Flop
                                static_array<unsigned char,3> v2248 = v2241.case0.v0;
                                static_array<unsigned char,4> v2249;
                                int v2251;
                                v2251 = 0;
                                while (while_method_1(v2251)){
                                    bool v2253;
                                    v2253 = 0 <= v2251;
                                    bool v2255;
                                    if (v2253){
                                        bool v2254;
                                        v2254 = v2251 < 3;
                                        v2255 = v2254;
                                    } else {
                                        v2255 = false;
                                    }
                                    bool v2256;
                                    v2256 = v2255 == false;
                                    if (v2256){
                                        assert("Index must be in range." && v2255);
                                    } else {
                                    }
                                    unsigned char v2258;
                                    v2258 = v2248[v2251];
                                    v2249[v2251] = v2258;
                                    v2251 += 1 ;
                                }
                                int v2260;
                                v2260 = 0;
                                while (while_method_6(v2260)){
                                    bool v2262;
                                    v2262 = 0 <= v2260;
                                    bool v2264;
                                    if (v2262){
                                        bool v2263;
                                        v2263 = v2260 < 1;
                                        v2264 = v2263;
                                    } else {
                                        v2264 = false;
                                    }
                                    bool v2265;
                                    v2265 = v2264 == false;
                                    if (v2265){
                                        assert("Index must be in range." && v2264);
                                    } else {
                                    }
                                    unsigned char v2267;
                                    v2267 = v2244[v2260];
                                    int v2269;
                                    v2269 = 3 + v2260;
                                    v2249[v2269] = v2267;
                                    v2260 += 1 ;
                                }
                                v2272 = Union5{Union5_3{v2249}};
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in turn.");
                                __trap();
                            }
                        }
                        int v2273;
                        v2273 = 2;
                        int v2274;
                        v2274 = 0;
                        Union4 v2275;
                        v2275 = try_round_36(v2273, v2237, v2238, v2274, v2240, v2272);
                        v2359 = Union3{Union3_1{v2275}};
                        break;
                    }
                    default: {
                        assert("Invalid tag." && false); __trap();
                    }
                }
                break;
            }
            default: {
                assert("Invalid tag." && false); __trap();
            }
        }
        v8 = v2359;
    }
    return ;
}
__device__ void f_53(unsigned char * v0, unsigned long long v1){
    unsigned long long * v2;
    v2 = (unsigned long long *)(v0+0ull);
    v2[0] = v1;
    return ;
}
__device__ void f_54(unsigned char * v0, int v1){
    int * v2;
    v2 = (int *)(v0+8ull);
    v2[0] = v1;
    return ;
}
__device__ void f_55(unsigned char * v0){
    return ;
}
__device__ void f_57(unsigned char * v0, int v1){
    int * v2;
    v2 = (int *)(v0+0ull);
    v2[0] = v1;
    return ;
}
__device__ void f_61(unsigned char * v0, unsigned char v1){
    unsigned char * v2;
    v2 = (unsigned char *)(v0+0ull);
    v2[0] = v1;
    return ;
}
__device__ void f_60(unsigned char * v0, unsigned char v1){
    return f_61(v0, v1);
}
__device__ void f_59(unsigned char * v0, static_array<unsigned char,2> v1){
    int v2;
    v2 = 0;
    while (while_method_0(v2)){
        unsigned long long v4;
        v4 = (unsigned long long)v2;
        unsigned char * v5;
        v5 = (unsigned char *)(v0+v4);
        bool v7;
        v7 = 0 <= v2;
        bool v9;
        if (v7){
            bool v8;
            v8 = v2 < 2;
            v9 = v8;
        } else {
            v9 = false;
        }
        bool v10;
        v10 = v9 == false;
        if (v10){
            assert("Index must be in range." && v9);
        } else {
        }
        unsigned char v12;
        v12 = v1[v2];
        f_60(v5, v12);
        v2 += 1 ;
    }
    return ;
}
__device__ void f_62(unsigned char * v0, int v1){
    int * v2;
    v2 = (int *)(v0+28ull);
    v2[0] = v1;
    return ;
}
__device__ void f_63(unsigned char * v0, static_array<unsigned char,3> v1){
    int v2;
    v2 = 0;
    while (while_method_1(v2)){
        unsigned long long v4;
        v4 = (unsigned long long)v2;
        unsigned char * v5;
        v5 = (unsigned char *)(v0+v4);
        bool v7;
        v7 = 0 <= v2;
        bool v9;
        if (v7){
            bool v8;
            v8 = v2 < 3;
            v9 = v8;
        } else {
            v9 = false;
        }
        bool v10;
        v10 = v9 == false;
        if (v10){
            assert("Index must be in range." && v9);
        } else {
        }
        unsigned char v12;
        v12 = v1[v2];
        f_60(v5, v12);
        v2 += 1 ;
    }
    return ;
}
__device__ void f_64(unsigned char * v0, static_array<unsigned char,5> v1){
    int v2;
    v2 = 0;
    while (while_method_2(v2)){
        unsigned long long v4;
        v4 = (unsigned long long)v2;
        unsigned char * v5;
        v5 = (unsigned char *)(v0+v4);
        bool v7;
        v7 = 0 <= v2;
        bool v9;
        if (v7){
            bool v8;
            v8 = v2 < 5;
            v9 = v8;
        } else {
            v9 = false;
        }
        bool v10;
        v10 = v9 == false;
        if (v10){
            assert("Index must be in range." && v9);
        } else {
        }
        unsigned char v12;
        v12 = v1[v2];
        f_60(v5, v12);
        v2 += 1 ;
    }
    return ;
}
__device__ void f_65(unsigned char * v0, static_array<unsigned char,4> v1){
    int v2;
    v2 = 0;
    while (while_method_3(v2)){
        unsigned long long v4;
        v4 = (unsigned long long)v2;
        unsigned char * v5;
        v5 = (unsigned char *)(v0+v4);
        bool v7;
        v7 = 0 <= v2;
        bool v9;
        if (v7){
            bool v8;
            v8 = v2 < 4;
            v9 = v8;
        } else {
            v9 = false;
        }
        bool v10;
        v10 = v9 == false;
        if (v10){
            assert("Index must be in range." && v9);
        } else {
        }
        unsigned char v12;
        v12 = v1[v2];
        f_60(v5, v12);
        v2 += 1 ;
    }
    return ;
}
__device__ void f_58(unsigned char * v0, int v1, static_array<static_array<unsigned char,2>,2> v2, static_array<int,2> v3, int v4, static_array<int,2> v5, Union5 v6){
    int * v7;
    v7 = (int *)(v0+0ull);
    v7[0] = v1;
    int v9;
    v9 = 0;
    while (while_method_0(v9)){
        unsigned long long v11;
        v11 = (unsigned long long)v9;
        unsigned long long v12;
        v12 = v11 * 2ull;
        unsigned long long v13;
        v13 = 4ull + v12;
        unsigned char * v14;
        v14 = (unsigned char *)(v0+v13);
        bool v16;
        v16 = 0 <= v9;
        bool v18;
        if (v16){
            bool v17;
            v17 = v9 < 2;
            v18 = v17;
        } else {
            v18 = false;
        }
        bool v19;
        v19 = v18 == false;
        if (v19){
            assert("Index must be in range." && v18);
        } else {
        }
        static_array<unsigned char,2> v21;
        v21 = v2[v9];
        f_59(v14, v21);
        v9 += 1 ;
    }
    int v23;
    v23 = 0;
    while (while_method_0(v23)){
        unsigned long long v25;
        v25 = (unsigned long long)v23;
        unsigned long long v26;
        v26 = v25 * 4ull;
        unsigned long long v27;
        v27 = 8ull + v26;
        unsigned char * v28;
        v28 = (unsigned char *)(v0+v27);
        bool v30;
        v30 = 0 <= v23;
        bool v32;
        if (v30){
            bool v31;
            v31 = v23 < 2;
            v32 = v31;
        } else {
            v32 = false;
        }
        bool v33;
        v33 = v32 == false;
        if (v33){
            assert("Index must be in range." && v32);
        } else {
        }
        int v35;
        v35 = v3[v23];
        f_57(v28, v35);
        v23 += 1 ;
    }
    int * v37;
    v37 = (int *)(v0+16ull);
    v37[0] = v4;
    int v39;
    v39 = 0;
    while (while_method_0(v39)){
        unsigned long long v41;
        v41 = (unsigned long long)v39;
        unsigned long long v42;
        v42 = v41 * 4ull;
        unsigned long long v43;
        v43 = 20ull + v42;
        unsigned char * v44;
        v44 = (unsigned char *)(v0+v43);
        bool v46;
        v46 = 0 <= v39;
        bool v48;
        if (v46){
            bool v47;
            v47 = v39 < 2;
            v48 = v47;
        } else {
            v48 = false;
        }
        bool v49;
        v49 = v48 == false;
        if (v49){
            assert("Index must be in range." && v48);
        } else {
        }
        int v51;
        v51 = v5[v39];
        f_57(v44, v51);
        v39 += 1 ;
    }
    int v53;
    v53 = v6.tag;
    f_62(v0, v53);
    unsigned char * v54;
    v54 = (unsigned char *)(v0+32ull);
    switch (v6.tag) {
        case 0: { // Flop
            static_array<unsigned char,3> v56 = v6.case0.v0;
            return f_63(v54, v56);
            break;
        }
        case 1: { // Preflop
            return f_55(v54);
            break;
        }
        case 2: { // River
            static_array<unsigned char,5> v57 = v6.case2.v0;
            return f_64(v54, v57);
            break;
        }
        case 3: { // Turn
            static_array<unsigned char,4> v58 = v6.case3.v0;
            return f_65(v54, v58);
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
}
__device__ void f_67(unsigned char * v0, int v1){
    int * v2;
    v2 = (int *)(v0+40ull);
    v2[0] = v1;
    return ;
}
__device__ void f_66(unsigned char * v0, int v1, static_array<static_array<unsigned char,2>,2> v2, static_array<int,2> v3, int v4, static_array<int,2> v5, Union5 v6, Union1 v7){
    int * v8;
    v8 = (int *)(v0+0ull);
    v8[0] = v1;
    int v10;
    v10 = 0;
    while (while_method_0(v10)){
        unsigned long long v12;
        v12 = (unsigned long long)v10;
        unsigned long long v13;
        v13 = v12 * 2ull;
        unsigned long long v14;
        v14 = 4ull + v13;
        unsigned char * v15;
        v15 = (unsigned char *)(v0+v14);
        bool v17;
        v17 = 0 <= v10;
        bool v19;
        if (v17){
            bool v18;
            v18 = v10 < 2;
            v19 = v18;
        } else {
            v19 = false;
        }
        bool v20;
        v20 = v19 == false;
        if (v20){
            assert("Index must be in range." && v19);
        } else {
        }
        static_array<unsigned char,2> v22;
        v22 = v2[v10];
        f_59(v15, v22);
        v10 += 1 ;
    }
    int v24;
    v24 = 0;
    while (while_method_0(v24)){
        unsigned long long v26;
        v26 = (unsigned long long)v24;
        unsigned long long v27;
        v27 = v26 * 4ull;
        unsigned long long v28;
        v28 = 8ull + v27;
        unsigned char * v29;
        v29 = (unsigned char *)(v0+v28);
        bool v31;
        v31 = 0 <= v24;
        bool v33;
        if (v31){
            bool v32;
            v32 = v24 < 2;
            v33 = v32;
        } else {
            v33 = false;
        }
        bool v34;
        v34 = v33 == false;
        if (v34){
            assert("Index must be in range." && v33);
        } else {
        }
        int v36;
        v36 = v3[v24];
        f_57(v29, v36);
        v24 += 1 ;
    }
    int * v38;
    v38 = (int *)(v0+16ull);
    v38[0] = v4;
    int v40;
    v40 = 0;
    while (while_method_0(v40)){
        unsigned long long v42;
        v42 = (unsigned long long)v40;
        unsigned long long v43;
        v43 = v42 * 4ull;
        unsigned long long v44;
        v44 = 20ull + v43;
        unsigned char * v45;
        v45 = (unsigned char *)(v0+v44);
        bool v47;
        v47 = 0 <= v40;
        bool v49;
        if (v47){
            bool v48;
            v48 = v40 < 2;
            v49 = v48;
        } else {
            v49 = false;
        }
        bool v50;
        v50 = v49 == false;
        if (v50){
            assert("Index must be in range." && v49);
        } else {
        }
        int v52;
        v52 = v5[v40];
        f_57(v45, v52);
        v40 += 1 ;
    }
    int v54;
    v54 = v6.tag;
    f_62(v0, v54);
    unsigned char * v55;
    v55 = (unsigned char *)(v0+32ull);
    switch (v6.tag) {
        case 0: { // Flop
            static_array<unsigned char,3> v57 = v6.case0.v0;
            f_63(v55, v57);
            break;
        }
        case 1: { // Preflop
            f_55(v55);
            break;
        }
        case 2: { // River
            static_array<unsigned char,5> v58 = v6.case2.v0;
            f_64(v55, v58);
            break;
        }
        case 3: { // Turn
            static_array<unsigned char,4> v59 = v6.case3.v0;
            f_65(v55, v59);
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
    int v60;
    v60 = v7.tag;
    f_67(v0, v60);
    unsigned char * v61;
    v61 = (unsigned char *)(v0+44ull);
    switch (v7.tag) {
        case 0: { // A_All_In
            return f_55(v61);
            break;
        }
        case 1: { // A_Call
            return f_55(v61);
            break;
        }
        case 2: { // A_Fold
            return f_55(v61);
            break;
        }
        case 3: { // A_Raise
            int v63 = v7.case3.v0;
            return f_57(v61, v63);
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
}
__device__ void f_56(unsigned char * v0, Union4 v1){
    int v2;
    v2 = v1.tag;
    f_57(v0, v2);
    unsigned char * v3;
    v3 = (unsigned char *)(v0+16ull);
    switch (v1.tag) {
        case 0: { // G_Flop
            int v5 = v1.case0.v0; static_array<static_array<unsigned char,2>,2> v6 = v1.case0.v1; static_array<int,2> v7 = v1.case0.v2; int v8 = v1.case0.v3; static_array<int,2> v9 = v1.case0.v4; Union5 v10 = v1.case0.v5;
            return f_58(v3, v5, v6, v7, v8, v9, v10);
            break;
        }
        case 1: { // G_Fold
            int v11 = v1.case1.v0; static_array<static_array<unsigned char,2>,2> v12 = v1.case1.v1; static_array<int,2> v13 = v1.case1.v2; int v14 = v1.case1.v3; static_array<int,2> v15 = v1.case1.v4; Union5 v16 = v1.case1.v5;
            return f_58(v3, v11, v12, v13, v14, v15, v16);
            break;
        }
        case 2: { // G_Preflop
            return f_55(v3);
            break;
        }
        case 3: { // G_River
            int v17 = v1.case3.v0; static_array<static_array<unsigned char,2>,2> v18 = v1.case3.v1; static_array<int,2> v19 = v1.case3.v2; int v20 = v1.case3.v3; static_array<int,2> v21 = v1.case3.v4; Union5 v22 = v1.case3.v5;
            return f_58(v3, v17, v18, v19, v20, v21, v22);
            break;
        }
        case 4: { // G_Round
            int v23 = v1.case4.v0; static_array<static_array<unsigned char,2>,2> v24 = v1.case4.v1; static_array<int,2> v25 = v1.case4.v2; int v26 = v1.case4.v3; static_array<int,2> v27 = v1.case4.v4; Union5 v28 = v1.case4.v5;
            return f_58(v3, v23, v24, v25, v26, v27, v28);
            break;
        }
        case 5: { // G_Round'
            int v29 = v1.case5.v0; static_array<static_array<unsigned char,2>,2> v30 = v1.case5.v1; static_array<int,2> v31 = v1.case5.v2; int v32 = v1.case5.v3; static_array<int,2> v33 = v1.case5.v4; Union5 v34 = v1.case5.v5; Union1 v35 = v1.case5.v6;
            return f_66(v3, v29, v30, v31, v32, v33, v34, v35);
            break;
        }
        case 6: { // G_Showdown
            int v36 = v1.case6.v0; static_array<static_array<unsigned char,2>,2> v37 = v1.case6.v1; static_array<int,2> v38 = v1.case6.v2; int v39 = v1.case6.v3; static_array<int,2> v40 = v1.case6.v4; Union5 v41 = v1.case6.v5;
            return f_58(v3, v36, v37, v38, v39, v40, v41);
            break;
        }
        case 7: { // G_Turn
            int v42 = v1.case7.v0; static_array<static_array<unsigned char,2>,2> v43 = v1.case7.v1; static_array<int,2> v44 = v1.case7.v2; int v45 = v1.case7.v3; static_array<int,2> v46 = v1.case7.v4; Union5 v47 = v1.case7.v5;
            return f_58(v3, v42, v43, v44, v45, v46, v47);
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
}
__device__ void f_68(unsigned char * v0, int v1){
    int * v2;
    v2 = (int *)(v0+80ull);
    v2[0] = v1;
    return ;
}
__device__ void f_70(unsigned char * v0, static_array_list<unsigned char,5> v1){
    int v2;
    v2 = v1.length;
    f_57(v0, v2);
    int v3;
    v3 = v1.length;
    int v4;
    v4 = 0;
    while (while_method_4(v3, v4)){
        unsigned long long v6;
        v6 = (unsigned long long)v4;
        unsigned long long v7;
        v7 = 4ull + v6;
        unsigned char * v8;
        v8 = (unsigned char *)(v0+v7);
        unsigned char v10;
        v10 = v1[v4];
        f_60(v8, v10);
        v4 += 1 ;
    }
    return ;
}
__device__ void f_71(unsigned char * v0, int v1, int v2){
    int * v3;
    v3 = (int *)(v0+0ull);
    v3[0] = v1;
    int * v5;
    v5 = (int *)(v0+4ull);
    v5[0] = v2;
    return ;
}
__device__ void f_73(unsigned char * v0, int v1){
    int * v2;
    v2 = (int *)(v0+4ull);
    v2[0] = v1;
    return ;
}
__device__ void f_72(unsigned char * v0, int v1, Union1 v2){
    int * v3;
    v3 = (int *)(v0+0ull);
    v3[0] = v1;
    int v5;
    v5 = v2.tag;
    f_73(v0, v5);
    unsigned char * v6;
    v6 = (unsigned char *)(v0+8ull);
    switch (v2.tag) {
        case 0: { // A_All_In
            return f_55(v6);
            break;
        }
        case 1: { // A_Call
            return f_55(v6);
            break;
        }
        case 2: { // A_Fold
            return f_55(v6);
            break;
        }
        case 3: { // A_Raise
            int v8 = v2.case3.v0;
            return f_57(v6, v8);
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
}
__device__ void f_74(unsigned char * v0, int v1, static_array<unsigned char,2> v2){
    int * v3;
    v3 = (int *)(v0+0ull);
    v3[0] = v1;
    int v5;
    v5 = 0;
    while (while_method_0(v5)){
        unsigned long long v7;
        v7 = (unsigned long long)v5;
        unsigned long long v8;
        v8 = 4ull + v7;
        unsigned char * v9;
        v9 = (unsigned char *)(v0+v8);
        bool v11;
        v11 = 0 <= v5;
        bool v13;
        if (v11){
            bool v12;
            v12 = v5 < 2;
            v13 = v12;
        } else {
            v13 = false;
        }
        bool v14;
        v14 = v13 == false;
        if (v14){
            assert("Index must be in range." && v13);
        } else {
        }
        unsigned char v16;
        v16 = v2[v5];
        f_60(v9, v16);
        v5 += 1 ;
    }
    return ;
}
__device__ void f_77(unsigned char * v0, static_array<unsigned char,5> v1, char v2){
    int v3;
    v3 = 0;
    while (while_method_2(v3)){
        unsigned long long v5;
        v5 = (unsigned long long)v3;
        unsigned char * v6;
        v6 = (unsigned char *)(v0+v5);
        bool v8;
        v8 = 0 <= v3;
        bool v10;
        if (v8){
            bool v9;
            v9 = v3 < 5;
            v10 = v9;
        } else {
            v10 = false;
        }
        bool v11;
        v11 = v10 == false;
        if (v11){
            assert("Index must be in range." && v10);
        } else {
        }
        unsigned char v13;
        v13 = v1[v3];
        f_60(v6, v13);
        v3 += 1 ;
    }
    char * v15;
    v15 = (char *)(v0+5ull);
    v15[0] = v2;
    return ;
}
__device__ void f_76(unsigned char * v0, static_array<unsigned char,5> v1, char v2){
    return f_77(v0, v1, v2);
}
__device__ void f_75(unsigned char * v0, int v1, static_array<Tuple0,2> v2, int v3){
    int * v4;
    v4 = (int *)(v0+0ull);
    v4[0] = v1;
    int v6;
    v6 = 0;
    while (while_method_0(v6)){
        unsigned long long v8;
        v8 = (unsigned long long)v6;
        unsigned long long v9;
        v9 = v8 * 8ull;
        unsigned long long v10;
        v10 = 8ull + v9;
        unsigned char * v11;
        v11 = (unsigned char *)(v0+v10);
        bool v13;
        v13 = 0 <= v6;
        bool v15;
        if (v13){
            bool v14;
            v14 = v6 < 2;
            v15 = v14;
        } else {
            v15 = false;
        }
        bool v16;
        v16 = v15 == false;
        if (v16){
            assert("Index must be in range." && v15);
        } else {
        }
        static_array<unsigned char,5> v18; char v19;
        Tuple0 tmp82 = v2[v6];
        v18 = tmp82.v0; v19 = tmp82.v1;
        f_76(v11, v18, v19);
        v6 += 1 ;
    }
    int * v22;
    v22 = (int *)(v0+24ull);
    v22[0] = v3;
    return ;
}
__device__ void f_69(unsigned char * v0, Union6 v1){
    int v2;
    v2 = v1.tag;
    f_57(v0, v2);
    unsigned char * v3;
    v3 = (unsigned char *)(v0+16ull);
    switch (v1.tag) {
        case 0: { // CommunityCardsAre
            static_array_list<unsigned char,5> v5 = v1.case0.v0;
            return f_70(v3, v5);
            break;
        }
        case 1: { // Fold
            int v6 = v1.case1.v0; int v7 = v1.case1.v1;
            return f_71(v3, v6, v7);
            break;
        }
        case 2: { // PlayerAction
            int v8 = v1.case2.v0; Union1 v9 = v1.case2.v1;
            return f_72(v3, v8, v9);
            break;
        }
        case 3: { // PlayerGotCards
            int v10 = v1.case3.v0; static_array<unsigned char,2> v11 = v1.case3.v1;
            return f_74(v3, v10, v11);
            break;
        }
        case 4: { // Showdown
            int v12 = v1.case4.v0; static_array<Tuple0,2> v13 = v1.case4.v1; int v14 = v1.case4.v2;
            return f_75(v3, v12, v13, v14);
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
}
__device__ void f_78(unsigned char * v0, Union2 v1){
    int v2;
    v2 = v1.tag;
    f_57(v0, v2);
    unsigned char * v3;
    v3 = (unsigned char *)(v0+4ull);
    switch (v1.tag) {
        case 0: { // CallingMachine
            return f_55(v3);
            break;
        }
        case 1: { // Computer
            return f_55(v3);
            break;
        }
        case 2: { // Human
            return f_55(v3);
            break;
        }
        case 3: { // Random
            return f_55(v3);
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
}
__device__ void f_79(unsigned char * v0, int v1){
    int * v2;
    v2 = (int *)(v0+6248ull);
    v2[0] = v1;
    return ;
}
__device__ void f_52(unsigned char * v0, unsigned long long v1, Union3 v2, static_array_list<Union6,128> v3, static_array<Union2,2> v4, Union7 v5){
    f_53(v0, v1);
    int v6;
    v6 = v2.tag;
    f_54(v0, v6);
    unsigned char * v7;
    v7 = (unsigned char *)(v0+16ull);
    switch (v2.tag) {
        case 0: { // None
            f_55(v7);
            break;
        }
        case 1: { // Some
            Union4 v9 = v2.case1.v0;
            f_56(v7, v9);
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
    int v10;
    v10 = v3.length;
    f_68(v0, v10);
    int v11;
    v11 = v3.length;
    int v12;
    v12 = 0;
    while (while_method_4(v11, v12)){
        unsigned long long v14;
        v14 = (unsigned long long)v12;
        unsigned long long v15;
        v15 = v14 * 48ull;
        unsigned long long v16;
        v16 = 96ull + v15;
        unsigned char * v17;
        v17 = (unsigned char *)(v0+v16);
        Union6 v19;
        v19 = v3[v12];
        f_69(v17, v19);
        v12 += 1 ;
    }
    int v21;
    v21 = 0;
    while (while_method_0(v21)){
        unsigned long long v23;
        v23 = (unsigned long long)v21;
        unsigned long long v24;
        v24 = v23 * 4ull;
        unsigned long long v25;
        v25 = 6240ull + v24;
        unsigned char * v26;
        v26 = (unsigned char *)(v0+v25);
        bool v28;
        v28 = 0 <= v21;
        bool v30;
        if (v28){
            bool v29;
            v29 = v21 < 2;
            v30 = v29;
        } else {
            v30 = false;
        }
        bool v31;
        v31 = v30 == false;
        if (v31){
            assert("Index must be in range." && v30);
        } else {
        }
        Union2 v33;
        v33 = v4[v21];
        f_78(v26, v33);
        v21 += 1 ;
    }
    int v35;
    v35 = v5.tag;
    f_79(v0, v35);
    unsigned char * v36;
    v36 = (unsigned char *)(v0+6256ull);
    switch (v5.tag) {
        case 0: { // GameNotStarted
            return f_55(v36);
            break;
        }
        case 1: { // GameOver
            int v38 = v5.case1.v0; static_array<static_array<unsigned char,2>,2> v39 = v5.case1.v1; static_array<int,2> v40 = v5.case1.v2; int v41 = v5.case1.v3; static_array<int,2> v42 = v5.case1.v4; Union5 v43 = v5.case1.v5;
            return f_58(v36, v38, v39, v40, v41, v42, v43);
            break;
        }
        case 2: { // WaitingForActionFromPlayerId
            int v44 = v5.case2.v0; static_array<static_array<unsigned char,2>,2> v45 = v5.case2.v1; static_array<int,2> v46 = v5.case2.v2; int v47 = v5.case2.v3; static_array<int,2> v48 = v5.case2.v4; Union5 v49 = v5.case2.v5;
            return f_58(v36, v44, v45, v46, v47, v48, v49);
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
}
__device__ inline bool while_method_20(int v0){
    bool v1;
    v1 = v0 < 1024;
    return v1;
}
__device__ inline bool while_method_21(int v0){
    bool v1;
    v1 = v0 < 32;
    return v1;
}
__device__ inline bool while_method_22(Union3 v0){
    switch (v0.tag) {
        case 0: { // None
            return false;
            break;
        }
        case 1: { // Some
            Union4 v1 = v0.case1.v0;
            return true;
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
}
__device__ static_array_list<unsigned char,5> get_community_cards_81(Union5 v0, static_array<unsigned char,3> v1){
    static_array_list<unsigned char,5> v2;
    v2 = static_array_list<unsigned char,5>{};
    switch (v0.tag) {
        case 0: { // Flop
            static_array<unsigned char,3> v4 = v0.case0.v0;
            int v5;
            v5 = 0;
            while (while_method_1(v5)){
                bool v7;
                v7 = 0 <= v5;
                bool v9;
                if (v7){
                    bool v8;
                    v8 = v5 < 3;
                    v9 = v8;
                } else {
                    v9 = false;
                }
                bool v10;
                v10 = v9 == false;
                if (v10){
                    assert("Index must be in range." && v9);
                } else {
                }
                unsigned char v12;
                v12 = v4[v5];
                v2.push(v12);
                v5 += 1 ;
            }
            break;
        }
        case 1: { // Preflop
            break;
        }
        case 2: { // River
            static_array<unsigned char,5> v24 = v0.case2.v0;
            int v25;
            v25 = 0;
            while (while_method_2(v25)){
                bool v27;
                v27 = 0 <= v25;
                bool v29;
                if (v27){
                    bool v28;
                    v28 = v25 < 5;
                    v29 = v28;
                } else {
                    v29 = false;
                }
                bool v30;
                v30 = v29 == false;
                if (v30){
                    assert("Index must be in range." && v29);
                } else {
                }
                unsigned char v32;
                v32 = v24[v25];
                v2.push(v32);
                v25 += 1 ;
            }
            break;
        }
        case 3: { // Turn
            static_array<unsigned char,4> v14 = v0.case3.v0;
            int v15;
            v15 = 0;
            while (while_method_3(v15)){
                bool v17;
                v17 = 0 <= v15;
                bool v19;
                if (v17){
                    bool v18;
                    v18 = v15 < 4;
                    v19 = v18;
                } else {
                    v19 = false;
                }
                bool v20;
                v20 = v19 == false;
                if (v20){
                    assert("Index must be in range." && v19);
                } else {
                }
                unsigned char v22;
                v22 = v14[v15];
                v2.push(v22);
                v15 += 1 ;
            }
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
    int v34;
    v34 = 0;
    while (while_method_1(v34)){
        bool v36;
        v36 = 0 <= v34;
        bool v38;
        if (v36){
            bool v37;
            v37 = v34 < 3;
            v38 = v37;
        } else {
            v38 = false;
        }
        bool v39;
        v39 = v38 == false;
        if (v39){
            assert("Index must be in range." && v38);
        } else {
        }
        unsigned char v41;
        v41 = v1[v34];
        v2.push(v41);
        v34 += 1 ;
    }
    return v2;
}
__device__ static_array_list<unsigned char,5> get_community_cards_82(Union5 v0, static_array<unsigned char,1> v1){
    static_array_list<unsigned char,5> v2;
    v2 = static_array_list<unsigned char,5>{};
    switch (v0.tag) {
        case 0: { // Flop
            static_array<unsigned char,3> v4 = v0.case0.v0;
            int v5;
            v5 = 0;
            while (while_method_1(v5)){
                bool v7;
                v7 = 0 <= v5;
                bool v9;
                if (v7){
                    bool v8;
                    v8 = v5 < 3;
                    v9 = v8;
                } else {
                    v9 = false;
                }
                bool v10;
                v10 = v9 == false;
                if (v10){
                    assert("Index must be in range." && v9);
                } else {
                }
                unsigned char v12;
                v12 = v4[v5];
                v2.push(v12);
                v5 += 1 ;
            }
            break;
        }
        case 1: { // Preflop
            break;
        }
        case 2: { // River
            static_array<unsigned char,5> v24 = v0.case2.v0;
            int v25;
            v25 = 0;
            while (while_method_2(v25)){
                bool v27;
                v27 = 0 <= v25;
                bool v29;
                if (v27){
                    bool v28;
                    v28 = v25 < 5;
                    v29 = v28;
                } else {
                    v29 = false;
                }
                bool v30;
                v30 = v29 == false;
                if (v30){
                    assert("Index must be in range." && v29);
                } else {
                }
                unsigned char v32;
                v32 = v24[v25];
                v2.push(v32);
                v25 += 1 ;
            }
            break;
        }
        case 3: { // Turn
            static_array<unsigned char,4> v14 = v0.case3.v0;
            int v15;
            v15 = 0;
            while (while_method_3(v15)){
                bool v17;
                v17 = 0 <= v15;
                bool v19;
                if (v17){
                    bool v18;
                    v18 = v15 < 4;
                    v19 = v18;
                } else {
                    v19 = false;
                }
                bool v20;
                v20 = v19 == false;
                if (v20){
                    assert("Index must be in range." && v19);
                } else {
                }
                unsigned char v22;
                v22 = v14[v15];
                v2.push(v22);
                v15 += 1 ;
            }
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
    int v34;
    v34 = 0;
    while (while_method_6(v34)){
        bool v36;
        v36 = 0 <= v34;
        bool v38;
        if (v36){
            bool v37;
            v37 = v34 < 1;
            v38 = v37;
        } else {
            v38 = false;
        }
        bool v39;
        v39 = v38 == false;
        if (v39){
            assert("Index must be in range." && v38);
        } else {
        }
        unsigned char v41;
        v41 = v1[v34];
        v2.push(v41);
        v34 += 1 ;
    }
    return v2;
}
__device__ void method_80(unsigned char * v0, unsigned char * v1, unsigned char * v2, StackMut1 & v3, int v4, Union4 v5){
    v3.v0 = 4503599627370495ull;
    static_array<float,2> v6;
    v6[0] = 0.0f;
    v6[1] = 0.0f;
    v3.v4 = v6;
    static_array_list<Union6,128> & v8 = v3.v2;
    v8.unsafe_set_length(0);
    static_array<Union2,2> v9;
    Union2 v11;
    v11 = Union2{Union2_1{}};
    v9[0] = v11;
    Union2 v13;
    v13 = Union2{Union2_1{}};
    v9[1] = v13;
    int v15;
    v15 = v4 ^ 1;
    Union2 v16;
    v16 = Union2{Union2_0{}};
    v9[v15] = v16;
    v3.v3 = v9;
    static_array_list<Union6,128> & v18 = v3.v2;
    unsigned long long & v19 = v3.v0;
    Union3 v20;
    v20 = Union3{Union3_1{v5}};
    Union3 v21;
    v21 = v20;
    while (while_method_22(v21)){
        Union3 v1677;
        switch (v21.tag) {
            case 0: { // None
                v1677 = Union3{Union3_0{}};
                break;
            }
            case 1: { // Some
                Union4 v23 = v21.case1.v0;
                Union18 v1328;
                switch (v23.tag) {
                    case 0: { // G_Flop
                        int v1189 = v23.case0.v0; static_array<static_array<unsigned char,2>,2> v1190 = v23.case0.v1; static_array<int,2> v1191 = v23.case0.v2; int v1192 = v23.case0.v3; static_array<int,2> v1193 = v23.case0.v4; Union5 v1194 = v23.case0.v5;
                        curandStatePhilox4_32_10_t & v1195 = v3.v5;
                        curandStatePhilox4_32_10_t & v1196 = v1195;
                        static_array<unsigned char,3> v1197; unsigned long long v1198;
                        Tuple8 tmp83 = draw_cards_32(v1196, v19);
                        v1197 = tmp83.v0; v1198 = tmp83.v1;
                        v3.v0 = v1198;
                        static_array_list<unsigned char,5> v1199;
                        v1199 = get_community_cards_81(v1194, v1197);
                        Union6 v1200;
                        v1200 = Union6{Union6_0{v1199}};
                        v18.push(v1200);
                        Union5 v1203;
                        switch (v1194.tag) {
                            case 1: { // Preflop
                                v1203 = Union5{Union5_0{v1197}};
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in flop.");
                                __trap();
                            }
                        }
                        int v1204;
                        v1204 = 2;
                        int v1205;
                        v1205 = 0;
                        Union4 v1206;
                        v1206 = try_round_36(v1204, v1190, v1191, v1205, v1193, v1203);
                        v1328 = Union18{Union18_2{v1206}};
                        break;
                    }
                    case 1: { // G_Fold
                        int v24 = v23.case1.v0; static_array<static_array<unsigned char,2>,2> v25 = v23.case1.v1; static_array<int,2> v26 = v23.case1.v2; int v27 = v23.case1.v3; static_array<int,2> v28 = v23.case1.v4; Union5 v29 = v23.case1.v5;
                        int v30;
                        v30 = v27 % 2;
                        bool v31;
                        v31 = 0 <= v30;
                        bool v33;
                        if (v31){
                            bool v32;
                            v32 = v30 < 2;
                            v33 = v32;
                        } else {
                            v33 = false;
                        }
                        bool v34;
                        v34 = v33 == false;
                        if (v34){
                            assert("Index must be in range." && v33);
                        } else {
                        }
                        int v36;
                        v36 = v26[v30];
                        int v38;
                        v38 = -v36;
                        float v39;
                        v39 = (float)v38;
                        static_array<float,2> & v40 = v3.v4;
                        v40[v30] = v39;
                        int v41;
                        v41 = v30 ^ 1;
                        float v42;
                        v42 = -v39;
                        v40[v41] = v42;
                        int v43;
                        v43 = v27 + 1;
                        int v44;
                        v44 = v43 % 2;
                        Union6 v45;
                        v45 = Union6{Union6_1{v36, v44}};
                        v18.push(v45);
                        v1328 = Union18{Union18_0{}};
                        break;
                    }
                    case 2: { // G_Preflop
                        curandStatePhilox4_32_10_t & v1290 = v3.v5;
                        curandStatePhilox4_32_10_t & v1291 = v1290;
                        static_array<unsigned char,2> v1292; unsigned long long v1293;
                        Tuple11 tmp84 = draw_cards_39(v1291, v19);
                        v1292 = tmp84.v0; v1293 = tmp84.v1;
                        v3.v0 = v1293;
                        curandStatePhilox4_32_10_t & v1294 = v3.v5;
                        curandStatePhilox4_32_10_t & v1295 = v1294;
                        static_array<unsigned char,2> v1296; unsigned long long v1297;
                        Tuple11 tmp85 = draw_cards_39(v1295, v19);
                        v1296 = tmp85.v0; v1297 = tmp85.v1;
                        v3.v0 = v1297;
                        Union6 v1298;
                        v1298 = Union6{Union6_3{0, v1292}};
                        v18.push(v1298);
                        Union6 v1299;
                        v1299 = Union6{Union6_3{1, v1296}};
                        v18.push(v1299);
                        static_array<static_array<unsigned char,2>,2> v1300;
                        v1300[0] = v1292;
                        v1300[1] = v1296;
                        static_array<int,2> v1302;
                        v1302[0] = 2;
                        v1302[1] = 1;
                        static_array<int,2> v1304;
                        int v1306;
                        v1306 = 0;
                        while (while_method_0(v1306)){
                            bool v1308;
                            v1308 = 0 <= v1306;
                            bool v1310;
                            if (v1308){
                                bool v1309;
                                v1309 = v1306 < 2;
                                v1310 = v1309;
                            } else {
                                v1310 = false;
                            }
                            bool v1311;
                            v1311 = v1310 == false;
                            if (v1311){
                                assert("Index must be in range." && v1310);
                            } else {
                            }
                            int v1313;
                            v1313 = v1302[v1306];
                            int v1315;
                            v1315 = 100 - v1313;
                            v1304[v1306] = v1315;
                            v1306 += 1 ;
                        }
                        int v1316;
                        v1316 = 2;
                        int v1317;
                        v1317 = 0;
                        Union5 v1318;
                        v1318 = Union5{Union5_1{}};
                        Union4 v1319;
                        v1319 = try_round_36(v1316, v1300, v1302, v1317, v1304, v1318);
                        v1328 = Union18{Union18_2{v1319}};
                        break;
                    }
                    case 3: { // G_River
                        int v1249 = v23.case3.v0; static_array<static_array<unsigned char,2>,2> v1250 = v23.case3.v1; static_array<int,2> v1251 = v23.case3.v2; int v1252 = v23.case3.v3; static_array<int,2> v1253 = v23.case3.v4; Union5 v1254 = v23.case3.v5;
                        curandStatePhilox4_32_10_t & v1255 = v3.v5;
                        curandStatePhilox4_32_10_t & v1256 = v1255;
                        static_array<unsigned char,1> v1257; unsigned long long v1258;
                        Tuple12 tmp86 = draw_cards_40(v1256, v19);
                        v1257 = tmp86.v0; v1258 = tmp86.v1;
                        v3.v0 = v1258;
                        static_array_list<unsigned char,5> v1259;
                        v1259 = get_community_cards_82(v1254, v1257);
                        Union6 v1260;
                        v1260 = Union6{Union6_0{v1259}};
                        v18.push(v1260);
                        Union5 v1285;
                        switch (v1254.tag) {
                            case 3: { // Turn
                                static_array<unsigned char,4> v1261 = v1254.case3.v0;
                                static_array<unsigned char,5> v1262;
                                int v1264;
                                v1264 = 0;
                                while (while_method_3(v1264)){
                                    bool v1266;
                                    v1266 = 0 <= v1264;
                                    bool v1268;
                                    if (v1266){
                                        bool v1267;
                                        v1267 = v1264 < 4;
                                        v1268 = v1267;
                                    } else {
                                        v1268 = false;
                                    }
                                    bool v1269;
                                    v1269 = v1268 == false;
                                    if (v1269){
                                        assert("Index must be in range." && v1268);
                                    } else {
                                    }
                                    unsigned char v1271;
                                    v1271 = v1261[v1264];
                                    v1262[v1264] = v1271;
                                    v1264 += 1 ;
                                }
                                int v1273;
                                v1273 = 0;
                                while (while_method_6(v1273)){
                                    bool v1275;
                                    v1275 = 0 <= v1273;
                                    bool v1277;
                                    if (v1275){
                                        bool v1276;
                                        v1276 = v1273 < 1;
                                        v1277 = v1276;
                                    } else {
                                        v1277 = false;
                                    }
                                    bool v1278;
                                    v1278 = v1277 == false;
                                    if (v1278){
                                        assert("Index must be in range." && v1277);
                                    } else {
                                    }
                                    unsigned char v1280;
                                    v1280 = v1257[v1273];
                                    int v1282;
                                    v1282 = 4 + v1273;
                                    v1262[v1282] = v1280;
                                    v1273 += 1 ;
                                }
                                v1285 = Union5{Union5_2{v1262}};
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in river.");
                                __trap();
                            }
                        }
                        int v1286;
                        v1286 = 2;
                        int v1287;
                        v1287 = 0;
                        Union4 v1288;
                        v1288 = try_round_36(v1286, v1250, v1251, v1287, v1253, v1285);
                        v1328 = Union18{Union18_2{v1288}};
                        break;
                    }
                    case 4: { // G_Round
                        int v166 = v23.case4.v0; static_array<static_array<unsigned char,2>,2> v167 = v23.case4.v1; static_array<int,2> v168 = v23.case4.v2; int v169 = v23.case4.v3; static_array<int,2> v170 = v23.case4.v4; Union5 v171 = v23.case4.v5;
                        int v172;
                        v172 = v169 % 2;
                        static_array<Union2,2> & v173 = v3.v3;
                        bool v174;
                        v174 = 0 <= v172;
                        bool v176;
                        if (v174){
                            bool v175;
                            v175 = v172 < 2;
                            v176 = v175;
                        } else {
                            v176 = false;
                        }
                        bool v177;
                        v177 = v176 == false;
                        if (v177){
                            assert("Index must be in range." && v176);
                        } else {
                        }
                        Union2 v179;
                        v179 = v173[v172];
                        Union1 v1176;
                        switch (v179.tag) {
                            case 0: { // CallingMachine
                                v1176 = Union1{Union1_1{}};
                                break;
                            }
                            case 1: { // Computer
                                static_array_list<Union6,128> & v182 = v3.v2;
                                curandStatePhilox4_32_10_t & v183 = v3.v5;
                                curandStatePhilox4_32_10_t & v184 = v183;
                                float * v185;
                                v185 = reinterpret_cast<float *>(&v1[51904512ull]);
                                float * v187;
                                v187 = reinterpret_cast<float *>(&v1[0ull]);
                                float * v189;
                                v189 = reinterpret_cast<float *>(&v1[0ull]);
                                int v191;
                                v191 = blockIdx.x;
                                assert("Tensor range check" && 0 <= v191 && v191 < 24);
                                int v192;
                                v192 = 524288 * v191;
                                int v193;
                                v193 = threadIdx.x;
                                int v194;
                                v194 = v193;
                                while (while_method_7(v194)){
                                    bool v196;
                                    v196 = 0 <= v194;
                                    bool v197;
                                    v197 = v196 == false;
                                    if (v197){
                                        assert("The index needs to be zero or positive." && v196);
                                    } else {
                                    }
                                    int v199;
                                    v199 = v194 % 2048;
                                    int v200;
                                    v200 = v194 / 2048;
                                    bool v201;
                                    v201 = v200 < 256;
                                    bool v202;
                                    v202 = v201 == false;
                                    if (v202){
                                        assert("The last element of the projection dimensions needs to be greater than the index remainder." && v201);
                                    } else {
                                    }
                                    assert("Tensor range check" && 0 <= v200 && v200 < 256);
                                    assert("Tensor range check" && 0 <= v199 && v199 < 2048);
                                    int v204;
                                    v204 = v199 + v192;
                                    int v205;
                                    v205 = 2048 * v200;
                                    int v206;
                                    v206 = v205 + v204;
                                    v189[v206] = 0.0f;
                                    v194 += 256 ;
                                }
                                __syncthreads();
                                int v207;
                                v207 = threadIdx.x;
                                assert("Tensor range check" && 0 <= v207 && v207 < 256);
                                int v208;
                                v208 = 2048 * v207;
                                int v209;
                                v209 = v208 + v192;
                                int v210;
                                v210 = v182.length;
                                bool v211;
                                v211 = 128 >= v210;
                                bool v212;
                                v212 = v211 == false;
                                if (v212){
                                    assert("The type level dimension has to equal the value passed at runtime into create." && v211);
                                } else {
                                }
                                static_array_list<Union8,128> v214;
                                v214 = static_array_list<Union8,128>{};
                                v214.unsafe_set_length(v210);
                                int v216;
                                v216 = 0;
                                while (while_method_4(v210, v216)){
                                    Union6 v218;
                                    v218 = v182[v216];
                                    Union8 v224;
                                    switch (v218.tag) {
                                        case 2: { // PlayerAction
                                            int v220 = v218.case2.v0; Union1 v221 = v218.case2.v1;
                                            v224 = Union8{Union8_1{v221}};
                                            break;
                                        }
                                        default: {
                                            v224 = Union8{Union8_0{}};
                                        }
                                    }
                                    v214[v216] = v224;
                                    v216 += 1 ;
                                }
                                static_array<int,2> v225;
                                int v227;
                                v227 = 0;
                                while (while_method_0(v227)){
                                    int v229;
                                    v229 = v227 + v169;
                                    int v230;
                                    v230 = v229 % 2;
                                    bool v231;
                                    v231 = 0 <= v230;
                                    bool v233;
                                    if (v231){
                                        bool v232;
                                        v232 = v230 < 2;
                                        v233 = v232;
                                    } else {
                                        v233 = false;
                                    }
                                    bool v234;
                                    v234 = v233 == false;
                                    if (v234){
                                        assert("Index must be in range." && v233);
                                    } else {
                                    }
                                    int v236;
                                    v236 = v168[v230];
                                    v225[v227] = v236;
                                    v227 += 1 ;
                                }
                                static_array<int,2> v238;
                                int v240;
                                v240 = 0;
                                while (while_method_0(v240)){
                                    int v242;
                                    v242 = v240 + v169;
                                    int v243;
                                    v243 = v242 % 2;
                                    bool v244;
                                    v244 = 0 <= v243;
                                    bool v246;
                                    if (v244){
                                        bool v245;
                                        v245 = v243 < 2;
                                        v246 = v245;
                                    } else {
                                        v246 = false;
                                    }
                                    bool v247;
                                    v247 = v246 == false;
                                    if (v247){
                                        assert("Index must be in range." && v246);
                                    } else {
                                    }
                                    int v249;
                                    v249 = v170[v243];
                                    v238[v240] = v249;
                                    v240 += 1 ;
                                }
                                bool v252;
                                if (v174){
                                    bool v251;
                                    v251 = v172 < 2;
                                    v252 = v251;
                                } else {
                                    v252 = false;
                                }
                                bool v253;
                                v253 = v252 == false;
                                if (v253){
                                    assert("Index must be in range." && v252);
                                } else {
                                }
                                static_array<unsigned char,2> v255;
                                v255 = v167[v172];
                                static_array_list<unsigned char,5> v257;
                                v257 = static_array_list<unsigned char,5>{};
                                switch (v171.tag) {
                                    case 0: { // Flop
                                        static_array<unsigned char,3> v259 = v171.case0.v0;
                                        int v260;
                                        v260 = 0;
                                        while (while_method_1(v260)){
                                            bool v262;
                                            v262 = 0 <= v260;
                                            bool v264;
                                            if (v262){
                                                bool v263;
                                                v263 = v260 < 3;
                                                v264 = v263;
                                            } else {
                                                v264 = false;
                                            }
                                            bool v265;
                                            v265 = v264 == false;
                                            if (v265){
                                                assert("Index must be in range." && v264);
                                            } else {
                                            }
                                            unsigned char v267;
                                            v267 = v259[v260];
                                            v257.push(v267);
                                            v260 += 1 ;
                                        }
                                        break;
                                    }
                                    case 1: { // Preflop
                                        break;
                                    }
                                    case 2: { // River
                                        static_array<unsigned char,5> v279 = v171.case2.v0;
                                        int v280;
                                        v280 = 0;
                                        while (while_method_2(v280)){
                                            bool v282;
                                            v282 = 0 <= v280;
                                            bool v284;
                                            if (v282){
                                                bool v283;
                                                v283 = v280 < 5;
                                                v284 = v283;
                                            } else {
                                                v284 = false;
                                            }
                                            bool v285;
                                            v285 = v284 == false;
                                            if (v285){
                                                assert("Index must be in range." && v284);
                                            } else {
                                            }
                                            unsigned char v287;
                                            v287 = v279[v280];
                                            v257.push(v287);
                                            v280 += 1 ;
                                        }
                                        break;
                                    }
                                    case 3: { // Turn
                                        static_array<unsigned char,4> v269 = v171.case3.v0;
                                        int v270;
                                        v270 = 0;
                                        while (while_method_3(v270)){
                                            bool v272;
                                            v272 = 0 <= v270;
                                            bool v274;
                                            if (v272){
                                                bool v273;
                                                v273 = v270 < 4;
                                                v274 = v273;
                                            } else {
                                                v274 = false;
                                            }
                                            bool v275;
                                            v275 = v274 == false;
                                            if (v275){
                                                assert("Index must be in range." && v274);
                                            } else {
                                            }
                                            unsigned char v277;
                                            v277 = v269[v270];
                                            v257.push(v277);
                                            v270 += 1 ;
                                        }
                                        break;
                                    }
                                    default: {
                                        assert("Invalid tag." && false); __trap();
                                    }
                                }
                                float * v289;
                                v289 = v189+v209;
                                int v291;
                                v291 = v214.length;
                                bool v292;
                                v292 = v291 == 0;
                                if (v292){
                                    v289[0] = 1.0f;
                                } else {
                                }
                                int v293;
                                v293 = v214.length;
                                int v294;
                                v294 = 0;
                                while (while_method_4(v293, v294)){
                                    Union8 v296;
                                    v296 = v214[v294];
                                    int v298;
                                    v298 = v294 * 14;
                                    int v299;
                                    v299 = 1 + v298;
                                    switch (v296.tag) {
                                        case 0: { // None
                                            v289[v299] = 1.0f;
                                            break;
                                        }
                                        case 1: { // Some
                                            Union1 v300 = v296.case1.v0;
                                            int v301;
                                            v301 = v299 + 1;
                                            switch (v300.tag) {
                                                case 0: { // A_All_In
                                                    v289[v301] = 1.0f;
                                                    break;
                                                }
                                                case 1: { // A_Call
                                                    int v302;
                                                    v302 = v301 + 1;
                                                    v289[v302] = 1.0f;
                                                    break;
                                                }
                                                case 2: { // A_Fold
                                                    int v303;
                                                    v303 = v301 + 2;
                                                    v289[v303] = 1.0f;
                                                    break;
                                                }
                                                case 3: { // A_Raise
                                                    int v304 = v300.case3.v0;
                                                    int v305;
                                                    v305 = v301 + 3;
                                                    bool v306;
                                                    v306 = 1 <= v304;
                                                    bool v308;
                                                    if (v306){
                                                        bool v307;
                                                        v307 = v304 < 1023;
                                                        v308 = v307;
                                                    } else {
                                                        v308 = false;
                                                    }
                                                    bool v309;
                                                    v309 = v308 == false;
                                                    if (v309){
                                                        assert("Pickle failure. The input is out of the bounds of the given range." && v308);
                                                    } else {
                                                    }
                                                    int v311;
                                                    v311 = v304 - 1;
                                                    unsigned int v312;
                                                    v312 = (unsigned int)v311;
                                                    method_42(v312, v289, v305);
                                                    break;
                                                }
                                                default: {
                                                    assert("Invalid tag." && false); __trap();
                                                }
                                            }
                                            break;
                                        }
                                        default: {
                                            assert("Invalid tag." && false); __trap();
                                        }
                                    }
                                    v294 += 1 ;
                                }
                                int v313;
                                v313 = 0;
                                while (while_method_0(v313)){
                                    // 222;
                                    bool v315;
                                    v315 = 0 <= v313;
                                    bool v317;
                                    if (v315){
                                        bool v316;
                                        v316 = v313 < 2;
                                        v317 = v316;
                                    } else {
                                        v317 = false;
                                    }
                                    bool v318;
                                    v318 = v317 == false;
                                    if (v318){
                                        assert("Index must be in range." && v317);
                                    } else {
                                    }
                                    int v320;
                                    v320 = v225[v313];
                                    int v322;
                                    v322 = v313 * 11;
                                    int v323;
                                    v323 = 1794 + v322;
                                    bool v324;
                                    v324 = 0 <= v320;
                                    bool v326;
                                    if (v324){
                                        bool v325;
                                        v325 = v320 < 1023;
                                        v326 = v325;
                                    } else {
                                        v326 = false;
                                    }
                                    bool v327;
                                    v327 = v326 == false;
                                    if (v327){
                                        assert("Pickle failure. The input is out of the bounds of the given range." && v326);
                                    } else {
                                    }
                                    unsigned int v329;
                                    v329 = (unsigned int)v320;
                                    method_43(v329, v289, v323);
                                    v313 += 1 ;
                                }
                                int v330;
                                v330 = 0;
                                while (while_method_0(v330)){
                                    // 222;
                                    bool v332;
                                    v332 = 0 <= v330;
                                    bool v334;
                                    if (v332){
                                        bool v333;
                                        v333 = v330 < 2;
                                        v334 = v333;
                                    } else {
                                        v334 = false;
                                    }
                                    bool v335;
                                    v335 = v334 == false;
                                    if (v335){
                                        assert("Index must be in range." && v334);
                                    } else {
                                    }
                                    int v337;
                                    v337 = v238[v330];
                                    int v339;
                                    v339 = v330 * 11;
                                    int v340;
                                    v340 = 1817 + v339;
                                    bool v341;
                                    v341 = 0 <= v337;
                                    bool v343;
                                    if (v341){
                                        bool v342;
                                        v342 = v337 < 1023;
                                        v343 = v342;
                                    } else {
                                        v343 = false;
                                    }
                                    bool v344;
                                    v344 = v343 == false;
                                    if (v344){
                                        assert("Pickle failure. The input is out of the bounds of the given range." && v343);
                                    } else {
                                    }
                                    unsigned int v346;
                                    v346 = (unsigned int)v337;
                                    method_43(v346, v289, v340);
                                    v330 += 1 ;
                                }
                                int v347;
                                v347 = 0;
                                while (while_method_0(v347)){
                                    // 222;
                                    bool v349;
                                    v349 = 0 <= v347;
                                    bool v351;
                                    if (v349){
                                        bool v350;
                                        v350 = v347 < 2;
                                        v351 = v350;
                                    } else {
                                        v351 = false;
                                    }
                                    bool v352;
                                    v352 = v351 == false;
                                    if (v352){
                                        assert("Index must be in range." && v351);
                                    } else {
                                    }
                                    unsigned char v354;
                                    v354 = v255[v347];
                                    int v356;
                                    v356 = v347 * 17;
                                    int v357;
                                    v357 = 1840 + v356;
                                    unsigned char v358;
                                    v358 = v354 % 4u;
                                    int v359;
                                    v359 = (int)v358;
                                    unsigned char v360;
                                    v360 = v354 / 4u;
                                    int v361;
                                    v361 = (int)v360;
                                    unsigned int v362;
                                    v362 = (unsigned int)v359;
                                    int v363;
                                    v363 = (int)v362;
                                    bool v364;
                                    v364 = v363 < 4;
                                    bool v365;
                                    v365 = v364 == false;
                                    if (v365){
                                        assert("Pickle failure. Int value out of bounds." && v364);
                                    } else {
                                    }
                                    int v367;
                                    v367 = v357 + v363;
                                    v289[v367] = 1.0f;
                                    int v368;
                                    v368 = v357 + 4;
                                    unsigned int v369;
                                    v369 = (unsigned int)v361;
                                    int v370;
                                    v370 = (int)v369;
                                    bool v371;
                                    v371 = v370 < 13;
                                    bool v372;
                                    v372 = v371 == false;
                                    if (v372){
                                        assert("Pickle failure. Int value out of bounds." && v371);
                                    } else {
                                    }
                                    int v374;
                                    v374 = v368 + v370;
                                    v289[v374] = 1.0f;
                                    v347 += 1 ;
                                }
                                int v375;
                                v375 = v257.length;
                                bool v376;
                                v376 = v375 == 0;
                                if (v376){
                                    v289[1874] = 1.0f;
                                } else {
                                }
                                int v377;
                                v377 = v257.length;
                                int v378;
                                v378 = 0;
                                while (while_method_4(v377, v378)){
                                    unsigned char v380;
                                    v380 = v257[v378];
                                    int v382;
                                    v382 = v378 * 17;
                                    int v383;
                                    v383 = 1875 + v382;
                                    unsigned char v384;
                                    v384 = v380 % 4u;
                                    int v385;
                                    v385 = (int)v384;
                                    unsigned char v386;
                                    v386 = v380 / 4u;
                                    int v387;
                                    v387 = (int)v386;
                                    unsigned int v388;
                                    v388 = (unsigned int)v385;
                                    int v389;
                                    v389 = (int)v388;
                                    bool v390;
                                    v390 = v389 < 4;
                                    bool v391;
                                    v391 = v390 == false;
                                    if (v391){
                                        assert("Pickle failure. Int value out of bounds." && v390);
                                    } else {
                                    }
                                    int v393;
                                    v393 = v383 + v389;
                                    v289[v393] = 1.0f;
                                    int v394;
                                    v394 = v383 + 4;
                                    unsigned int v395;
                                    v395 = (unsigned int)v387;
                                    int v396;
                                    v396 = (int)v395;
                                    bool v397;
                                    v397 = v396 < 13;
                                    bool v398;
                                    v398 = v397 == false;
                                    if (v398){
                                        assert("Pickle failure. Int value out of bounds." && v397);
                                    } else {
                                    }
                                    int v400;
                                    v400 = v394 + v396;
                                    v289[v400] = 1.0f;
                                    v378 += 1 ;
                                }
                                __syncthreads();
                                int v401;
                                v401 = 0;
                                while (while_method_3(v401)){
                                    float * v403;
                                    v403 = reinterpret_cast<float *>(&v1[51904512ull]);
                                    assert("Tensor range check" && 0 <= v401 && v401 < 4);
                                    int v405;
                                    v405 = 393216 * v401;
                                    float * v406;
                                    v406 = reinterpret_cast<float *>(&v1[0ull]);
                                    float * v408;
                                    v408 = reinterpret_cast<float *>(&v0[0ull]);
                                    float * v410;
                                    v410 = reinterpret_cast<float *>(&v2[0ull]);
                                    assert("Tensor range check" && 0 <= v401 && v401 < 4);
                                    int v412;
                                    v412 = 131072 * v401;
                                    float * v413;
                                    v413 = reinterpret_cast<float *>(&v1[50331648ull]);
                                    block_matmul_45(v413, v408, v412, v406);
                                    block_row_map_46(v403, v405, v413);
                                    int * v415;
                                    v415 = reinterpret_cast<int *>(&v0[2097152ull]);
                                    bool * v417;
                                    v417 = reinterpret_cast<bool *>(&v0[2097168ull]);
                                    float * v419;
                                    v419 = reinterpret_cast<float *>(&v0[2097184ull]);
                                    float * v421;
                                    v421 = reinterpret_cast<float *>(&v0[2097200ull]);
                                    double * v423;
                                    v423 = reinterpret_cast<double *>(&v1[58195968ull]);
                                    double * v425;
                                    v425 = reinterpret_cast<double *>(&v1[58589184ull]);
                                    v401 += 1 ;
                                }
                                __syncthreads();
                                int * v427;
                                v427 = reinterpret_cast<int *>(&v0[2097152ull]);
                                bool * v429;
                                v429 = reinterpret_cast<bool *>(&v0[2097168ull]);
                                float * v431;
                                v431 = reinterpret_cast<float *>(&v0[2097184ull]);
                                float * v433;
                                v433 = reinterpret_cast<float *>(&v0[2097200ull]);
                                int v435;
                                v435 = v427[0];
                                float * v436;
                                v436 = reinterpret_cast<float *>(&v1[51904512ull]);
                                assert("Tensor range check" && 0 <= v435 && v435 < 4);
                                int v438;
                                v438 = 393216 * v435;
                                int v439;
                                v439 = blockIdx.x;
                                assert("Tensor range check" && 0 <= v439 && v439 < 24);
                                int v440;
                                v440 = 16384 * v439;
                                int v441;
                                v441 = v440 + v438;
                                int v442;
                                v442 = threadIdx.x;
                                assert("Tensor range check" && 0 <= v442 && v442 < 256);
                                int v443;
                                v443 = 64 * v442;
                                int v444;
                                v444 = v443 + v441;
                                float * v445;
                                v445 = v436+v444;
                                int v447;
                                v447 = sizeof(float *);
                                unsigned long long v448;
                                v448 = (unsigned long long)v447;
                                unsigned long long v449;
                                v449 = 256ull * v448;
                                unsigned long long v450;
                                v450 = v449 + 16ull;
                                unsigned long long v451;
                                v451 = v450 - 1ull;
                                unsigned long long v452;
                                v452 = v451 % 16ull;
                                unsigned long long v453;
                                v453 = v451 - v452;
                                unsigned long long v454;
                                v454 = v453 + 1024ull;
                                unsigned long long v455;
                                v455 = v454 + 16ull;
                                unsigned long long v456;
                                v456 = v455 - 1ull;
                                unsigned long long v457;
                                v457 = v456 % 16ull;
                                unsigned long long v458;
                                v458 = v456 - v457;
                                unsigned long long v459;
                                v459 = v458 + 1024ull;
                                bool v460;
                                v460 = v459 <= 98304ull;
                                bool v461;
                                v461 = v460 == false;
                                if (v461){
                                    assert("The dynamic shared memory is insufficient to allocate the tensor." && v460);
                                } else {
                                }
                                extern __shared__ unsigned char v463[];
                                bool v464;
                                v464 = v459 <= v459;
                                bool v465;
                                v465 = v464 == false;
                                if (v465){
                                    assert("The length of the partition has to be less than or equal to the length of the base array." && v464);
                                } else {
                                }
                                float * * v467;
                                v467 = reinterpret_cast<float * *>(&v463[0ull]);
                                float * v469;
                                v469 = reinterpret_cast<float *>(&v463[v453]);
                                int * v471;
                                v471 = reinterpret_cast<int *>(&v463[v458]);
                                int v473;
                                v473 = threadIdx.x;
                                assert("Tensor range check" && 0 <= v473 && v473 < 256);
                                v467[v473] = v445;
                                __syncthreads();
                                bool v474;
                                v474 = 0 <= v473;
                                bool v475;
                                v475 = v474 == false;
                                if (v475){
                                    assert("The index needs to be zero or positive." && v474);
                                } else {
                                }
                                int v477;
                                v477 = v473 % 16;
                                int v478;
                                v478 = v473 / 16;
                                bool v479;
                                v479 = v478 < 16;
                                bool v480;
                                v480 = v479 == false;
                                if (v480){
                                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v479);
                                } else {
                                }
                                assert("Tensor range check" && 0 <= v478 && v478 < 16);
                                int v482;
                                v482 = 0;
                                while (while_method_12(v482)){
                                    bool v484;
                                    v484 = 0 <= v478;
                                    bool v485;
                                    v485 = v484 && v479;
                                    bool v486;
                                    v486 = v485 == false;
                                    if (v486){
                                        assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v485);
                                    } else {
                                    }
                                    bool v488;
                                    v488 = 0 <= v482;
                                    bool v490;
                                    if (v488){
                                        bool v489;
                                        v489 = v482 < 16;
                                        v490 = v489;
                                    } else {
                                        v490 = false;
                                    }
                                    bool v491;
                                    v491 = v490 == false;
                                    if (v491){
                                        assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v490);
                                    } else {
                                    }
                                    int v493;
                                    v493 = v482 * 16;
                                    int v494;
                                    v494 = v493 + v478;
                                    assert("Tensor range check" && 0 <= v482 && v482 < 16);
                                    int v495;
                                    v495 = 16 * v482;
                                    int v496;
                                    v496 = v495 + v478;
                                    float * v497;
                                    v497 = v467[v496];
                                    int v498;
                                    v498 = blockIdx.x;
                                    int v499;
                                    v499 = v498 * 256;
                                    int v500;
                                    v500 = v499 + v494;
                                    assert("Tensor range check" && 0 <= v477 && v477 < 16);
                                    int v501;
                                    v501 = 4 * v477;
                                    float v502[4];
                                    int v503[4];
                                    int v504;
                                    v504 = 0;
                                    while (while_method_6(v504)){
                                        assert("Tensor range check" && 0 <= v504 && v504 < 1);
                                        int v506;
                                        v506 = 4 * v504;
                                        assert("Tensor range check" && 0 <= v504 && v504 < 1);
                                        int v507;
                                        v507 = 64 * v504;
                                        int v508;
                                        v508 = v507 + v501;
                                        int4* v509;
                                        v509 = reinterpret_cast<int4*>(v497 + v508);
                                        int4* v510;
                                        v510 = reinterpret_cast<int4*>(v502 + v506);
                                        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v509) % 16 == 0 && reinterpret_cast<unsigned long long>(v510) % 16 == 0);
                                        *v510 = *v509;
                                        v504 += 1 ;
                                    }
                                    int v511;
                                    v511 = 0;
                                    while (while_method_6(v511)){
                                        int v513;
                                        v513 = 0;
                                        while (while_method_3(v513)){
                                            bool v515;
                                            v515 = 0 <= v513;
                                            bool v517;
                                            if (v515){
                                                bool v516;
                                                v516 = v513 < 4;
                                                v517 = v516;
                                            } else {
                                                v517 = false;
                                            }
                                            bool v518;
                                            v518 = v517 == false;
                                            if (v518){
                                                assert("The indices should be inside the range of the dimension." && v517);
                                            } else {
                                            }
                                            bool v520;
                                            v520 = 0 <= v477;
                                            bool v522;
                                            if (v520){
                                                bool v521;
                                                v521 = v477 < 16;
                                                v522 = v521;
                                            } else {
                                                v522 = false;
                                            }
                                            bool v523;
                                            v523 = v522 == false;
                                            if (v523){
                                                assert("The indices should be inside the range of the dimension." && v522);
                                            } else {
                                            }
                                            int v525;
                                            v525 = v477 * 4;
                                            int v526;
                                            v526 = v513 + v525;
                                            bool v527;
                                            v527 = 0 <= v511;
                                            bool v529;
                                            if (v527){
                                                bool v528;
                                                v528 = v511 < 1;
                                                v529 = v528;
                                            } else {
                                                v529 = false;
                                            }
                                            bool v530;
                                            v530 = v529 == false;
                                            if (v530){
                                                assert("The indices should be inside the range of the dimension." && v529);
                                            } else {
                                            }
                                            int v532;
                                            v532 = v511 * 64;
                                            int v533;
                                            v533 = v526 + v532;
                                            assert("Tensor range check" && 0 <= v511 && v511 < 1);
                                            assert("Tensor range check" && 0 <= v513 && v513 < 4);
                                            int v534;
                                            v534 = 4 * v511;
                                            int v535;
                                            v535 = v534 + v513;
                                            v503[v535] = v533;
                                            v513 += 1 ;
                                        }
                                        v511 += 1 ;
                                    }
                                    float v536[4];
                                    float v537;
                                    v537 = 0.0f;
                                    int v538;
                                    v538 = 0;
                                    while (while_method_6(v538)){
                                        assert("Tensor range check" && 0 <= v538 && v538 < 1);
                                        int v540;
                                        v540 = 4 * v538;
                                        assert("Tensor range check" && 0 <= v538 && v538 < 1);
                                        float v541;
                                        v541 = 0.0f;
                                        int v542;
                                        v542 = 0;
                                        while (while_method_3(v542)){
                                            assert("Tensor range check" && 0 <= v542 && v542 < 4);
                                            int v544;
                                            v544 = v542 + v540;
                                            float v545;
                                            v545 = v502[v544];
                                            float v546;
                                            v546 = v541 + v545;
                                            v541 = v546;
                                            v542 += 1 ;
                                        }
                                        auto v547 = cooperative_groups::coalesced_threads();
                                        int v548;
                                        v548 = threadIdx.x;
                                        int v549;
                                        v549 = v548 / 16;
                                        auto v550 = cooperative_groups::labeled_partition(v547,v549);
                                        Closure2 v551{};
                                        float v552;
                                        v552 = cooperative_groups::inclusive_scan(v550, v541, v551);
                                        float v553;
                                        v553 = v550.shfl_up(v552,1);
                                        bool v554;
                                        v554 = v550.thread_rank() == 0;
                                        float v555;
                                        if (v554){
                                            v555 = 0.0f;
                                        } else {
                                            v555 = v553;
                                        }
                                        float v556;
                                        v556 = v550.shfl(v552,v550.num_threads()-1);
                                        float v557;
                                        v557 = v537 + v555;
                                        float v558;
                                        v558 = v557;
                                        int v559;
                                        v559 = 0;
                                        while (while_method_3(v559)){
                                            assert("Tensor range check" && 0 <= v559 && v559 < 4);
                                            int v561;
                                            v561 = v559 + v540;
                                            float v562;
                                            v562 = v502[v561];
                                            float v563;
                                            v563 = v558 + v562;
                                            assert("Tensor range check" && 0 <= v559 && v559 < 4);
                                            v536[v561] = v563;
                                            v558 = v563;
                                            v559 += 1 ;
                                        }
                                        float v564;
                                        v564 = v537 + v556;
                                        v537 = v564;
                                        v538 += 1 ;
                                    }
                                    float v565[4];
                                    bool v566[4];
                                    int v567;
                                    v567 = 0;
                                    while (while_method_6(v567)){
                                        int v569;
                                        v569 = 0;
                                        while (while_method_3(v569)){
                                            assert("Tensor range check" && 0 <= v567 && v567 < 1);
                                            assert("Tensor range check" && 0 <= v569 && v569 < 4);
                                            int v571;
                                            v571 = 4 * v567;
                                            int v572;
                                            v572 = v571 + v569;
                                            float v573;
                                            v573 = v536[v572];
                                            float v574;
                                            v574 = v502[v572];
                                            bool v575;
                                            v575 = v574 > 0.0f;
                                            assert("Tensor range check" && 0 <= v567 && v567 < 1);
                                            assert("Tensor range check" && 0 <= v569 && v569 < 4);
                                            v565[v572] = v573;
                                            v566[v572] = v575;
                                            v569 += 1 ;
                                        }
                                        v567 += 1 ;
                                    }
                                    float v576; bool v577;
                                    Tuple14 tmp87 = Tuple14{-1.0f / 0.0f, false};
                                    v576 = tmp87.v0; v577 = tmp87.v1;
                                    int v578;
                                    v578 = 0;
                                    while (while_method_6(v578)){
                                        int v580;
                                        v580 = 0;
                                        while (while_method_3(v580)){
                                            assert("Tensor range check" && 0 <= v578 && v578 < 1);
                                            assert("Tensor range check" && 0 <= v580 && v580 < 4);
                                            int v582;
                                            v582 = 4 * v578;
                                            int v583;
                                            v583 = v582 + v580;
                                            float v584;
                                            v584 = v565[v583];
                                            bool v585;
                                            v585 = v566[v583];
                                            float v592; bool v593;
                                            if (v577){
                                                if (v585){
                                                    bool v586;
                                                    v586 = v576 >= v584;
                                                    float v587;
                                                    if (v586){
                                                        v587 = v576;
                                                    } else {
                                                        v587 = v584;
                                                    }
                                                    v592 = v587; v593 = true;
                                                } else {
                                                    v592 = v576; v593 = v577;
                                                }
                                            } else {
                                                if (v585){
                                                    v592 = v584; v593 = v585;
                                                } else {
                                                    v592 = v576; v593 = v577;
                                                }
                                            }
                                            v576 = v592;
                                            v577 = v593;
                                            v580 += 1 ;
                                        }
                                        v578 += 1 ;
                                    }
                                    auto v594 = cooperative_groups::coalesced_threads();
                                    int v595;
                                    v595 = threadIdx.x;
                                    int v596;
                                    v596 = v595 / 16;
                                    auto v597 = cooperative_groups::labeled_partition(v594,v596);
                                    Closure3 v598{};
                                    float v599; bool v600;
                                    Tuple14 tmp88 = cooperative_groups::reduce(v597, Tuple14{v576, v577}, v598);
                                    v599 = tmp88.v0; v600 = tmp88.v1;
                                    bool v601;
                                    v601 = v600 == false;
                                    if (v601){
                                        int v602;
                                        v602 = threadIdx.x;
                                        int v603;
                                        v603 = blockIdx.x;
                                        int v604;
                                        v604 = v603 * 256;
                                        int v605;
                                        v605 = v602 + v604;
                                        cuda::counting_semaphore<cuda::thread_scope_system, 1> & v606 = console_lock;
                                        auto v607 = cooperative_groups::coalesced_threads();
                                        v606.acquire();
                                        int v608;
                                        v608 = 0;
                                        printf("{%s = %d; %s = %c","tid", v605, "x'", '[');
                                        int v609;
                                        v609 = 0;
                                        while (while_method_6(v609)){
                                            int v611;
                                            v611 = v608;
                                            bool v612;
                                            v612 = v611 >= 100;
                                            if (v612){
                                                printf("%s"," ...");
                                                break;
                                            } else {
                                            }
                                            bool v613;
                                            v613 = v609 == 0;
                                            bool v614;
                                            v614 = v613 != true;
                                            if (v614){
                                                printf("%s","; ");
                                            } else {
                                            }
                                            printf("%c",'[');
                                            int v615;
                                            v615 = 0;
                                            while (while_method_3(v615)){
                                                int v617;
                                                v617 = v608;
                                                bool v618;
                                                v618 = v617 >= 100;
                                                if (v618){
                                                    printf("%s"," ...");
                                                    break;
                                                } else {
                                                }
                                                bool v619;
                                                v619 = v615 == 0;
                                                bool v620;
                                                v620 = v619 != true;
                                                if (v620){
                                                    printf("%s","; ");
                                                } else {
                                                }
                                                int v621;
                                                v621 = v608 + 1;
                                                v608 = v621;
                                                int v622;
                                                v622 = v609 * 4;
                                                int v623;
                                                v623 = v622 + v615;
                                                float v624;
                                                v624 = v565[v623];
                                                bool v625;
                                                v625 = v566[v623];
                                                const char * v628;
                                                if (v625){
                                                    const char * v626;
                                                    v626 = "true";
                                                    v628 = v626;
                                                } else {
                                                    const char * v627;
                                                    v627 = "false";
                                                    v628 = v627;
                                                }
                                                printf("%f, %s",v624, v628);
                                                v615 += 1 ;
                                            }
                                            printf("%c",']');
                                            v609 += 1 ;
                                        }
                                        printf("%c",']');
                                        printf("}\n");
                                        v606.release();
                                        v607.sync() ;
                                    } else {
                                    }
                                    if (v601){
                                        assert("The local reduce must be true." && v600);
                                    } else {
                                    }
                                    float v664[4];
                                    int v665[4];
                                    int v666;
                                    v666 = 0;
                                    while (while_method_6(v666)){
                                        int v668;
                                        v668 = 0;
                                        while (while_method_3(v668)){
                                            assert("Tensor range check" && 0 <= v666 && v666 < 1);
                                            assert("Tensor range check" && 0 <= v668 && v668 < 4);
                                            int v670;
                                            v670 = 4 * v666;
                                            int v671;
                                            v671 = v670 + v668;
                                            int v672;
                                            v672 = v503[v671];
                                            float v673;
                                            v673 = curand_uniform(&v184);
                                            assert("Tensor range check" && 0 <= v666 && v666 < 1);
                                            assert("Tensor range check" && 0 <= v668 && v668 < 4);
                                            v664[v671] = v673;
                                            v665[v671] = v672;
                                            v668 += 1 ;
                                        }
                                        v666 += 1 ;
                                    }
                                    float v674; int v675;
                                    Tuple15 tmp89 = Tuple15{0.0f, 2147483647};
                                    v674 = tmp89.v0; v675 = tmp89.v1;
                                    int v676;
                                    v676 = 0;
                                    while (while_method_6(v676)){
                                        int v678;
                                        v678 = 0;
                                        while (while_method_3(v678)){
                                            assert("Tensor range check" && 0 <= v676 && v676 < 1);
                                            assert("Tensor range check" && 0 <= v678 && v678 < 4);
                                            int v680;
                                            v680 = 4 * v676;
                                            int v681;
                                            v681 = v680 + v678;
                                            float v682;
                                            v682 = v664[v681];
                                            int v683;
                                            v683 = v665[v681];
                                            bool v684;
                                            v684 = v675 < v683;
                                            float v685; int v686;
                                            if (v684){
                                                v685 = v674; v686 = v675;
                                            } else {
                                                v685 = v682; v686 = v683;
                                            }
                                            v674 = v685;
                                            v675 = v686;
                                            v678 += 1 ;
                                        }
                                        v676 += 1 ;
                                    }
                                    auto v687 = cooperative_groups::coalesced_threads();
                                    int v688;
                                    v688 = threadIdx.x;
                                    int v689;
                                    v689 = v688 / 16;
                                    auto v690 = cooperative_groups::labeled_partition(v687,v689);
                                    Closure4 v691{};
                                    float v692; int v693;
                                    Tuple15 tmp90 = cooperative_groups::reduce(v690, Tuple15{v674, v675}, v691);
                                    v692 = tmp90.v0; v693 = tmp90.v1;
                                    float v694;
                                    v694 = v599 * v692;
                                    int v695[4];
                                    bool v696[4];
                                    int v697;
                                    v697 = 0;
                                    while (while_method_6(v697)){
                                        int v699;
                                        v699 = 0;
                                        while (while_method_3(v699)){
                                            assert("Tensor range check" && 0 <= v697 && v697 < 1);
                                            assert("Tensor range check" && 0 <= v699 && v699 < 4);
                                            int v701;
                                            v701 = 4 * v697;
                                            int v702;
                                            v702 = v701 + v699;
                                            float v703;
                                            v703 = v565[v702];
                                            bool v704;
                                            v704 = v566[v702];
                                            int v705;
                                            v705 = v503[v702];
                                            int v708; bool v709;
                                            if (v704){
                                                float v706;
                                                v706 = v703 - v694;
                                                bool v707;
                                                v707 = v706 >= 0.0f;
                                                v708 = v705; v709 = v707;
                                            } else {
                                                v708 = 2147483647; v709 = false;
                                            }
                                            assert("Tensor range check" && 0 <= v697 && v697 < 1);
                                            assert("Tensor range check" && 0 <= v699 && v699 < 4);
                                            v695[v702] = v708;
                                            v696[v702] = v709;
                                            v699 += 1 ;
                                        }
                                        v697 += 1 ;
                                    }
                                    int v710; bool v711;
                                    Tuple16 tmp91 = Tuple16{2147483647, false};
                                    v710 = tmp91.v0; v711 = tmp91.v1;
                                    int v712;
                                    v712 = 0;
                                    while (while_method_6(v712)){
                                        int v714;
                                        v714 = 0;
                                        while (while_method_3(v714)){
                                            assert("Tensor range check" && 0 <= v712 && v712 < 1);
                                            assert("Tensor range check" && 0 <= v714 && v714 < 4);
                                            int v716;
                                            v716 = 4 * v712;
                                            int v717;
                                            v717 = v716 + v714;
                                            int v718;
                                            v718 = v695[v717];
                                            bool v719;
                                            v719 = v696[v717];
                                            int v726; bool v727;
                                            if (v711){
                                                if (v719){
                                                    bool v720;
                                                    v720 = v710 < v718;
                                                    int v721;
                                                    if (v720){
                                                        v721 = v710;
                                                    } else {
                                                        v721 = v718;
                                                    }
                                                    v726 = v721; v727 = true;
                                                } else {
                                                    v726 = v710; v727 = v711;
                                                }
                                            } else {
                                                if (v719){
                                                    v726 = v718; v727 = v719;
                                                } else {
                                                    v726 = v710; v727 = v711;
                                                }
                                            }
                                            v710 = v726;
                                            v711 = v727;
                                            v714 += 1 ;
                                        }
                                        v712 += 1 ;
                                    }
                                    auto v728 = cooperative_groups::coalesced_threads();
                                    int v729;
                                    v729 = threadIdx.x;
                                    int v730;
                                    v730 = v729 / 16;
                                    auto v731 = cooperative_groups::labeled_partition(v728,v730);
                                    Closure5 v732{};
                                    int v733; bool v734;
                                    Tuple16 tmp92 = cooperative_groups::reduce(v731, Tuple16{v710, v711}, v732);
                                    v733 = tmp92.v0; v734 = tmp92.v1;
                                    bool v735;
                                    v735 = v734 == false;
                                    if (v735){
                                        int v736;
                                        v736 = threadIdx.x;
                                        int v737;
                                        v737 = blockIdx.x;
                                        int v738;
                                        v738 = v737 * 256;
                                        int v739;
                                        v739 = v736 + v738;
                                        cuda::counting_semaphore<cuda::thread_scope_system, 1> & v740 = console_lock;
                                        auto v741 = cooperative_groups::coalesced_threads();
                                        v740.acquire();
                                        int v742;
                                        v742 = 0;
                                        printf("{%s = %d; %s = %c","tid", v739, "x'", '[');
                                        int v743;
                                        v743 = 0;
                                        while (while_method_6(v743)){
                                            int v745;
                                            v745 = v742;
                                            bool v746;
                                            v746 = v745 >= 100;
                                            if (v746){
                                                printf("%s"," ...");
                                                break;
                                            } else {
                                            }
                                            bool v747;
                                            v747 = v743 == 0;
                                            bool v748;
                                            v748 = v747 != true;
                                            if (v748){
                                                printf("%s","; ");
                                            } else {
                                            }
                                            printf("%c",'[');
                                            int v749;
                                            v749 = 0;
                                            while (while_method_3(v749)){
                                                int v751;
                                                v751 = v742;
                                                bool v752;
                                                v752 = v751 >= 100;
                                                if (v752){
                                                    printf("%s"," ...");
                                                    break;
                                                } else {
                                                }
                                                bool v753;
                                                v753 = v749 == 0;
                                                bool v754;
                                                v754 = v753 != true;
                                                if (v754){
                                                    printf("%s","; ");
                                                } else {
                                                }
                                                int v755;
                                                v755 = v742 + 1;
                                                v742 = v755;
                                                int v756;
                                                v756 = v743 * 4;
                                                int v757;
                                                v757 = v756 + v749;
                                                int v758;
                                                v758 = v695[v757];
                                                bool v759;
                                                v759 = v696[v757];
                                                const char * v762;
                                                if (v759){
                                                    const char * v760;
                                                    v760 = "true";
                                                    v762 = v760;
                                                } else {
                                                    const char * v761;
                                                    v761 = "false";
                                                    v762 = v761;
                                                }
                                                printf("%d, %s",v758, v762);
                                                v749 += 1 ;
                                            }
                                            printf("%c",']');
                                            v743 += 1 ;
                                        }
                                        printf("%c",']');
                                        printf("}\n");
                                        v740.release();
                                        v741.sync() ;
                                    } else {
                                    }
                                    if (v735){
                                        assert("The local reduce must be true." && v734);
                                    } else {
                                    }
                                    float v798; int v799;
                                    Tuple15 tmp93 = Tuple15{0.0f, 2147483647};
                                    v798 = tmp93.v0; v799 = tmp93.v1;
                                    int v800;
                                    v800 = 0;
                                    while (while_method_6(v800)){
                                        int v802;
                                        v802 = 0;
                                        while (while_method_3(v802)){
                                            assert("Tensor range check" && 0 <= v800 && v800 < 1);
                                            assert("Tensor range check" && 0 <= v802 && v802 < 4);
                                            int v804;
                                            v804 = 4 * v800;
                                            int v805;
                                            v805 = v804 + v802;
                                            float v806;
                                            v806 = v502[v805];
                                            int v807;
                                            v807 = v503[v805];
                                            bool v808;
                                            v808 = v799 == v733;
                                            float v812; int v813;
                                            if (v808){
                                                v812 = v798; v813 = v799;
                                            } else {
                                                bool v809;
                                                v809 = v807 == v733;
                                                if (v809){
                                                    v812 = v806; v813 = v807;
                                                } else {
                                                    v812 = v798; v813 = v799;
                                                }
                                            }
                                            v798 = v812;
                                            v799 = v813;
                                            v802 += 1 ;
                                        }
                                        v800 += 1 ;
                                    }
                                    auto v814 = cooperative_groups::coalesced_threads();
                                    int v815;
                                    v815 = threadIdx.x;
                                    int v816;
                                    v816 = v815 / 16;
                                    auto v817 = cooperative_groups::labeled_partition(v814,v816);
                                    Closure6 v818{v733};
                                    float v819; int v820;
                                    Tuple15 tmp94 = cooperative_groups::reduce(v817, Tuple15{v798, v799}, v818);
                                    v819 = tmp94.v0; v820 = tmp94.v1;
                                    bool v821;
                                    v821 = v820 == 2147483647;
                                    bool v822;
                                    v822 = v821 != true;
                                    bool v823;
                                    v823 = v822 == false;
                                    if (v823){
                                        assert("Expected a valid action id in get_prob." && v822);
                                    } else {
                                    }
                                    int v825;
                                    v825 = 0;
                                    while (while_method_6(v825)){
                                        assert("Tensor range check" && 0 <= v825 && v825 < 1);
                                        assert("Tensor range check" && 0 <= v825 && v825 < 1);
                                        v825 += 1 ;
                                    }
                                    assert("Tensor range check" && 0 <= v494 && v494 < 256);
                                    v469[v494] = v819;
                                    v471[v494] = v733;
                                    v482 += 1 ;
                                }
                                __syncthreads();
                                assert("Tensor range check" && 0 <= v473 && v473 < 256);
                                float v827;
                                v827 = v469[v473];
                                int v828;
                                v828 = v471[v473];
                                __syncthreads();
                                extern __shared__ unsigned char v829[];
                                float * v830;
                                v830 = reinterpret_cast<float *>(&v829[0ull]);
                                int * v832;
                                v832 = reinterpret_cast<int *>(&v829[16ull]);
                                int v834;
                                v834 = threadIdx.x;
                                bool v835;
                                v835 = v834 == 0;
                                if (v835){
                                    v830[0] = v827;
                                    v832[0] = v828;
                                } else {
                                }
                                __syncthreads();
                                float v836;
                                v836 = v830[0];
                                int v837;
                                v837 = v832[0];
                                __syncthreads();
                                double * v838;
                                v838 = reinterpret_cast<double *>(&v1[58195968ull]);
                                double * v840;
                                v840 = reinterpret_cast<double *>(&v1[58589184ull]);
                                int v842;
                                v842 = threadIdx.x;
                                int v843;
                                v843 = blockIdx.x;
                                int v844;
                                v844 = v843 * 256;
                                int v845;
                                v845 = v842 + v844;
                                int v846;
                                v846 = 0;
                                while (while_method_3(v846)){
                                    float * v848;
                                    v848 = reinterpret_cast<float *>(&v1[51904512ull]);
                                    int v850;
                                    v850 = blockIdx.x;
                                    int v851;
                                    v851 = threadIdx.x;
                                    assert("Tensor range check" && 0 <= v846 && v846 < 4);
                                    assert("Tensor range check" && 0 <= v850 && v850 < 24);
                                    assert("Tensor range check" && 0 <= v851 && v851 < 256);
                                    assert("Tensor range check" && 0 <= v837 && v837 < 64);
                                    int v852;
                                    v852 = 64 * v851;
                                    int v853;
                                    v853 = v852 + v837;
                                    int v854;
                                    v854 = 16384 * v850;
                                    int v855;
                                    v855 = v854 + v853;
                                    int v856;
                                    v856 = 393216 * v846;
                                    int v857;
                                    v857 = v856 + v855;
                                    float v858;
                                    v858 = v848[v857];
                                    double v859;
                                    v859 = (double)v836;
                                    double v860;
                                    v860 = log(v859);
                                    double v861;
                                    v861 = (double)v858;
                                    double v862;
                                    v862 = log(v861);
                                    assert("Tensor range check" && 0 <= v846 && v846 < 4);
                                    assert("Tensor range check" && 0 <= v845 && v845 < 6144);
                                    assert("Tensor range check" && 0 <= v172 && v172 < 2);
                                    int v863;
                                    v863 = 2 * v845;
                                    int v864;
                                    v864 = v863 + v172;
                                    int v865;
                                    v865 = 12288 * v846;
                                    int v866;
                                    v866 = v865 + v864;
                                    double v867;
                                    v867 = v838[v866];
                                    double v868;
                                    v868 = v840[v866];
                                    double v869;
                                    v869 = v862 + v867;
                                    double v870;
                                    v870 = v860 + v868;
                                    bool v871;
                                    v871 = isnan(v870);
                                    bool v872;
                                    v872 = v871 == false;
                                    bool v873;
                                    v873 = v872 == false;
                                    if (v873){
                                        assert("The sampling log probability shouldn't be nan." && v872);
                                    } else {
                                    }
                                    bool v875;
                                    v875 = isnan(v869);
                                    bool v876;
                                    v876 = v875 == false;
                                    bool v877;
                                    v877 = v876 == false;
                                    if (v877){
                                        assert("The policy log probability shouldn't be nan." && v876);
                                    } else {
                                    }
                                    assert("Tensor range check" && 0 <= v846 && v846 < 4);
                                    assert("Tensor range check" && 0 <= v845 && v845 < 6144);
                                    assert("Tensor range check" && 0 <= v172 && v172 < 2);
                                    v838[v866] = v869;
                                    v840[v866] = v870;
                                    v846 += 1 ;
                                }
                                bool v879;
                                v879 = 0 == v837;
                                Union10 v888;
                                if (v879){
                                    v888 = Union10{Union10_1{}};
                                } else {
                                    bool v881;
                                    v881 = 1 == v837;
                                    if (v881){
                                        v888 = Union10{Union10_0{}};
                                    } else {
                                        bool v883;
                                        v883 = 2 == v837;
                                        if (v883){
                                            v888 = Union10{Union10_2{1, 1}};
                                        } else {
                                            printf("%s\n", "Invalid output id in the NL Holdem model.");
                                            __trap();
                                        }
                                    }
                                }
                                switch (v888.tag) {
                                    case 0: { // AA_Call
                                        v1176 = Union1{Union1_1{}};
                                        break;
                                    }
                                    case 1: { // AA_Fold
                                        int v889;
                                        v889 = v168[0];
                                        int v891; int v892;
                                        Tuple4 tmp95 = Tuple4{1, v889};
                                        v891 = tmp95.v0; v892 = tmp95.v1;
                                        while (while_method_0(v891)){
                                            bool v894;
                                            v894 = 0 <= v891;
                                            bool v896;
                                            if (v894){
                                                bool v895;
                                                v895 = v891 < 2;
                                                v896 = v895;
                                            } else {
                                                v896 = false;
                                            }
                                            bool v897;
                                            v897 = v896 == false;
                                            if (v897){
                                                assert("Index must be in range." && v896);
                                            } else {
                                            }
                                            int v899;
                                            v899 = v168[v891];
                                            bool v901;
                                            v901 = v892 >= v899;
                                            int v902;
                                            if (v901){
                                                v902 = v892;
                                            } else {
                                                v902 = v899;
                                            }
                                            v892 = v902;
                                            v891 += 1 ;
                                        }
                                        bool v904;
                                        if (v174){
                                            bool v903;
                                            v903 = v172 < 2;
                                            v904 = v903;
                                        } else {
                                            v904 = false;
                                        }
                                        bool v905;
                                        v905 = v904 == false;
                                        if (v905){
                                            assert("Index must be in range." && v904);
                                        } else {
                                        }
                                        int v907;
                                        v907 = v168[v172];
                                        bool v909;
                                        v909 = v907 == v892;
                                        if (v909){
                                            v1176 = Union1{Union1_1{}};
                                        } else {
                                            v1176 = Union1{Union1_2{}};
                                        }
                                        break;
                                    }
                                    case 2: { // AA_Raise
                                        int v914 = v888.case2.v0; int v915 = v888.case2.v1;
                                        static_array<int,2> v916;
                                        int v918;
                                        v918 = 0;
                                        while (while_method_0(v918)){
                                            bool v920;
                                            v920 = 0 <= v918;
                                            bool v922;
                                            if (v920){
                                                bool v921;
                                                v921 = v918 < 2;
                                                v922 = v921;
                                            } else {
                                                v922 = false;
                                            }
                                            bool v923;
                                            v923 = v922 == false;
                                            if (v923){
                                                assert("Index must be in range." && v922);
                                            } else {
                                            }
                                            int v925;
                                            v925 = v170[v918];
                                            bool v928;
                                            if (v920){
                                                bool v927;
                                                v927 = v918 < 2;
                                                v928 = v927;
                                            } else {
                                                v928 = false;
                                            }
                                            bool v929;
                                            v929 = v928 == false;
                                            if (v929){
                                                assert("Index must be in range." && v928);
                                            } else {
                                            }
                                            int v931;
                                            v931 = v168[v918];
                                            int v933;
                                            v933 = v925 + v931;
                                            v916[v918] = v933;
                                            v918 += 1 ;
                                        }
                                        int v934;
                                        v934 = v168[0];
                                        int v936; int v937;
                                        Tuple4 tmp96 = Tuple4{1, v934};
                                        v936 = tmp96.v0; v937 = tmp96.v1;
                                        while (while_method_0(v936)){
                                            bool v939;
                                            v939 = 0 <= v936;
                                            bool v941;
                                            if (v939){
                                                bool v940;
                                                v940 = v936 < 2;
                                                v941 = v940;
                                            } else {
                                                v941 = false;
                                            }
                                            bool v942;
                                            v942 = v941 == false;
                                            if (v942){
                                                assert("Index must be in range." && v941);
                                            } else {
                                            }
                                            int v944;
                                            v944 = v168[v936];
                                            bool v946;
                                            v946 = v937 >= v944;
                                            int v947;
                                            if (v946){
                                                v947 = v937;
                                            } else {
                                                v947 = v944;
                                            }
                                            v937 = v947;
                                            v936 += 1 ;
                                        }
                                        bool v949;
                                        if (v174){
                                            bool v948;
                                            v948 = v172 < 2;
                                            v949 = v948;
                                        } else {
                                            v949 = false;
                                        }
                                        bool v950;
                                        v950 = v949 == false;
                                        if (v950){
                                            assert("Index must be in range." && v949);
                                        } else {
                                        }
                                        int v952;
                                        v952 = v916[v172];
                                        bool v954;
                                        v954 = v937 < v952;
                                        int v955;
                                        if (v954){
                                            v955 = v937;
                                        } else {
                                            v955 = v952;
                                        }
                                        static_array<int,2> v956;
                                        int v958;
                                        v958 = 0;
                                        while (while_method_0(v958)){
                                            bool v960;
                                            v960 = 0 <= v958;
                                            bool v962;
                                            if (v960){
                                                bool v961;
                                                v961 = v958 < 2;
                                                v962 = v961;
                                            } else {
                                                v962 = false;
                                            }
                                            bool v963;
                                            v963 = v962 == false;
                                            if (v963){
                                                assert("Index must be in range." && v962);
                                            } else {
                                            }
                                            int v965;
                                            v965 = v168[v958];
                                            bool v967;
                                            v967 = v172 == v958;
                                            int v968;
                                            if (v967){
                                                v968 = v955;
                                            } else {
                                                v968 = v965;
                                            }
                                            v956[v958] = v968;
                                            v958 += 1 ;
                                        }
                                        int v969;
                                        v969 = v956[0];
                                        int v971; int v972;
                                        Tuple4 tmp97 = Tuple4{1, v969};
                                        v971 = tmp97.v0; v972 = tmp97.v1;
                                        while (while_method_0(v971)){
                                            bool v974;
                                            v974 = 0 <= v971;
                                            bool v976;
                                            if (v974){
                                                bool v975;
                                                v975 = v971 < 2;
                                                v976 = v975;
                                            } else {
                                                v976 = false;
                                            }
                                            bool v977;
                                            v977 = v976 == false;
                                            if (v977){
                                                assert("Index must be in range." && v976);
                                            } else {
                                            }
                                            int v979;
                                            v979 = v956[v971];
                                            int v981;
                                            v981 = v972 + v979;
                                            v972 = v981;
                                            v971 += 1 ;
                                        }
                                        static_array<int,2> v982;
                                        int v984;
                                        v984 = 0;
                                        while (while_method_0(v984)){
                                            bool v986;
                                            v986 = 0 <= v984;
                                            bool v988;
                                            if (v986){
                                                bool v987;
                                                v987 = v984 < 2;
                                                v988 = v987;
                                            } else {
                                                v988 = false;
                                            }
                                            bool v989;
                                            v989 = v988 == false;
                                            if (v989){
                                                assert("Index must be in range." && v988);
                                            } else {
                                            }
                                            int v991;
                                            v991 = v916[v984];
                                            bool v994;
                                            if (v986){
                                                bool v993;
                                                v993 = v984 < 2;
                                                v994 = v993;
                                            } else {
                                                v994 = false;
                                            }
                                            bool v995;
                                            v995 = v994 == false;
                                            if (v995){
                                                assert("Index must be in range." && v994);
                                            } else {
                                            }
                                            int v997;
                                            v997 = v956[v984];
                                            int v999;
                                            v999 = v991 - v997;
                                            v982[v984] = v999;
                                            v984 += 1 ;
                                        }
                                        int v1000;
                                        v1000 = v914 * v972;
                                        int v1001;
                                        v1001 = v1000 / v915;
                                        bool v1002;
                                        v1002 = v166 >= v1001;
                                        int v1003;
                                        if (v1002){
                                            v1003 = v166;
                                        } else {
                                            v1003 = v1001;
                                        }
                                        bool v1005;
                                        if (v174){
                                            bool v1004;
                                            v1004 = v172 < 2;
                                            v1005 = v1004;
                                        } else {
                                            v1005 = false;
                                        }
                                        bool v1006;
                                        v1006 = v1005 == false;
                                        if (v1006){
                                            assert("Index must be in range." && v1005);
                                        } else {
                                        }
                                        int v1008;
                                        v1008 = v982[v172];
                                        bool v1010;
                                        v1010 = v1003 >= v1008;
                                        if (v1010){
                                            v1176 = Union1{Union1_0{}};
                                        } else {
                                            v1176 = Union1{Union1_3{v1003}};
                                        }
                                        break;
                                    }
                                    default: {
                                        assert("Invalid tag." && false); __trap();
                                    }
                                }
                                break;
                            }
                            case 2: { // Human
                                printf("%s\n", "Humans aren't allowed during training.");
                                __trap();
                                break;
                            }
                            case 3: { // Random
                                curandStatePhilox4_32_10_t & v1017 = v3.v5;
                                curandStatePhilox4_32_10_t & v1018 = v1017;
                                static_array<int,2> v1019;
                                int v1021;
                                v1021 = 0;
                                while (while_method_0(v1021)){
                                    bool v1023;
                                    v1023 = 0 <= v1021;
                                    bool v1025;
                                    if (v1023){
                                        bool v1024;
                                        v1024 = v1021 < 2;
                                        v1025 = v1024;
                                    } else {
                                        v1025 = false;
                                    }
                                    bool v1026;
                                    v1026 = v1025 == false;
                                    if (v1026){
                                        assert("Index must be in range." && v1025);
                                    } else {
                                    }
                                    int v1028;
                                    v1028 = v170[v1021];
                                    bool v1031;
                                    if (v1023){
                                        bool v1030;
                                        v1030 = v1021 < 2;
                                        v1031 = v1030;
                                    } else {
                                        v1031 = false;
                                    }
                                    bool v1032;
                                    v1032 = v1031 == false;
                                    if (v1032){
                                        assert("Index must be in range." && v1031);
                                    } else {
                                    }
                                    int v1034;
                                    v1034 = v168[v1021];
                                    int v1036;
                                    v1036 = v1028 + v1034;
                                    v1019[v1021] = v1036;
                                    v1021 += 1 ;
                                }
                                int v1037;
                                v1037 = v168[0];
                                int v1039; int v1040;
                                Tuple4 tmp98 = Tuple4{1, v1037};
                                v1039 = tmp98.v0; v1040 = tmp98.v1;
                                while (while_method_0(v1039)){
                                    bool v1042;
                                    v1042 = 0 <= v1039;
                                    bool v1044;
                                    if (v1042){
                                        bool v1043;
                                        v1043 = v1039 < 2;
                                        v1044 = v1043;
                                    } else {
                                        v1044 = false;
                                    }
                                    bool v1045;
                                    v1045 = v1044 == false;
                                    if (v1045){
                                        assert("Index must be in range." && v1044);
                                    } else {
                                    }
                                    int v1047;
                                    v1047 = v168[v1039];
                                    bool v1049;
                                    v1049 = v1040 >= v1047;
                                    int v1050;
                                    if (v1049){
                                        v1050 = v1040;
                                    } else {
                                        v1050 = v1047;
                                    }
                                    v1040 = v1050;
                                    v1039 += 1 ;
                                }
                                bool v1052;
                                if (v174){
                                    bool v1051;
                                    v1051 = v172 < 2;
                                    v1052 = v1051;
                                } else {
                                    v1052 = false;
                                }
                                bool v1053;
                                v1053 = v1052 == false;
                                if (v1053){
                                    assert("Index must be in range." && v1052);
                                } else {
                                }
                                int v1055;
                                v1055 = v1019[v172];
                                bool v1057;
                                v1057 = v1040 < v1055;
                                int v1058;
                                if (v1057){
                                    v1058 = v1040;
                                } else {
                                    v1058 = v1055;
                                }
                                static_array<int,2> v1059;
                                int v1061;
                                v1061 = 0;
                                while (while_method_0(v1061)){
                                    bool v1063;
                                    v1063 = 0 <= v1061;
                                    bool v1065;
                                    if (v1063){
                                        bool v1064;
                                        v1064 = v1061 < 2;
                                        v1065 = v1064;
                                    } else {
                                        v1065 = false;
                                    }
                                    bool v1066;
                                    v1066 = v1065 == false;
                                    if (v1066){
                                        assert("Index must be in range." && v1065);
                                    } else {
                                    }
                                    int v1068;
                                    v1068 = v168[v1061];
                                    bool v1070;
                                    v1070 = v172 == v1061;
                                    int v1071;
                                    if (v1070){
                                        v1071 = v1058;
                                    } else {
                                        v1071 = v1068;
                                    }
                                    v1059[v1061] = v1071;
                                    v1061 += 1 ;
                                }
                                int v1072;
                                v1072 = v1059[0];
                                int v1074; int v1075;
                                Tuple4 tmp99 = Tuple4{1, v1072};
                                v1074 = tmp99.v0; v1075 = tmp99.v1;
                                while (while_method_0(v1074)){
                                    bool v1077;
                                    v1077 = 0 <= v1074;
                                    bool v1079;
                                    if (v1077){
                                        bool v1078;
                                        v1078 = v1074 < 2;
                                        v1079 = v1078;
                                    } else {
                                        v1079 = false;
                                    }
                                    bool v1080;
                                    v1080 = v1079 == false;
                                    if (v1080){
                                        assert("Index must be in range." && v1079);
                                    } else {
                                    }
                                    int v1082;
                                    v1082 = v1059[v1074];
                                    int v1084;
                                    v1084 = v1075 + v1082;
                                    v1075 = v1084;
                                    v1074 += 1 ;
                                }
                                static_array<int,2> v1085;
                                int v1087;
                                v1087 = 0;
                                while (while_method_0(v1087)){
                                    bool v1089;
                                    v1089 = 0 <= v1087;
                                    bool v1091;
                                    if (v1089){
                                        bool v1090;
                                        v1090 = v1087 < 2;
                                        v1091 = v1090;
                                    } else {
                                        v1091 = false;
                                    }
                                    bool v1092;
                                    v1092 = v1091 == false;
                                    if (v1092){
                                        assert("Index must be in range." && v1091);
                                    } else {
                                    }
                                    int v1094;
                                    v1094 = v1019[v1087];
                                    bool v1097;
                                    if (v1089){
                                        bool v1096;
                                        v1096 = v1087 < 2;
                                        v1097 = v1096;
                                    } else {
                                        v1097 = false;
                                    }
                                    bool v1098;
                                    v1098 = v1097 == false;
                                    if (v1098){
                                        assert("Index must be in range." && v1097);
                                    } else {
                                    }
                                    int v1100;
                                    v1100 = v1059[v1087];
                                    int v1102;
                                    v1102 = v1094 - v1100;
                                    v1085[v1087] = v1102;
                                    v1087 += 1 ;
                                }
                                bool v1104;
                                if (v174){
                                    bool v1103;
                                    v1103 = v172 < 2;
                                    v1104 = v1103;
                                } else {
                                    v1104 = false;
                                }
                                bool v1105;
                                v1105 = v1104 == false;
                                if (v1105){
                                    assert("Index must be in range." && v1104);
                                } else {
                                }
                                int v1107;
                                v1107 = v168[v172];
                                bool v1109;
                                v1109 = v1107 < v1040;
                                float v1110;
                                if (v1109){
                                    v1110 = 1.0f;
                                } else {
                                    v1110 = 0.0f;
                                }
                                int v1111;
                                v1111 = v1075 / 3;
                                bool v1112;
                                v1112 = v166 <= v1111;
                                bool v1120;
                                if (v1112){
                                    bool v1114;
                                    if (v174){
                                        bool v1113;
                                        v1113 = v172 < 2;
                                        v1114 = v1113;
                                    } else {
                                        v1114 = false;
                                    }
                                    bool v1115;
                                    v1115 = v1114 == false;
                                    if (v1115){
                                        assert("Index must be in range." && v1114);
                                    } else {
                                    }
                                    int v1117;
                                    v1117 = v1085[v172];
                                    bool v1119;
                                    v1119 = v1111 < v1117;
                                    v1120 = v1119;
                                } else {
                                    v1120 = false;
                                }
                                float v1121;
                                if (v1120){
                                    v1121 = 1.0f;
                                } else {
                                    v1121 = 0.0f;
                                }
                                int v1122;
                                v1122 = v1075 / 2;
                                bool v1123;
                                v1123 = v166 <= v1122;
                                bool v1131;
                                if (v1123){
                                    bool v1125;
                                    if (v174){
                                        bool v1124;
                                        v1124 = v172 < 2;
                                        v1125 = v1124;
                                    } else {
                                        v1125 = false;
                                    }
                                    bool v1126;
                                    v1126 = v1125 == false;
                                    if (v1126){
                                        assert("Index must be in range." && v1125);
                                    } else {
                                    }
                                    int v1128;
                                    v1128 = v1085[v172];
                                    bool v1130;
                                    v1130 = v1122 < v1128;
                                    v1131 = v1130;
                                } else {
                                    v1131 = false;
                                }
                                float v1132;
                                if (v1131){
                                    v1132 = 1.0f;
                                } else {
                                    v1132 = 0.0f;
                                }
                                bool v1133;
                                v1133 = v166 <= v1075;
                                bool v1141;
                                if (v1133){
                                    bool v1135;
                                    if (v174){
                                        bool v1134;
                                        v1134 = v172 < 2;
                                        v1135 = v1134;
                                    } else {
                                        v1135 = false;
                                    }
                                    bool v1136;
                                    v1136 = v1135 == false;
                                    if (v1136){
                                        assert("Index must be in range." && v1135);
                                    } else {
                                    }
                                    int v1138;
                                    v1138 = v1085[v172];
                                    bool v1140;
                                    v1140 = v1075 < v1138;
                                    v1141 = v1140;
                                } else {
                                    v1141 = false;
                                }
                                float v1142;
                                if (v1141){
                                    v1142 = 1.0f;
                                } else {
                                    v1142 = 0.0f;
                                }
                                static_array<Tuple17,6> v1143;
                                Union1 v1145;
                                v1145 = Union1{Union1_2{}};
                                v1143[0] = Tuple17{v1145, v1110};
                                Union1 v1147;
                                v1147 = Union1{Union1_1{}};
                                v1143[1] = Tuple17{v1147, 4.0f};
                                Union1 v1149;
                                v1149 = Union1{Union1_3{v1111}};
                                v1143[2] = Tuple17{v1149, v1121};
                                Union1 v1151;
                                v1151 = Union1{Union1_3{v1122}};
                                v1143[3] = Tuple17{v1151, v1132};
                                Union1 v1153;
                                v1153 = Union1{Union1_3{v1075}};
                                v1143[4] = Tuple17{v1153, v1142};
                                Union1 v1155;
                                v1155 = Union1{Union1_0{}};
                                v1143[5] = Tuple17{v1155, 1.0f};
                                Union1 v1157;
                                v1157 = sample_discrete_47(v1143, v1018);
                                int v1158;
                                v1158 = sizeof(Union1);
                                unsigned long long v1159;
                                v1159 = (unsigned long long)v1158;
                                bool v1160;
                                v1160 = v1159 <= 98304ull;
                                bool v1161;
                                v1161 = v1160 == false;
                                if (v1161){
                                    assert("The dynamic shared memory is insufficient to allocate the tensor." && v1160);
                                } else {
                                }
                                extern __shared__ unsigned char v1163[];
                                bool v1164;
                                v1164 = v1159 <= v1159;
                                bool v1165;
                                v1165 = v1164 == false;
                                if (v1165){
                                    assert("The length of the partition has to be less than or equal to the length of the base array." && v1164);
                                } else {
                                }
                                Union1 * v1167;
                                v1167 = reinterpret_cast<Union1 *>(&v1163[0ull]);
                                int v1169;
                                v1169 = threadIdx.x;
                                bool v1170;
                                v1170 = v1169 == 0;
                                if (v1170){
                                    v1167[0] = v1157;
                                } else {
                                }
                                __syncthreads();
                                Union1 v1171;
                                v1171 = v1167[0];
                                __syncthreads();
                                v1176 = v1171;
                                break;
                            }
                            default: {
                                assert("Invalid tag." && false); __trap();
                            }
                        }
                        Union6 v1177;
                        v1177 = Union6{Union6_2{v172, v1176}};
                        v18.push(v1177);
                        v1328 = Union18{Union18_1{v166, v167, v168, v169, v170, v171, v1176}};
                        break;
                    }
                    case 5: { // G_Round'
                        int v1179 = v23.case5.v0; static_array<static_array<unsigned char,2>,2> v1180 = v23.case5.v1; static_array<int,2> v1181 = v23.case5.v2; int v1182 = v23.case5.v3; static_array<int,2> v1183 = v23.case5.v4; Union5 v1184 = v23.case5.v5; Union1 v1185 = v23.case5.v6;
                        int v1186;
                        v1186 = v1182 % 2;
                        Union6 v1187;
                        v1187 = Union6{Union6_2{v1186, v1185}};
                        v18.push(v1187);
                        v1328 = Union18{Union18_1{v1179, v1180, v1181, v1182, v1183, v1184, v1185}};
                        break;
                    }
                    case 6: { // G_Showdown
                        int v47 = v23.case6.v0; static_array<static_array<unsigned char,2>,2> v48 = v23.case6.v1; static_array<int,2> v49 = v23.case6.v2; int v50 = v23.case6.v3; static_array<int,2> v51 = v23.case6.v4; Union5 v52 = v23.case6.v5;
                        static_array<unsigned char,5> v55;
                        switch (v52.tag) {
                            case 2: { // River
                                static_array<unsigned char,5> v53 = v52.case2.v0;
                                v55 = v53;
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in showdown.");
                                __trap();
                            }
                        }
                        static_array<unsigned char,2> v56;
                        v56 = v48[0];
                        static_array<unsigned char,7> v58;
                        int v60;
                        v60 = 0;
                        while (while_method_0(v60)){
                            bool v62;
                            v62 = 0 <= v60;
                            bool v64;
                            if (v62){
                                bool v63;
                                v63 = v60 < 2;
                                v64 = v63;
                            } else {
                                v64 = false;
                            }
                            bool v65;
                            v65 = v64 == false;
                            if (v65){
                                assert("Index must be in range." && v64);
                            } else {
                            }
                            unsigned char v67;
                            v67 = v56[v60];
                            v58[v60] = v67;
                            v60 += 1 ;
                        }
                        int v69;
                        v69 = 0;
                        while (while_method_2(v69)){
                            bool v71;
                            v71 = 0 <= v69;
                            bool v73;
                            if (v71){
                                bool v72;
                                v72 = v69 < 5;
                                v73 = v72;
                            } else {
                                v73 = false;
                            }
                            bool v74;
                            v74 = v73 == false;
                            if (v74){
                                assert("Index must be in range." && v73);
                            } else {
                            }
                            unsigned char v76;
                            v76 = v55[v69];
                            int v78;
                            v78 = 2 + v69;
                            v58[v78] = v76;
                            v69 += 1 ;
                        }
                        static_array<unsigned char,5> v79; char v80;
                        Tuple0 tmp100 = score_51(v58);
                        v79 = tmp100.v0; v80 = tmp100.v1;
                        static_array<unsigned char,2> v81;
                        v81 = v48[1];
                        static_array<unsigned char,7> v83;
                        int v85;
                        v85 = 0;
                        while (while_method_0(v85)){
                            bool v87;
                            v87 = 0 <= v85;
                            bool v89;
                            if (v87){
                                bool v88;
                                v88 = v85 < 2;
                                v89 = v88;
                            } else {
                                v89 = false;
                            }
                            bool v90;
                            v90 = v89 == false;
                            if (v90){
                                assert("Index must be in range." && v89);
                            } else {
                            }
                            unsigned char v92;
                            v92 = v81[v85];
                            v83[v85] = v92;
                            v85 += 1 ;
                        }
                        int v94;
                        v94 = 0;
                        while (while_method_2(v94)){
                            bool v96;
                            v96 = 0 <= v94;
                            bool v98;
                            if (v96){
                                bool v97;
                                v97 = v94 < 5;
                                v98 = v97;
                            } else {
                                v98 = false;
                            }
                            bool v99;
                            v99 = v98 == false;
                            if (v99){
                                assert("Index must be in range." && v98);
                            } else {
                            }
                            unsigned char v101;
                            v101 = v55[v94];
                            int v103;
                            v103 = 2 + v94;
                            v83[v103] = v101;
                            v94 += 1 ;
                        }
                        static_array<unsigned char,5> v104; char v105;
                        Tuple0 tmp101 = score_51(v83);
                        v104 = tmp101.v0; v105 = tmp101.v1;
                        int v106;
                        v106 = v50 % 2;
                        bool v107;
                        v107 = 0 <= v106;
                        bool v109;
                        if (v107){
                            bool v108;
                            v108 = v106 < 2;
                            v109 = v108;
                        } else {
                            v109 = false;
                        }
                        bool v110;
                        v110 = v109 == false;
                        if (v110){
                            assert("Index must be in range." && v109);
                        } else {
                        }
                        int v112;
                        v112 = v49[v106];
                        bool v114;
                        v114 = v80 < v105;
                        Union11 v120;
                        if (v114){
                            v120 = Union11{Union11_2{}};
                        } else {
                            bool v116;
                            v116 = v80 > v105;
                            if (v116){
                                v120 = Union11{Union11_1{}};
                            } else {
                                v120 = Union11{Union11_0{}};
                            }
                        }
                        Union11 v148;
                        switch (v120.tag) {
                            case 0: { // Eq
                                Union11 v121;
                                v121 = Union11{Union11_0{}};
                                int v122;
                                v122 = 0;
                                while (while_method_2(v122)){
                                    bool v124;
                                    v124 = 0 <= v122;
                                    bool v126;
                                    if (v124){
                                        bool v125;
                                        v125 = v122 < 5;
                                        v126 = v125;
                                    } else {
                                        v126 = false;
                                    }
                                    bool v127;
                                    v127 = v126 == false;
                                    if (v127){
                                        assert("Index must be in range." && v126);
                                    } else {
                                    }
                                    unsigned char v129;
                                    v129 = v79[v122];
                                    bool v132;
                                    if (v124){
                                        bool v131;
                                        v131 = v122 < 5;
                                        v132 = v131;
                                    } else {
                                        v132 = false;
                                    }
                                    bool v133;
                                    v133 = v132 == false;
                                    if (v133){
                                        assert("Index must be in range." && v132);
                                    } else {
                                    }
                                    unsigned char v135;
                                    v135 = v104[v122];
                                    unsigned char v137;
                                    v137 = v129 / 4u;
                                    unsigned char v138;
                                    v138 = v135 / 4u;
                                    bool v139;
                                    v139 = v137 < v138;
                                    Union11 v145;
                                    if (v139){
                                        v145 = Union11{Union11_2{}};
                                    } else {
                                        bool v141;
                                        v141 = v137 > v138;
                                        if (v141){
                                            v145 = Union11{Union11_1{}};
                                        } else {
                                            v145 = Union11{Union11_0{}};
                                        }
                                    }
                                    bool v146;
                                    switch (v145.tag) {
                                        case 0: { // Eq
                                            v146 = true;
                                            break;
                                        }
                                        default: {
                                            v146 = false;
                                        }
                                    }
                                    bool v147;
                                    v147 = v146 == false;
                                    if (v147){
                                        v121 = v145;
                                        break;
                                    } else {
                                    }
                                    v122 += 1 ;
                                }
                                v148 = v121;
                                break;
                            }
                            default: {
                                v148 = v120;
                            }
                        }
                        int v153; int v154;
                        switch (v148.tag) {
                            case 0: { // Eq
                                v153 = 0; v154 = -1;
                                break;
                            }
                            case 1: { // Gt
                                v153 = v112; v154 = 0;
                                break;
                            }
                            case 2: { // Lt
                                v153 = v112; v154 = 1;
                                break;
                            }
                            default: {
                                assert("Invalid tag." && false); __trap();
                            }
                        }
                        int v155;
                        v155 = -v154;
                        bool v156;
                        v156 = v154 >= v155;
                        int v157;
                        if (v156){
                            v157 = v154;
                        } else {
                            v157 = v155;
                        }
                        float v158;
                        v158 = (float)v153;
                        static_array<float,2> & v159 = v3.v4;
                        v159[v157] = v158;
                        int v160;
                        v160 = v157 ^ 1;
                        float v161;
                        v161 = -v158;
                        v159[v160] = v161;
                        static_array<Tuple0,2> v162;
                        v162[0] = Tuple0{v79, v80};
                        v162[1] = Tuple0{v104, v105};
                        Union6 v164;
                        v164 = Union6{Union6_4{v153, v162, v154}};
                        v18.push(v164);
                        v1328 = Union18{Union18_0{}};
                        break;
                    }
                    case 7: { // G_Turn
                        int v1208 = v23.case7.v0; static_array<static_array<unsigned char,2>,2> v1209 = v23.case7.v1; static_array<int,2> v1210 = v23.case7.v2; int v1211 = v23.case7.v3; static_array<int,2> v1212 = v23.case7.v4; Union5 v1213 = v23.case7.v5;
                        curandStatePhilox4_32_10_t & v1214 = v3.v5;
                        curandStatePhilox4_32_10_t & v1215 = v1214;
                        static_array<unsigned char,1> v1216; unsigned long long v1217;
                        Tuple12 tmp102 = draw_cards_40(v1215, v19);
                        v1216 = tmp102.v0; v1217 = tmp102.v1;
                        v3.v0 = v1217;
                        static_array_list<unsigned char,5> v1218;
                        v1218 = get_community_cards_82(v1213, v1216);
                        Union6 v1219;
                        v1219 = Union6{Union6_0{v1218}};
                        v18.push(v1219);
                        Union5 v1244;
                        switch (v1213.tag) {
                            case 0: { // Flop
                                static_array<unsigned char,3> v1220 = v1213.case0.v0;
                                static_array<unsigned char,4> v1221;
                                int v1223;
                                v1223 = 0;
                                while (while_method_1(v1223)){
                                    bool v1225;
                                    v1225 = 0 <= v1223;
                                    bool v1227;
                                    if (v1225){
                                        bool v1226;
                                        v1226 = v1223 < 3;
                                        v1227 = v1226;
                                    } else {
                                        v1227 = false;
                                    }
                                    bool v1228;
                                    v1228 = v1227 == false;
                                    if (v1228){
                                        assert("Index must be in range." && v1227);
                                    } else {
                                    }
                                    unsigned char v1230;
                                    v1230 = v1220[v1223];
                                    v1221[v1223] = v1230;
                                    v1223 += 1 ;
                                }
                                int v1232;
                                v1232 = 0;
                                while (while_method_6(v1232)){
                                    bool v1234;
                                    v1234 = 0 <= v1232;
                                    bool v1236;
                                    if (v1234){
                                        bool v1235;
                                        v1235 = v1232 < 1;
                                        v1236 = v1235;
                                    } else {
                                        v1236 = false;
                                    }
                                    bool v1237;
                                    v1237 = v1236 == false;
                                    if (v1237){
                                        assert("Index must be in range." && v1236);
                                    } else {
                                    }
                                    unsigned char v1239;
                                    v1239 = v1216[v1232];
                                    int v1241;
                                    v1241 = 3 + v1232;
                                    v1221[v1241] = v1239;
                                    v1232 += 1 ;
                                }
                                v1244 = Union5{Union5_3{v1221}};
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in turn.");
                                __trap();
                            }
                        }
                        int v1245;
                        v1245 = 2;
                        int v1246;
                        v1246 = 0;
                        Union4 v1247;
                        v1247 = try_round_36(v1245, v1209, v1210, v1246, v1212, v1244);
                        v1328 = Union18{Union18_2{v1247}};
                        break;
                    }
                    default: {
                        assert("Invalid tag." && false); __trap();
                    }
                }
                switch (v1328.tag) {
                    case 0: { // T_none
                        v1677 = Union3{Union3_0{}};
                        break;
                    }
                    case 1: { // T_round
                        int v1332 = v1328.case1.v0; static_array<static_array<unsigned char,2>,2> v1333 = v1328.case1.v1; static_array<int,2> v1334 = v1328.case1.v2; int v1335 = v1328.case1.v3; static_array<int,2> v1336 = v1328.case1.v4; Union5 v1337 = v1328.case1.v5; Union1 v1338 = v1328.case1.v6;
                        int v1339;
                        v1339 = v1335 % 2;
                        Union4 v1670;
                        switch (v1338.tag) {
                            case 0: { // A_All_In
                                static_array<int,2> v1545;
                                int v1547;
                                v1547 = 0;
                                while (while_method_0(v1547)){
                                    bool v1549;
                                    v1549 = 0 <= v1547;
                                    bool v1551;
                                    if (v1549){
                                        bool v1550;
                                        v1550 = v1547 < 2;
                                        v1551 = v1550;
                                    } else {
                                        v1551 = false;
                                    }
                                    bool v1552;
                                    v1552 = v1551 == false;
                                    if (v1552){
                                        assert("Index must be in range." && v1551);
                                    } else {
                                    }
                                    int v1554;
                                    v1554 = v1336[v1547];
                                    bool v1557;
                                    if (v1549){
                                        bool v1556;
                                        v1556 = v1547 < 2;
                                        v1557 = v1556;
                                    } else {
                                        v1557 = false;
                                    }
                                    bool v1558;
                                    v1558 = v1557 == false;
                                    if (v1558){
                                        assert("Index must be in range." && v1557);
                                    } else {
                                    }
                                    int v1560;
                                    v1560 = v1334[v1547];
                                    int v1562;
                                    v1562 = v1554 + v1560;
                                    v1545[v1547] = v1562;
                                    v1547 += 1 ;
                                }
                                int v1563;
                                v1563 = v1334[0];
                                int v1565; int v1566;
                                Tuple4 tmp103 = Tuple4{1, v1563};
                                v1565 = tmp103.v0; v1566 = tmp103.v1;
                                while (while_method_0(v1565)){
                                    bool v1568;
                                    v1568 = 0 <= v1565;
                                    bool v1570;
                                    if (v1568){
                                        bool v1569;
                                        v1569 = v1565 < 2;
                                        v1570 = v1569;
                                    } else {
                                        v1570 = false;
                                    }
                                    bool v1571;
                                    v1571 = v1570 == false;
                                    if (v1571){
                                        assert("Index must be in range." && v1570);
                                    } else {
                                    }
                                    int v1573;
                                    v1573 = v1334[v1565];
                                    bool v1575;
                                    v1575 = v1566 >= v1573;
                                    int v1576;
                                    if (v1575){
                                        v1576 = v1566;
                                    } else {
                                        v1576 = v1573;
                                    }
                                    v1566 = v1576;
                                    v1565 += 1 ;
                                }
                                bool v1577;
                                v1577 = 0 <= v1339;
                                bool v1579;
                                if (v1577){
                                    bool v1578;
                                    v1578 = v1339 < 2;
                                    v1579 = v1578;
                                } else {
                                    v1579 = false;
                                }
                                bool v1580;
                                v1580 = v1579 == false;
                                if (v1580){
                                    assert("Index must be in range." && v1579);
                                } else {
                                }
                                int v1582;
                                v1582 = v1545[v1339];
                                bool v1584;
                                v1584 = v1566 < v1582;
                                int v1585;
                                if (v1584){
                                    v1585 = v1566;
                                } else {
                                    v1585 = v1582;
                                }
                                static_array<int,2> v1586;
                                int v1588;
                                v1588 = 0;
                                while (while_method_0(v1588)){
                                    bool v1590;
                                    v1590 = 0 <= v1588;
                                    bool v1592;
                                    if (v1590){
                                        bool v1591;
                                        v1591 = v1588 < 2;
                                        v1592 = v1591;
                                    } else {
                                        v1592 = false;
                                    }
                                    bool v1593;
                                    v1593 = v1592 == false;
                                    if (v1593){
                                        assert("Index must be in range." && v1592);
                                    } else {
                                    }
                                    int v1595;
                                    v1595 = v1334[v1588];
                                    bool v1597;
                                    v1597 = v1339 == v1588;
                                    int v1598;
                                    if (v1597){
                                        v1598 = v1585;
                                    } else {
                                        v1598 = v1595;
                                    }
                                    v1586[v1588] = v1598;
                                    v1588 += 1 ;
                                }
                                static_array<int,2> v1599;
                                int v1601;
                                v1601 = 0;
                                while (while_method_0(v1601)){
                                    bool v1603;
                                    v1603 = 0 <= v1601;
                                    bool v1605;
                                    if (v1603){
                                        bool v1604;
                                        v1604 = v1601 < 2;
                                        v1605 = v1604;
                                    } else {
                                        v1605 = false;
                                    }
                                    bool v1606;
                                    v1606 = v1605 == false;
                                    if (v1606){
                                        assert("Index must be in range." && v1605);
                                    } else {
                                    }
                                    int v1608;
                                    v1608 = v1545[v1601];
                                    bool v1611;
                                    if (v1603){
                                        bool v1610;
                                        v1610 = v1601 < 2;
                                        v1611 = v1610;
                                    } else {
                                        v1611 = false;
                                    }
                                    bool v1612;
                                    v1612 = v1611 == false;
                                    if (v1612){
                                        assert("Index must be in range." && v1611);
                                    } else {
                                    }
                                    int v1614;
                                    v1614 = v1586[v1601];
                                    int v1616;
                                    v1616 = v1608 - v1614;
                                    v1599[v1601] = v1616;
                                    v1601 += 1 ;
                                }
                                bool v1618;
                                if (v1577){
                                    bool v1617;
                                    v1617 = v1339 < 2;
                                    v1618 = v1617;
                                } else {
                                    v1618 = false;
                                }
                                bool v1619;
                                v1619 = v1618 == false;
                                if (v1619){
                                    assert("Index must be in range." && v1618);
                                } else {
                                }
                                int v1621;
                                v1621 = v1599[v1339];
                                int v1623;
                                v1623 = v1566 + v1621;
                                bool v1625;
                                if (v1577){
                                    bool v1624;
                                    v1624 = v1339 < 2;
                                    v1625 = v1624;
                                } else {
                                    v1625 = false;
                                }
                                bool v1626;
                                v1626 = v1625 == false;
                                if (v1626){
                                    assert("Index must be in range." && v1625);
                                } else {
                                }
                                int v1628;
                                v1628 = v1545[v1339];
                                bool v1630;
                                v1630 = v1623 < v1628;
                                int v1631;
                                if (v1630){
                                    v1631 = v1623;
                                } else {
                                    v1631 = v1628;
                                }
                                static_array<int,2> v1632;
                                int v1634;
                                v1634 = 0;
                                while (while_method_0(v1634)){
                                    bool v1636;
                                    v1636 = 0 <= v1634;
                                    bool v1638;
                                    if (v1636){
                                        bool v1637;
                                        v1637 = v1634 < 2;
                                        v1638 = v1637;
                                    } else {
                                        v1638 = false;
                                    }
                                    bool v1639;
                                    v1639 = v1638 == false;
                                    if (v1639){
                                        assert("Index must be in range." && v1638);
                                    } else {
                                    }
                                    int v1641;
                                    v1641 = v1334[v1634];
                                    bool v1643;
                                    v1643 = v1339 == v1634;
                                    int v1644;
                                    if (v1643){
                                        v1644 = v1631;
                                    } else {
                                        v1644 = v1641;
                                    }
                                    v1632[v1634] = v1644;
                                    v1634 += 1 ;
                                }
                                static_array<int,2> v1645;
                                int v1647;
                                v1647 = 0;
                                while (while_method_0(v1647)){
                                    bool v1649;
                                    v1649 = 0 <= v1647;
                                    bool v1651;
                                    if (v1649){
                                        bool v1650;
                                        v1650 = v1647 < 2;
                                        v1651 = v1650;
                                    } else {
                                        v1651 = false;
                                    }
                                    bool v1652;
                                    v1652 = v1651 == false;
                                    if (v1652){
                                        assert("Index must be in range." && v1651);
                                    } else {
                                    }
                                    int v1654;
                                    v1654 = v1545[v1647];
                                    bool v1657;
                                    if (v1649){
                                        bool v1656;
                                        v1656 = v1647 < 2;
                                        v1657 = v1656;
                                    } else {
                                        v1657 = false;
                                    }
                                    bool v1658;
                                    v1658 = v1657 == false;
                                    if (v1658){
                                        assert("Index must be in range." && v1657);
                                    } else {
                                    }
                                    int v1660;
                                    v1660 = v1632[v1647];
                                    int v1662;
                                    v1662 = v1654 - v1660;
                                    v1645[v1647] = v1662;
                                    v1647 += 1 ;
                                }
                                bool v1663;
                                v1663 = v1621 >= v1332;
                                int v1664;
                                if (v1663){
                                    v1664 = v1621;
                                } else {
                                    v1664 = v1332;
                                }
                                int v1665;
                                v1665 = v1335 + 1;
                                v1670 = try_round_36(v1664, v1333, v1632, v1665, v1645, v1337);
                                break;
                            }
                            case 1: { // A_Call
                                static_array<int,2> v1341;
                                int v1343;
                                v1343 = 0;
                                while (while_method_0(v1343)){
                                    bool v1345;
                                    v1345 = 0 <= v1343;
                                    bool v1347;
                                    if (v1345){
                                        bool v1346;
                                        v1346 = v1343 < 2;
                                        v1347 = v1346;
                                    } else {
                                        v1347 = false;
                                    }
                                    bool v1348;
                                    v1348 = v1347 == false;
                                    if (v1348){
                                        assert("Index must be in range." && v1347);
                                    } else {
                                    }
                                    int v1350;
                                    v1350 = v1336[v1343];
                                    bool v1353;
                                    if (v1345){
                                        bool v1352;
                                        v1352 = v1343 < 2;
                                        v1353 = v1352;
                                    } else {
                                        v1353 = false;
                                    }
                                    bool v1354;
                                    v1354 = v1353 == false;
                                    if (v1354){
                                        assert("Index must be in range." && v1353);
                                    } else {
                                    }
                                    int v1356;
                                    v1356 = v1334[v1343];
                                    int v1358;
                                    v1358 = v1350 + v1356;
                                    v1341[v1343] = v1358;
                                    v1343 += 1 ;
                                }
                                int v1359;
                                v1359 = v1334[0];
                                int v1361; int v1362;
                                Tuple4 tmp104 = Tuple4{1, v1359};
                                v1361 = tmp104.v0; v1362 = tmp104.v1;
                                while (while_method_0(v1361)){
                                    bool v1364;
                                    v1364 = 0 <= v1361;
                                    bool v1366;
                                    if (v1364){
                                        bool v1365;
                                        v1365 = v1361 < 2;
                                        v1366 = v1365;
                                    } else {
                                        v1366 = false;
                                    }
                                    bool v1367;
                                    v1367 = v1366 == false;
                                    if (v1367){
                                        assert("Index must be in range." && v1366);
                                    } else {
                                    }
                                    int v1369;
                                    v1369 = v1334[v1361];
                                    bool v1371;
                                    v1371 = v1362 >= v1369;
                                    int v1372;
                                    if (v1371){
                                        v1372 = v1362;
                                    } else {
                                        v1372 = v1369;
                                    }
                                    v1362 = v1372;
                                    v1361 += 1 ;
                                }
                                bool v1373;
                                v1373 = 0 <= v1339;
                                bool v1375;
                                if (v1373){
                                    bool v1374;
                                    v1374 = v1339 < 2;
                                    v1375 = v1374;
                                } else {
                                    v1375 = false;
                                }
                                bool v1376;
                                v1376 = v1375 == false;
                                if (v1376){
                                    assert("Index must be in range." && v1375);
                                } else {
                                }
                                int v1378;
                                v1378 = v1341[v1339];
                                bool v1380;
                                v1380 = v1362 < v1378;
                                int v1381;
                                if (v1380){
                                    v1381 = v1362;
                                } else {
                                    v1381 = v1378;
                                }
                                static_array<int,2> v1382;
                                int v1384;
                                v1384 = 0;
                                while (while_method_0(v1384)){
                                    bool v1386;
                                    v1386 = 0 <= v1384;
                                    bool v1388;
                                    if (v1386){
                                        bool v1387;
                                        v1387 = v1384 < 2;
                                        v1388 = v1387;
                                    } else {
                                        v1388 = false;
                                    }
                                    bool v1389;
                                    v1389 = v1388 == false;
                                    if (v1389){
                                        assert("Index must be in range." && v1388);
                                    } else {
                                    }
                                    int v1391;
                                    v1391 = v1334[v1384];
                                    bool v1393;
                                    v1393 = v1339 == v1384;
                                    int v1394;
                                    if (v1393){
                                        v1394 = v1381;
                                    } else {
                                        v1394 = v1391;
                                    }
                                    v1382[v1384] = v1394;
                                    v1384 += 1 ;
                                }
                                static_array<int,2> v1395;
                                int v1397;
                                v1397 = 0;
                                while (while_method_0(v1397)){
                                    bool v1399;
                                    v1399 = 0 <= v1397;
                                    bool v1401;
                                    if (v1399){
                                        bool v1400;
                                        v1400 = v1397 < 2;
                                        v1401 = v1400;
                                    } else {
                                        v1401 = false;
                                    }
                                    bool v1402;
                                    v1402 = v1401 == false;
                                    if (v1402){
                                        assert("Index must be in range." && v1401);
                                    } else {
                                    }
                                    int v1404;
                                    v1404 = v1341[v1397];
                                    bool v1407;
                                    if (v1399){
                                        bool v1406;
                                        v1406 = v1397 < 2;
                                        v1407 = v1406;
                                    } else {
                                        v1407 = false;
                                    }
                                    bool v1408;
                                    v1408 = v1407 == false;
                                    if (v1408){
                                        assert("Index must be in range." && v1407);
                                    } else {
                                    }
                                    int v1410;
                                    v1410 = v1382[v1397];
                                    int v1412;
                                    v1412 = v1404 - v1410;
                                    v1395[v1397] = v1412;
                                    v1397 += 1 ;
                                }
                                bool v1413;
                                v1413 = v1339 < 2;
                                if (v1413){
                                    int v1414;
                                    v1414 = v1335 + 1;
                                    v1670 = try_round_36(v1332, v1333, v1382, v1414, v1395, v1337);
                                } else {
                                    v1670 = go_next_street_38(v1332, v1333, v1382, v1335, v1395, v1337);
                                }
                                break;
                            }
                            case 2: { // A_Fold
                                v1670 = Union4{Union4_1{v1332, v1333, v1334, v1335, v1336, v1337}};
                                break;
                            }
                            case 3: { // A_Raise
                                int v1418 = v1338.case3.v0;
                                bool v1419;
                                v1419 = v1332 <= v1418;
                                bool v1420;
                                v1420 = v1419 == false;
                                if (v1420){
                                    assert("The raise amount must match the minimum." && v1419);
                                } else {
                                }
                                static_array<int,2> v1422;
                                int v1424;
                                v1424 = 0;
                                while (while_method_0(v1424)){
                                    bool v1426;
                                    v1426 = 0 <= v1424;
                                    bool v1428;
                                    if (v1426){
                                        bool v1427;
                                        v1427 = v1424 < 2;
                                        v1428 = v1427;
                                    } else {
                                        v1428 = false;
                                    }
                                    bool v1429;
                                    v1429 = v1428 == false;
                                    if (v1429){
                                        assert("Index must be in range." && v1428);
                                    } else {
                                    }
                                    int v1431;
                                    v1431 = v1336[v1424];
                                    bool v1434;
                                    if (v1426){
                                        bool v1433;
                                        v1433 = v1424 < 2;
                                        v1434 = v1433;
                                    } else {
                                        v1434 = false;
                                    }
                                    bool v1435;
                                    v1435 = v1434 == false;
                                    if (v1435){
                                        assert("Index must be in range." && v1434);
                                    } else {
                                    }
                                    int v1437;
                                    v1437 = v1334[v1424];
                                    int v1439;
                                    v1439 = v1431 + v1437;
                                    v1422[v1424] = v1439;
                                    v1424 += 1 ;
                                }
                                int v1440;
                                v1440 = v1334[0];
                                int v1442; int v1443;
                                Tuple4 tmp105 = Tuple4{1, v1440};
                                v1442 = tmp105.v0; v1443 = tmp105.v1;
                                while (while_method_0(v1442)){
                                    bool v1445;
                                    v1445 = 0 <= v1442;
                                    bool v1447;
                                    if (v1445){
                                        bool v1446;
                                        v1446 = v1442 < 2;
                                        v1447 = v1446;
                                    } else {
                                        v1447 = false;
                                    }
                                    bool v1448;
                                    v1448 = v1447 == false;
                                    if (v1448){
                                        assert("Index must be in range." && v1447);
                                    } else {
                                    }
                                    int v1450;
                                    v1450 = v1334[v1442];
                                    bool v1452;
                                    v1452 = v1443 >= v1450;
                                    int v1453;
                                    if (v1452){
                                        v1453 = v1443;
                                    } else {
                                        v1453 = v1450;
                                    }
                                    v1443 = v1453;
                                    v1442 += 1 ;
                                }
                                bool v1454;
                                v1454 = 0 <= v1339;
                                bool v1456;
                                if (v1454){
                                    bool v1455;
                                    v1455 = v1339 < 2;
                                    v1456 = v1455;
                                } else {
                                    v1456 = false;
                                }
                                bool v1457;
                                v1457 = v1456 == false;
                                if (v1457){
                                    assert("Index must be in range." && v1456);
                                } else {
                                }
                                int v1459;
                                v1459 = v1422[v1339];
                                bool v1461;
                                v1461 = v1443 < v1459;
                                int v1462;
                                if (v1461){
                                    v1462 = v1443;
                                } else {
                                    v1462 = v1459;
                                }
                                static_array<int,2> v1463;
                                int v1465;
                                v1465 = 0;
                                while (while_method_0(v1465)){
                                    bool v1467;
                                    v1467 = 0 <= v1465;
                                    bool v1469;
                                    if (v1467){
                                        bool v1468;
                                        v1468 = v1465 < 2;
                                        v1469 = v1468;
                                    } else {
                                        v1469 = false;
                                    }
                                    bool v1470;
                                    v1470 = v1469 == false;
                                    if (v1470){
                                        assert("Index must be in range." && v1469);
                                    } else {
                                    }
                                    int v1472;
                                    v1472 = v1334[v1465];
                                    bool v1474;
                                    v1474 = v1339 == v1465;
                                    int v1475;
                                    if (v1474){
                                        v1475 = v1462;
                                    } else {
                                        v1475 = v1472;
                                    }
                                    v1463[v1465] = v1475;
                                    v1465 += 1 ;
                                }
                                static_array<int,2> v1476;
                                int v1478;
                                v1478 = 0;
                                while (while_method_0(v1478)){
                                    bool v1480;
                                    v1480 = 0 <= v1478;
                                    bool v1482;
                                    if (v1480){
                                        bool v1481;
                                        v1481 = v1478 < 2;
                                        v1482 = v1481;
                                    } else {
                                        v1482 = false;
                                    }
                                    bool v1483;
                                    v1483 = v1482 == false;
                                    if (v1483){
                                        assert("Index must be in range." && v1482);
                                    } else {
                                    }
                                    int v1485;
                                    v1485 = v1422[v1478];
                                    bool v1488;
                                    if (v1480){
                                        bool v1487;
                                        v1487 = v1478 < 2;
                                        v1488 = v1487;
                                    } else {
                                        v1488 = false;
                                    }
                                    bool v1489;
                                    v1489 = v1488 == false;
                                    if (v1489){
                                        assert("Index must be in range." && v1488);
                                    } else {
                                    }
                                    int v1491;
                                    v1491 = v1463[v1478];
                                    int v1493;
                                    v1493 = v1485 - v1491;
                                    v1476[v1478] = v1493;
                                    v1478 += 1 ;
                                }
                                bool v1495;
                                if (v1454){
                                    bool v1494;
                                    v1494 = v1339 < 2;
                                    v1495 = v1494;
                                } else {
                                    v1495 = false;
                                }
                                bool v1496;
                                v1496 = v1495 == false;
                                if (v1496){
                                    assert("Index must be in range." && v1495);
                                } else {
                                }
                                int v1498;
                                v1498 = v1476[v1339];
                                bool v1500;
                                v1500 = v1418 < v1498;
                                bool v1501;
                                v1501 = v1500 == false;
                                if (v1501){
                                    assert("The raise amount must be less than the stack size after calling." && v1500);
                                } else {
                                }
                                int v1503;
                                v1503 = v1443 + v1418;
                                bool v1505;
                                if (v1454){
                                    bool v1504;
                                    v1504 = v1339 < 2;
                                    v1505 = v1504;
                                } else {
                                    v1505 = false;
                                }
                                bool v1506;
                                v1506 = v1505 == false;
                                if (v1506){
                                    assert("Index must be in range." && v1505);
                                } else {
                                }
                                int v1508;
                                v1508 = v1422[v1339];
                                bool v1510;
                                v1510 = v1503 < v1508;
                                int v1511;
                                if (v1510){
                                    v1511 = v1503;
                                } else {
                                    v1511 = v1508;
                                }
                                static_array<int,2> v1512;
                                int v1514;
                                v1514 = 0;
                                while (while_method_0(v1514)){
                                    bool v1516;
                                    v1516 = 0 <= v1514;
                                    bool v1518;
                                    if (v1516){
                                        bool v1517;
                                        v1517 = v1514 < 2;
                                        v1518 = v1517;
                                    } else {
                                        v1518 = false;
                                    }
                                    bool v1519;
                                    v1519 = v1518 == false;
                                    if (v1519){
                                        assert("Index must be in range." && v1518);
                                    } else {
                                    }
                                    int v1521;
                                    v1521 = v1334[v1514];
                                    bool v1523;
                                    v1523 = v1339 == v1514;
                                    int v1524;
                                    if (v1523){
                                        v1524 = v1511;
                                    } else {
                                        v1524 = v1521;
                                    }
                                    v1512[v1514] = v1524;
                                    v1514 += 1 ;
                                }
                                static_array<int,2> v1525;
                                int v1527;
                                v1527 = 0;
                                while (while_method_0(v1527)){
                                    bool v1529;
                                    v1529 = 0 <= v1527;
                                    bool v1531;
                                    if (v1529){
                                        bool v1530;
                                        v1530 = v1527 < 2;
                                        v1531 = v1530;
                                    } else {
                                        v1531 = false;
                                    }
                                    bool v1532;
                                    v1532 = v1531 == false;
                                    if (v1532){
                                        assert("Index must be in range." && v1531);
                                    } else {
                                    }
                                    int v1534;
                                    v1534 = v1422[v1527];
                                    bool v1537;
                                    if (v1529){
                                        bool v1536;
                                        v1536 = v1527 < 2;
                                        v1537 = v1536;
                                    } else {
                                        v1537 = false;
                                    }
                                    bool v1538;
                                    v1538 = v1537 == false;
                                    if (v1538){
                                        assert("Index must be in range." && v1537);
                                    } else {
                                    }
                                    int v1540;
                                    v1540 = v1512[v1527];
                                    int v1542;
                                    v1542 = v1534 - v1540;
                                    v1525[v1527] = v1542;
                                    v1527 += 1 ;
                                }
                                int v1543;
                                v1543 = v1335 + 1;
                                v1670 = try_round_36(v1418, v1333, v1512, v1543, v1525, v1337);
                                break;
                            }
                            default: {
                                assert("Invalid tag." && false); __trap();
                            }
                        }
                        v1677 = Union3{Union3_1{v1670}};
                        break;
                    }
                    case 2: { // T_some
                        Union4 v1330 = v1328.case2.v0;
                        v1677 = Union3{Union3_1{v1330}};
                        break;
                    }
                    default: {
                        assert("Invalid tag." && false); __trap();
                    }
                }
                break;
            }
            default: {
                assert("Invalid tag." && false); __trap();
            }
        }
        v21 = v1677;
    }
    return ;
}
__device__ inline bool while_method_23(int v0){
    bool v1;
    v1 = v0 < 256;
    return v1;
}
__device__ inline bool while_method_24(int v0){
    bool v1;
    v1 = v0 < 2048;
    return v1;
}
__device__ inline bool while_method_25(int v0){
    bool v1;
    v1 = v0 < 512;
    return v1;
}
__device__ inline bool while_method_26(int v0){
    bool v1;
    v1 = v0 < 131072;
    return v1;
}
__device__ inline bool while_method_27(int v0){
    bool v1;
    v1 = v0 < 32768;
    return v1;
}
__device__ inline bool while_method_28(int v0){
    bool v1;
    v1 = v0 < 24;
    return v1;
}
__device__ void method_83(unsigned char * v0, unsigned char * v1, unsigned char * v2, StackMut1 & v3, Union4 v4){
    v3.v0 = 4503599627370495ull;
    static_array<float,2> v5;
    v5[0] = 0.0f;
    v5[1] = 0.0f;
    v3.v4 = v5;
    static_array_list<Union6,128> & v7 = v3.v2;
    v7.unsafe_set_length(0);
    static_array<Union2,2> v8;
    Union2 v10;
    v10 = Union2{Union2_1{}};
    v8[0] = v10;
    Union2 v12;
    v12 = Union2{Union2_1{}};
    v8[1] = v12;
    v3.v3 = v8;
    static_array_list<Union6,128> & v14 = v3.v2;
    unsigned long long & v15 = v3.v0;
    Union3 v16;
    v16 = Union3{Union3_1{v4}};
    Union3 v17;
    v17 = v16;
    while (while_method_22(v17)){
        Union3 v1673;
        switch (v17.tag) {
            case 0: { // None
                v1673 = Union3{Union3_0{}};
                break;
            }
            case 1: { // Some
                Union4 v19 = v17.case1.v0;
                Union18 v1324;
                switch (v19.tag) {
                    case 0: { // G_Flop
                        int v1185 = v19.case0.v0; static_array<static_array<unsigned char,2>,2> v1186 = v19.case0.v1; static_array<int,2> v1187 = v19.case0.v2; int v1188 = v19.case0.v3; static_array<int,2> v1189 = v19.case0.v4; Union5 v1190 = v19.case0.v5;
                        curandStatePhilox4_32_10_t & v1191 = v3.v5;
                        curandStatePhilox4_32_10_t & v1192 = v1191;
                        static_array<unsigned char,3> v1193; unsigned long long v1194;
                        Tuple8 tmp110 = draw_cards_32(v1192, v15);
                        v1193 = tmp110.v0; v1194 = tmp110.v1;
                        v3.v0 = v1194;
                        static_array_list<unsigned char,5> v1195;
                        v1195 = get_community_cards_81(v1190, v1193);
                        Union6 v1196;
                        v1196 = Union6{Union6_0{v1195}};
                        v14.push(v1196);
                        Union5 v1199;
                        switch (v1190.tag) {
                            case 1: { // Preflop
                                v1199 = Union5{Union5_0{v1193}};
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in flop.");
                                __trap();
                            }
                        }
                        int v1200;
                        v1200 = 2;
                        int v1201;
                        v1201 = 0;
                        Union4 v1202;
                        v1202 = try_round_36(v1200, v1186, v1187, v1201, v1189, v1199);
                        v1324 = Union18{Union18_2{v1202}};
                        break;
                    }
                    case 1: { // G_Fold
                        int v20 = v19.case1.v0; static_array<static_array<unsigned char,2>,2> v21 = v19.case1.v1; static_array<int,2> v22 = v19.case1.v2; int v23 = v19.case1.v3; static_array<int,2> v24 = v19.case1.v4; Union5 v25 = v19.case1.v5;
                        int v26;
                        v26 = v23 % 2;
                        bool v27;
                        v27 = 0 <= v26;
                        bool v29;
                        if (v27){
                            bool v28;
                            v28 = v26 < 2;
                            v29 = v28;
                        } else {
                            v29 = false;
                        }
                        bool v30;
                        v30 = v29 == false;
                        if (v30){
                            assert("Index must be in range." && v29);
                        } else {
                        }
                        int v32;
                        v32 = v22[v26];
                        int v34;
                        v34 = -v32;
                        float v35;
                        v35 = (float)v34;
                        static_array<float,2> & v36 = v3.v4;
                        v36[v26] = v35;
                        int v37;
                        v37 = v26 ^ 1;
                        float v38;
                        v38 = -v35;
                        v36[v37] = v38;
                        int v39;
                        v39 = v23 + 1;
                        int v40;
                        v40 = v39 % 2;
                        Union6 v41;
                        v41 = Union6{Union6_1{v32, v40}};
                        v14.push(v41);
                        v1324 = Union18{Union18_0{}};
                        break;
                    }
                    case 2: { // G_Preflop
                        curandStatePhilox4_32_10_t & v1286 = v3.v5;
                        curandStatePhilox4_32_10_t & v1287 = v1286;
                        static_array<unsigned char,2> v1288; unsigned long long v1289;
                        Tuple11 tmp111 = draw_cards_39(v1287, v15);
                        v1288 = tmp111.v0; v1289 = tmp111.v1;
                        v3.v0 = v1289;
                        curandStatePhilox4_32_10_t & v1290 = v3.v5;
                        curandStatePhilox4_32_10_t & v1291 = v1290;
                        static_array<unsigned char,2> v1292; unsigned long long v1293;
                        Tuple11 tmp112 = draw_cards_39(v1291, v15);
                        v1292 = tmp112.v0; v1293 = tmp112.v1;
                        v3.v0 = v1293;
                        Union6 v1294;
                        v1294 = Union6{Union6_3{0, v1288}};
                        v14.push(v1294);
                        Union6 v1295;
                        v1295 = Union6{Union6_3{1, v1292}};
                        v14.push(v1295);
                        static_array<static_array<unsigned char,2>,2> v1296;
                        v1296[0] = v1288;
                        v1296[1] = v1292;
                        static_array<int,2> v1298;
                        v1298[0] = 2;
                        v1298[1] = 1;
                        static_array<int,2> v1300;
                        int v1302;
                        v1302 = 0;
                        while (while_method_0(v1302)){
                            bool v1304;
                            v1304 = 0 <= v1302;
                            bool v1306;
                            if (v1304){
                                bool v1305;
                                v1305 = v1302 < 2;
                                v1306 = v1305;
                            } else {
                                v1306 = false;
                            }
                            bool v1307;
                            v1307 = v1306 == false;
                            if (v1307){
                                assert("Index must be in range." && v1306);
                            } else {
                            }
                            int v1309;
                            v1309 = v1298[v1302];
                            int v1311;
                            v1311 = 100 - v1309;
                            v1300[v1302] = v1311;
                            v1302 += 1 ;
                        }
                        int v1312;
                        v1312 = 2;
                        int v1313;
                        v1313 = 0;
                        Union5 v1314;
                        v1314 = Union5{Union5_1{}};
                        Union4 v1315;
                        v1315 = try_round_36(v1312, v1296, v1298, v1313, v1300, v1314);
                        v1324 = Union18{Union18_2{v1315}};
                        break;
                    }
                    case 3: { // G_River
                        int v1245 = v19.case3.v0; static_array<static_array<unsigned char,2>,2> v1246 = v19.case3.v1; static_array<int,2> v1247 = v19.case3.v2; int v1248 = v19.case3.v3; static_array<int,2> v1249 = v19.case3.v4; Union5 v1250 = v19.case3.v5;
                        curandStatePhilox4_32_10_t & v1251 = v3.v5;
                        curandStatePhilox4_32_10_t & v1252 = v1251;
                        static_array<unsigned char,1> v1253; unsigned long long v1254;
                        Tuple12 tmp113 = draw_cards_40(v1252, v15);
                        v1253 = tmp113.v0; v1254 = tmp113.v1;
                        v3.v0 = v1254;
                        static_array_list<unsigned char,5> v1255;
                        v1255 = get_community_cards_82(v1250, v1253);
                        Union6 v1256;
                        v1256 = Union6{Union6_0{v1255}};
                        v14.push(v1256);
                        Union5 v1281;
                        switch (v1250.tag) {
                            case 3: { // Turn
                                static_array<unsigned char,4> v1257 = v1250.case3.v0;
                                static_array<unsigned char,5> v1258;
                                int v1260;
                                v1260 = 0;
                                while (while_method_3(v1260)){
                                    bool v1262;
                                    v1262 = 0 <= v1260;
                                    bool v1264;
                                    if (v1262){
                                        bool v1263;
                                        v1263 = v1260 < 4;
                                        v1264 = v1263;
                                    } else {
                                        v1264 = false;
                                    }
                                    bool v1265;
                                    v1265 = v1264 == false;
                                    if (v1265){
                                        assert("Index must be in range." && v1264);
                                    } else {
                                    }
                                    unsigned char v1267;
                                    v1267 = v1257[v1260];
                                    v1258[v1260] = v1267;
                                    v1260 += 1 ;
                                }
                                int v1269;
                                v1269 = 0;
                                while (while_method_6(v1269)){
                                    bool v1271;
                                    v1271 = 0 <= v1269;
                                    bool v1273;
                                    if (v1271){
                                        bool v1272;
                                        v1272 = v1269 < 1;
                                        v1273 = v1272;
                                    } else {
                                        v1273 = false;
                                    }
                                    bool v1274;
                                    v1274 = v1273 == false;
                                    if (v1274){
                                        assert("Index must be in range." && v1273);
                                    } else {
                                    }
                                    unsigned char v1276;
                                    v1276 = v1253[v1269];
                                    int v1278;
                                    v1278 = 4 + v1269;
                                    v1258[v1278] = v1276;
                                    v1269 += 1 ;
                                }
                                v1281 = Union5{Union5_2{v1258}};
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in river.");
                                __trap();
                            }
                        }
                        int v1282;
                        v1282 = 2;
                        int v1283;
                        v1283 = 0;
                        Union4 v1284;
                        v1284 = try_round_36(v1282, v1246, v1247, v1283, v1249, v1281);
                        v1324 = Union18{Union18_2{v1284}};
                        break;
                    }
                    case 4: { // G_Round
                        int v162 = v19.case4.v0; static_array<static_array<unsigned char,2>,2> v163 = v19.case4.v1; static_array<int,2> v164 = v19.case4.v2; int v165 = v19.case4.v3; static_array<int,2> v166 = v19.case4.v4; Union5 v167 = v19.case4.v5;
                        int v168;
                        v168 = v165 % 2;
                        static_array<Union2,2> & v169 = v3.v3;
                        bool v170;
                        v170 = 0 <= v168;
                        bool v172;
                        if (v170){
                            bool v171;
                            v171 = v168 < 2;
                            v172 = v171;
                        } else {
                            v172 = false;
                        }
                        bool v173;
                        v173 = v172 == false;
                        if (v173){
                            assert("Index must be in range." && v172);
                        } else {
                        }
                        Union2 v175;
                        v175 = v169[v168];
                        Union1 v1172;
                        switch (v175.tag) {
                            case 0: { // CallingMachine
                                v1172 = Union1{Union1_1{}};
                                break;
                            }
                            case 1: { // Computer
                                static_array_list<Union6,128> & v178 = v3.v2;
                                curandStatePhilox4_32_10_t & v179 = v3.v5;
                                curandStatePhilox4_32_10_t & v180 = v179;
                                float * v181;
                                v181 = reinterpret_cast<float *>(&v1[51904512ull]);
                                float * v183;
                                v183 = reinterpret_cast<float *>(&v1[0ull]);
                                float * v185;
                                v185 = reinterpret_cast<float *>(&v1[0ull]);
                                int v187;
                                v187 = blockIdx.x;
                                assert("Tensor range check" && 0 <= v187 && v187 < 24);
                                int v188;
                                v188 = 524288 * v187;
                                int v189;
                                v189 = threadIdx.x;
                                int v190;
                                v190 = v189;
                                while (while_method_7(v190)){
                                    bool v192;
                                    v192 = 0 <= v190;
                                    bool v193;
                                    v193 = v192 == false;
                                    if (v193){
                                        assert("The index needs to be zero or positive." && v192);
                                    } else {
                                    }
                                    int v195;
                                    v195 = v190 % 2048;
                                    int v196;
                                    v196 = v190 / 2048;
                                    bool v197;
                                    v197 = v196 < 256;
                                    bool v198;
                                    v198 = v197 == false;
                                    if (v198){
                                        assert("The last element of the projection dimensions needs to be greater than the index remainder." && v197);
                                    } else {
                                    }
                                    assert("Tensor range check" && 0 <= v196 && v196 < 256);
                                    assert("Tensor range check" && 0 <= v195 && v195 < 2048);
                                    int v200;
                                    v200 = v195 + v188;
                                    int v201;
                                    v201 = 2048 * v196;
                                    int v202;
                                    v202 = v201 + v200;
                                    v185[v202] = 0.0f;
                                    v190 += 256 ;
                                }
                                __syncthreads();
                                int v203;
                                v203 = threadIdx.x;
                                assert("Tensor range check" && 0 <= v203 && v203 < 256);
                                int v204;
                                v204 = 2048 * v203;
                                int v205;
                                v205 = v204 + v188;
                                int v206;
                                v206 = v178.length;
                                bool v207;
                                v207 = 128 >= v206;
                                bool v208;
                                v208 = v207 == false;
                                if (v208){
                                    assert("The type level dimension has to equal the value passed at runtime into create." && v207);
                                } else {
                                }
                                static_array_list<Union8,128> v210;
                                v210 = static_array_list<Union8,128>{};
                                v210.unsafe_set_length(v206);
                                int v212;
                                v212 = 0;
                                while (while_method_4(v206, v212)){
                                    Union6 v214;
                                    v214 = v178[v212];
                                    Union8 v220;
                                    switch (v214.tag) {
                                        case 2: { // PlayerAction
                                            int v216 = v214.case2.v0; Union1 v217 = v214.case2.v1;
                                            v220 = Union8{Union8_1{v217}};
                                            break;
                                        }
                                        default: {
                                            v220 = Union8{Union8_0{}};
                                        }
                                    }
                                    v210[v212] = v220;
                                    v212 += 1 ;
                                }
                                static_array<int,2> v221;
                                int v223;
                                v223 = 0;
                                while (while_method_0(v223)){
                                    int v225;
                                    v225 = v223 + v165;
                                    int v226;
                                    v226 = v225 % 2;
                                    bool v227;
                                    v227 = 0 <= v226;
                                    bool v229;
                                    if (v227){
                                        bool v228;
                                        v228 = v226 < 2;
                                        v229 = v228;
                                    } else {
                                        v229 = false;
                                    }
                                    bool v230;
                                    v230 = v229 == false;
                                    if (v230){
                                        assert("Index must be in range." && v229);
                                    } else {
                                    }
                                    int v232;
                                    v232 = v164[v226];
                                    v221[v223] = v232;
                                    v223 += 1 ;
                                }
                                static_array<int,2> v234;
                                int v236;
                                v236 = 0;
                                while (while_method_0(v236)){
                                    int v238;
                                    v238 = v236 + v165;
                                    int v239;
                                    v239 = v238 % 2;
                                    bool v240;
                                    v240 = 0 <= v239;
                                    bool v242;
                                    if (v240){
                                        bool v241;
                                        v241 = v239 < 2;
                                        v242 = v241;
                                    } else {
                                        v242 = false;
                                    }
                                    bool v243;
                                    v243 = v242 == false;
                                    if (v243){
                                        assert("Index must be in range." && v242);
                                    } else {
                                    }
                                    int v245;
                                    v245 = v166[v239];
                                    v234[v236] = v245;
                                    v236 += 1 ;
                                }
                                bool v248;
                                if (v170){
                                    bool v247;
                                    v247 = v168 < 2;
                                    v248 = v247;
                                } else {
                                    v248 = false;
                                }
                                bool v249;
                                v249 = v248 == false;
                                if (v249){
                                    assert("Index must be in range." && v248);
                                } else {
                                }
                                static_array<unsigned char,2> v251;
                                v251 = v163[v168];
                                static_array_list<unsigned char,5> v253;
                                v253 = static_array_list<unsigned char,5>{};
                                switch (v167.tag) {
                                    case 0: { // Flop
                                        static_array<unsigned char,3> v255 = v167.case0.v0;
                                        int v256;
                                        v256 = 0;
                                        while (while_method_1(v256)){
                                            bool v258;
                                            v258 = 0 <= v256;
                                            bool v260;
                                            if (v258){
                                                bool v259;
                                                v259 = v256 < 3;
                                                v260 = v259;
                                            } else {
                                                v260 = false;
                                            }
                                            bool v261;
                                            v261 = v260 == false;
                                            if (v261){
                                                assert("Index must be in range." && v260);
                                            } else {
                                            }
                                            unsigned char v263;
                                            v263 = v255[v256];
                                            v253.push(v263);
                                            v256 += 1 ;
                                        }
                                        break;
                                    }
                                    case 1: { // Preflop
                                        break;
                                    }
                                    case 2: { // River
                                        static_array<unsigned char,5> v275 = v167.case2.v0;
                                        int v276;
                                        v276 = 0;
                                        while (while_method_2(v276)){
                                            bool v278;
                                            v278 = 0 <= v276;
                                            bool v280;
                                            if (v278){
                                                bool v279;
                                                v279 = v276 < 5;
                                                v280 = v279;
                                            } else {
                                                v280 = false;
                                            }
                                            bool v281;
                                            v281 = v280 == false;
                                            if (v281){
                                                assert("Index must be in range." && v280);
                                            } else {
                                            }
                                            unsigned char v283;
                                            v283 = v275[v276];
                                            v253.push(v283);
                                            v276 += 1 ;
                                        }
                                        break;
                                    }
                                    case 3: { // Turn
                                        static_array<unsigned char,4> v265 = v167.case3.v0;
                                        int v266;
                                        v266 = 0;
                                        while (while_method_3(v266)){
                                            bool v268;
                                            v268 = 0 <= v266;
                                            bool v270;
                                            if (v268){
                                                bool v269;
                                                v269 = v266 < 4;
                                                v270 = v269;
                                            } else {
                                                v270 = false;
                                            }
                                            bool v271;
                                            v271 = v270 == false;
                                            if (v271){
                                                assert("Index must be in range." && v270);
                                            } else {
                                            }
                                            unsigned char v273;
                                            v273 = v265[v266];
                                            v253.push(v273);
                                            v266 += 1 ;
                                        }
                                        break;
                                    }
                                    default: {
                                        assert("Invalid tag." && false); __trap();
                                    }
                                }
                                float * v285;
                                v285 = v185+v205;
                                int v287;
                                v287 = v210.length;
                                bool v288;
                                v288 = v287 == 0;
                                if (v288){
                                    v285[0] = 1.0f;
                                } else {
                                }
                                int v289;
                                v289 = v210.length;
                                int v290;
                                v290 = 0;
                                while (while_method_4(v289, v290)){
                                    Union8 v292;
                                    v292 = v210[v290];
                                    int v294;
                                    v294 = v290 * 14;
                                    int v295;
                                    v295 = 1 + v294;
                                    switch (v292.tag) {
                                        case 0: { // None
                                            v285[v295] = 1.0f;
                                            break;
                                        }
                                        case 1: { // Some
                                            Union1 v296 = v292.case1.v0;
                                            int v297;
                                            v297 = v295 + 1;
                                            switch (v296.tag) {
                                                case 0: { // A_All_In
                                                    v285[v297] = 1.0f;
                                                    break;
                                                }
                                                case 1: { // A_Call
                                                    int v298;
                                                    v298 = v297 + 1;
                                                    v285[v298] = 1.0f;
                                                    break;
                                                }
                                                case 2: { // A_Fold
                                                    int v299;
                                                    v299 = v297 + 2;
                                                    v285[v299] = 1.0f;
                                                    break;
                                                }
                                                case 3: { // A_Raise
                                                    int v300 = v296.case3.v0;
                                                    int v301;
                                                    v301 = v297 + 3;
                                                    bool v302;
                                                    v302 = 1 <= v300;
                                                    bool v304;
                                                    if (v302){
                                                        bool v303;
                                                        v303 = v300 < 1023;
                                                        v304 = v303;
                                                    } else {
                                                        v304 = false;
                                                    }
                                                    bool v305;
                                                    v305 = v304 == false;
                                                    if (v305){
                                                        assert("Pickle failure. The input is out of the bounds of the given range." && v304);
                                                    } else {
                                                    }
                                                    int v307;
                                                    v307 = v300 - 1;
                                                    unsigned int v308;
                                                    v308 = (unsigned int)v307;
                                                    method_42(v308, v285, v301);
                                                    break;
                                                }
                                                default: {
                                                    assert("Invalid tag." && false); __trap();
                                                }
                                            }
                                            break;
                                        }
                                        default: {
                                            assert("Invalid tag." && false); __trap();
                                        }
                                    }
                                    v290 += 1 ;
                                }
                                int v309;
                                v309 = 0;
                                while (while_method_0(v309)){
                                    // 222;
                                    bool v311;
                                    v311 = 0 <= v309;
                                    bool v313;
                                    if (v311){
                                        bool v312;
                                        v312 = v309 < 2;
                                        v313 = v312;
                                    } else {
                                        v313 = false;
                                    }
                                    bool v314;
                                    v314 = v313 == false;
                                    if (v314){
                                        assert("Index must be in range." && v313);
                                    } else {
                                    }
                                    int v316;
                                    v316 = v221[v309];
                                    int v318;
                                    v318 = v309 * 11;
                                    int v319;
                                    v319 = 1794 + v318;
                                    bool v320;
                                    v320 = 0 <= v316;
                                    bool v322;
                                    if (v320){
                                        bool v321;
                                        v321 = v316 < 1023;
                                        v322 = v321;
                                    } else {
                                        v322 = false;
                                    }
                                    bool v323;
                                    v323 = v322 == false;
                                    if (v323){
                                        assert("Pickle failure. The input is out of the bounds of the given range." && v322);
                                    } else {
                                    }
                                    unsigned int v325;
                                    v325 = (unsigned int)v316;
                                    method_43(v325, v285, v319);
                                    v309 += 1 ;
                                }
                                int v326;
                                v326 = 0;
                                while (while_method_0(v326)){
                                    // 222;
                                    bool v328;
                                    v328 = 0 <= v326;
                                    bool v330;
                                    if (v328){
                                        bool v329;
                                        v329 = v326 < 2;
                                        v330 = v329;
                                    } else {
                                        v330 = false;
                                    }
                                    bool v331;
                                    v331 = v330 == false;
                                    if (v331){
                                        assert("Index must be in range." && v330);
                                    } else {
                                    }
                                    int v333;
                                    v333 = v234[v326];
                                    int v335;
                                    v335 = v326 * 11;
                                    int v336;
                                    v336 = 1817 + v335;
                                    bool v337;
                                    v337 = 0 <= v333;
                                    bool v339;
                                    if (v337){
                                        bool v338;
                                        v338 = v333 < 1023;
                                        v339 = v338;
                                    } else {
                                        v339 = false;
                                    }
                                    bool v340;
                                    v340 = v339 == false;
                                    if (v340){
                                        assert("Pickle failure. The input is out of the bounds of the given range." && v339);
                                    } else {
                                    }
                                    unsigned int v342;
                                    v342 = (unsigned int)v333;
                                    method_43(v342, v285, v336);
                                    v326 += 1 ;
                                }
                                int v343;
                                v343 = 0;
                                while (while_method_0(v343)){
                                    // 222;
                                    bool v345;
                                    v345 = 0 <= v343;
                                    bool v347;
                                    if (v345){
                                        bool v346;
                                        v346 = v343 < 2;
                                        v347 = v346;
                                    } else {
                                        v347 = false;
                                    }
                                    bool v348;
                                    v348 = v347 == false;
                                    if (v348){
                                        assert("Index must be in range." && v347);
                                    } else {
                                    }
                                    unsigned char v350;
                                    v350 = v251[v343];
                                    int v352;
                                    v352 = v343 * 17;
                                    int v353;
                                    v353 = 1840 + v352;
                                    unsigned char v354;
                                    v354 = v350 % 4u;
                                    int v355;
                                    v355 = (int)v354;
                                    unsigned char v356;
                                    v356 = v350 / 4u;
                                    int v357;
                                    v357 = (int)v356;
                                    unsigned int v358;
                                    v358 = (unsigned int)v355;
                                    int v359;
                                    v359 = (int)v358;
                                    bool v360;
                                    v360 = v359 < 4;
                                    bool v361;
                                    v361 = v360 == false;
                                    if (v361){
                                        assert("Pickle failure. Int value out of bounds." && v360);
                                    } else {
                                    }
                                    int v363;
                                    v363 = v353 + v359;
                                    v285[v363] = 1.0f;
                                    int v364;
                                    v364 = v353 + 4;
                                    unsigned int v365;
                                    v365 = (unsigned int)v357;
                                    int v366;
                                    v366 = (int)v365;
                                    bool v367;
                                    v367 = v366 < 13;
                                    bool v368;
                                    v368 = v367 == false;
                                    if (v368){
                                        assert("Pickle failure. Int value out of bounds." && v367);
                                    } else {
                                    }
                                    int v370;
                                    v370 = v364 + v366;
                                    v285[v370] = 1.0f;
                                    v343 += 1 ;
                                }
                                int v371;
                                v371 = v253.length;
                                bool v372;
                                v372 = v371 == 0;
                                if (v372){
                                    v285[1874] = 1.0f;
                                } else {
                                }
                                int v373;
                                v373 = v253.length;
                                int v374;
                                v374 = 0;
                                while (while_method_4(v373, v374)){
                                    unsigned char v376;
                                    v376 = v253[v374];
                                    int v378;
                                    v378 = v374 * 17;
                                    int v379;
                                    v379 = 1875 + v378;
                                    unsigned char v380;
                                    v380 = v376 % 4u;
                                    int v381;
                                    v381 = (int)v380;
                                    unsigned char v382;
                                    v382 = v376 / 4u;
                                    int v383;
                                    v383 = (int)v382;
                                    unsigned int v384;
                                    v384 = (unsigned int)v381;
                                    int v385;
                                    v385 = (int)v384;
                                    bool v386;
                                    v386 = v385 < 4;
                                    bool v387;
                                    v387 = v386 == false;
                                    if (v387){
                                        assert("Pickle failure. Int value out of bounds." && v386);
                                    } else {
                                    }
                                    int v389;
                                    v389 = v379 + v385;
                                    v285[v389] = 1.0f;
                                    int v390;
                                    v390 = v379 + 4;
                                    unsigned int v391;
                                    v391 = (unsigned int)v383;
                                    int v392;
                                    v392 = (int)v391;
                                    bool v393;
                                    v393 = v392 < 13;
                                    bool v394;
                                    v394 = v393 == false;
                                    if (v394){
                                        assert("Pickle failure. Int value out of bounds." && v393);
                                    } else {
                                    }
                                    int v396;
                                    v396 = v390 + v392;
                                    v285[v396] = 1.0f;
                                    v374 += 1 ;
                                }
                                __syncthreads();
                                int v397;
                                v397 = 0;
                                while (while_method_3(v397)){
                                    float * v399;
                                    v399 = reinterpret_cast<float *>(&v1[51904512ull]);
                                    assert("Tensor range check" && 0 <= v397 && v397 < 4);
                                    int v401;
                                    v401 = 393216 * v397;
                                    float * v402;
                                    v402 = reinterpret_cast<float *>(&v1[0ull]);
                                    float * v404;
                                    v404 = reinterpret_cast<float *>(&v0[0ull]);
                                    float * v406;
                                    v406 = reinterpret_cast<float *>(&v2[0ull]);
                                    assert("Tensor range check" && 0 <= v397 && v397 < 4);
                                    int v408;
                                    v408 = 131072 * v397;
                                    float * v409;
                                    v409 = reinterpret_cast<float *>(&v1[50331648ull]);
                                    block_matmul_45(v409, v404, v408, v402);
                                    block_row_map_46(v399, v401, v409);
                                    int * v411;
                                    v411 = reinterpret_cast<int *>(&v0[2097152ull]);
                                    bool * v413;
                                    v413 = reinterpret_cast<bool *>(&v0[2097168ull]);
                                    float * v415;
                                    v415 = reinterpret_cast<float *>(&v0[2097184ull]);
                                    float * v417;
                                    v417 = reinterpret_cast<float *>(&v0[2097200ull]);
                                    double * v419;
                                    v419 = reinterpret_cast<double *>(&v1[58195968ull]);
                                    double * v421;
                                    v421 = reinterpret_cast<double *>(&v1[58589184ull]);
                                    v397 += 1 ;
                                }
                                __syncthreads();
                                int * v423;
                                v423 = reinterpret_cast<int *>(&v0[2097152ull]);
                                bool * v425;
                                v425 = reinterpret_cast<bool *>(&v0[2097168ull]);
                                float * v427;
                                v427 = reinterpret_cast<float *>(&v0[2097184ull]);
                                float * v429;
                                v429 = reinterpret_cast<float *>(&v0[2097200ull]);
                                int v431;
                                v431 = v423[0];
                                float * v432;
                                v432 = reinterpret_cast<float *>(&v1[51904512ull]);
                                assert("Tensor range check" && 0 <= v431 && v431 < 4);
                                int v434;
                                v434 = 393216 * v431;
                                int v435;
                                v435 = blockIdx.x;
                                assert("Tensor range check" && 0 <= v435 && v435 < 24);
                                int v436;
                                v436 = 16384 * v435;
                                int v437;
                                v437 = v436 + v434;
                                int v438;
                                v438 = threadIdx.x;
                                assert("Tensor range check" && 0 <= v438 && v438 < 256);
                                int v439;
                                v439 = 64 * v438;
                                int v440;
                                v440 = v439 + v437;
                                float * v441;
                                v441 = v432+v440;
                                int v443;
                                v443 = sizeof(float *);
                                unsigned long long v444;
                                v444 = (unsigned long long)v443;
                                unsigned long long v445;
                                v445 = 256ull * v444;
                                unsigned long long v446;
                                v446 = v445 + 16ull;
                                unsigned long long v447;
                                v447 = v446 - 1ull;
                                unsigned long long v448;
                                v448 = v447 % 16ull;
                                unsigned long long v449;
                                v449 = v447 - v448;
                                unsigned long long v450;
                                v450 = v449 + 1024ull;
                                unsigned long long v451;
                                v451 = v450 + 16ull;
                                unsigned long long v452;
                                v452 = v451 - 1ull;
                                unsigned long long v453;
                                v453 = v452 % 16ull;
                                unsigned long long v454;
                                v454 = v452 - v453;
                                unsigned long long v455;
                                v455 = v454 + 1024ull;
                                bool v456;
                                v456 = v455 <= 98304ull;
                                bool v457;
                                v457 = v456 == false;
                                if (v457){
                                    assert("The dynamic shared memory is insufficient to allocate the tensor." && v456);
                                } else {
                                }
                                extern __shared__ unsigned char v459[];
                                bool v460;
                                v460 = v455 <= v455;
                                bool v461;
                                v461 = v460 == false;
                                if (v461){
                                    assert("The length of the partition has to be less than or equal to the length of the base array." && v460);
                                } else {
                                }
                                float * * v463;
                                v463 = reinterpret_cast<float * *>(&v459[0ull]);
                                float * v465;
                                v465 = reinterpret_cast<float *>(&v459[v449]);
                                int * v467;
                                v467 = reinterpret_cast<int *>(&v459[v454]);
                                int v469;
                                v469 = threadIdx.x;
                                assert("Tensor range check" && 0 <= v469 && v469 < 256);
                                v463[v469] = v441;
                                __syncthreads();
                                bool v470;
                                v470 = 0 <= v469;
                                bool v471;
                                v471 = v470 == false;
                                if (v471){
                                    assert("The index needs to be zero or positive." && v470);
                                } else {
                                }
                                int v473;
                                v473 = v469 % 16;
                                int v474;
                                v474 = v469 / 16;
                                bool v475;
                                v475 = v474 < 16;
                                bool v476;
                                v476 = v475 == false;
                                if (v476){
                                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v475);
                                } else {
                                }
                                assert("Tensor range check" && 0 <= v474 && v474 < 16);
                                int v478;
                                v478 = 0;
                                while (while_method_12(v478)){
                                    bool v480;
                                    v480 = 0 <= v474;
                                    bool v481;
                                    v481 = v480 && v475;
                                    bool v482;
                                    v482 = v481 == false;
                                    if (v482){
                                        assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v481);
                                    } else {
                                    }
                                    bool v484;
                                    v484 = 0 <= v478;
                                    bool v486;
                                    if (v484){
                                        bool v485;
                                        v485 = v478 < 16;
                                        v486 = v485;
                                    } else {
                                        v486 = false;
                                    }
                                    bool v487;
                                    v487 = v486 == false;
                                    if (v487){
                                        assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v486);
                                    } else {
                                    }
                                    int v489;
                                    v489 = v478 * 16;
                                    int v490;
                                    v490 = v489 + v474;
                                    assert("Tensor range check" && 0 <= v478 && v478 < 16);
                                    int v491;
                                    v491 = 16 * v478;
                                    int v492;
                                    v492 = v491 + v474;
                                    float * v493;
                                    v493 = v463[v492];
                                    int v494;
                                    v494 = blockIdx.x;
                                    int v495;
                                    v495 = v494 * 256;
                                    int v496;
                                    v496 = v495 + v490;
                                    assert("Tensor range check" && 0 <= v473 && v473 < 16);
                                    int v497;
                                    v497 = 4 * v473;
                                    float v498[4];
                                    int v499[4];
                                    int v500;
                                    v500 = 0;
                                    while (while_method_6(v500)){
                                        assert("Tensor range check" && 0 <= v500 && v500 < 1);
                                        int v502;
                                        v502 = 4 * v500;
                                        assert("Tensor range check" && 0 <= v500 && v500 < 1);
                                        int v503;
                                        v503 = 64 * v500;
                                        int v504;
                                        v504 = v503 + v497;
                                        int4* v505;
                                        v505 = reinterpret_cast<int4*>(v493 + v504);
                                        int4* v506;
                                        v506 = reinterpret_cast<int4*>(v498 + v502);
                                        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v505) % 16 == 0 && reinterpret_cast<unsigned long long>(v506) % 16 == 0);
                                        *v506 = *v505;
                                        v500 += 1 ;
                                    }
                                    int v507;
                                    v507 = 0;
                                    while (while_method_6(v507)){
                                        int v509;
                                        v509 = 0;
                                        while (while_method_3(v509)){
                                            bool v511;
                                            v511 = 0 <= v509;
                                            bool v513;
                                            if (v511){
                                                bool v512;
                                                v512 = v509 < 4;
                                                v513 = v512;
                                            } else {
                                                v513 = false;
                                            }
                                            bool v514;
                                            v514 = v513 == false;
                                            if (v514){
                                                assert("The indices should be inside the range of the dimension." && v513);
                                            } else {
                                            }
                                            bool v516;
                                            v516 = 0 <= v473;
                                            bool v518;
                                            if (v516){
                                                bool v517;
                                                v517 = v473 < 16;
                                                v518 = v517;
                                            } else {
                                                v518 = false;
                                            }
                                            bool v519;
                                            v519 = v518 == false;
                                            if (v519){
                                                assert("The indices should be inside the range of the dimension." && v518);
                                            } else {
                                            }
                                            int v521;
                                            v521 = v473 * 4;
                                            int v522;
                                            v522 = v509 + v521;
                                            bool v523;
                                            v523 = 0 <= v507;
                                            bool v525;
                                            if (v523){
                                                bool v524;
                                                v524 = v507 < 1;
                                                v525 = v524;
                                            } else {
                                                v525 = false;
                                            }
                                            bool v526;
                                            v526 = v525 == false;
                                            if (v526){
                                                assert("The indices should be inside the range of the dimension." && v525);
                                            } else {
                                            }
                                            int v528;
                                            v528 = v507 * 64;
                                            int v529;
                                            v529 = v522 + v528;
                                            assert("Tensor range check" && 0 <= v507 && v507 < 1);
                                            assert("Tensor range check" && 0 <= v509 && v509 < 4);
                                            int v530;
                                            v530 = 4 * v507;
                                            int v531;
                                            v531 = v530 + v509;
                                            v499[v531] = v529;
                                            v509 += 1 ;
                                        }
                                        v507 += 1 ;
                                    }
                                    float v532[4];
                                    float v533;
                                    v533 = 0.0f;
                                    int v534;
                                    v534 = 0;
                                    while (while_method_6(v534)){
                                        assert("Tensor range check" && 0 <= v534 && v534 < 1);
                                        int v536;
                                        v536 = 4 * v534;
                                        assert("Tensor range check" && 0 <= v534 && v534 < 1);
                                        float v537;
                                        v537 = 0.0f;
                                        int v538;
                                        v538 = 0;
                                        while (while_method_3(v538)){
                                            assert("Tensor range check" && 0 <= v538 && v538 < 4);
                                            int v540;
                                            v540 = v538 + v536;
                                            float v541;
                                            v541 = v498[v540];
                                            float v542;
                                            v542 = v537 + v541;
                                            v537 = v542;
                                            v538 += 1 ;
                                        }
                                        auto v543 = cooperative_groups::coalesced_threads();
                                        int v544;
                                        v544 = threadIdx.x;
                                        int v545;
                                        v545 = v544 / 16;
                                        auto v546 = cooperative_groups::labeled_partition(v543,v545);
                                        Closure2 v547{};
                                        float v548;
                                        v548 = cooperative_groups::inclusive_scan(v546, v537, v547);
                                        float v549;
                                        v549 = v546.shfl_up(v548,1);
                                        bool v550;
                                        v550 = v546.thread_rank() == 0;
                                        float v551;
                                        if (v550){
                                            v551 = 0.0f;
                                        } else {
                                            v551 = v549;
                                        }
                                        float v552;
                                        v552 = v546.shfl(v548,v546.num_threads()-1);
                                        float v553;
                                        v553 = v533 + v551;
                                        float v554;
                                        v554 = v553;
                                        int v555;
                                        v555 = 0;
                                        while (while_method_3(v555)){
                                            assert("Tensor range check" && 0 <= v555 && v555 < 4);
                                            int v557;
                                            v557 = v555 + v536;
                                            float v558;
                                            v558 = v498[v557];
                                            float v559;
                                            v559 = v554 + v558;
                                            assert("Tensor range check" && 0 <= v555 && v555 < 4);
                                            v532[v557] = v559;
                                            v554 = v559;
                                            v555 += 1 ;
                                        }
                                        float v560;
                                        v560 = v533 + v552;
                                        v533 = v560;
                                        v534 += 1 ;
                                    }
                                    float v561[4];
                                    bool v562[4];
                                    int v563;
                                    v563 = 0;
                                    while (while_method_6(v563)){
                                        int v565;
                                        v565 = 0;
                                        while (while_method_3(v565)){
                                            assert("Tensor range check" && 0 <= v563 && v563 < 1);
                                            assert("Tensor range check" && 0 <= v565 && v565 < 4);
                                            int v567;
                                            v567 = 4 * v563;
                                            int v568;
                                            v568 = v567 + v565;
                                            float v569;
                                            v569 = v532[v568];
                                            float v570;
                                            v570 = v498[v568];
                                            bool v571;
                                            v571 = v570 > 0.0f;
                                            assert("Tensor range check" && 0 <= v563 && v563 < 1);
                                            assert("Tensor range check" && 0 <= v565 && v565 < 4);
                                            v561[v568] = v569;
                                            v562[v568] = v571;
                                            v565 += 1 ;
                                        }
                                        v563 += 1 ;
                                    }
                                    float v572; bool v573;
                                    Tuple14 tmp114 = Tuple14{-1.0f / 0.0f, false};
                                    v572 = tmp114.v0; v573 = tmp114.v1;
                                    int v574;
                                    v574 = 0;
                                    while (while_method_6(v574)){
                                        int v576;
                                        v576 = 0;
                                        while (while_method_3(v576)){
                                            assert("Tensor range check" && 0 <= v574 && v574 < 1);
                                            assert("Tensor range check" && 0 <= v576 && v576 < 4);
                                            int v578;
                                            v578 = 4 * v574;
                                            int v579;
                                            v579 = v578 + v576;
                                            float v580;
                                            v580 = v561[v579];
                                            bool v581;
                                            v581 = v562[v579];
                                            float v588; bool v589;
                                            if (v573){
                                                if (v581){
                                                    bool v582;
                                                    v582 = v572 >= v580;
                                                    float v583;
                                                    if (v582){
                                                        v583 = v572;
                                                    } else {
                                                        v583 = v580;
                                                    }
                                                    v588 = v583; v589 = true;
                                                } else {
                                                    v588 = v572; v589 = v573;
                                                }
                                            } else {
                                                if (v581){
                                                    v588 = v580; v589 = v581;
                                                } else {
                                                    v588 = v572; v589 = v573;
                                                }
                                            }
                                            v572 = v588;
                                            v573 = v589;
                                            v576 += 1 ;
                                        }
                                        v574 += 1 ;
                                    }
                                    auto v590 = cooperative_groups::coalesced_threads();
                                    int v591;
                                    v591 = threadIdx.x;
                                    int v592;
                                    v592 = v591 / 16;
                                    auto v593 = cooperative_groups::labeled_partition(v590,v592);
                                    Closure3 v594{};
                                    float v595; bool v596;
                                    Tuple14 tmp115 = cooperative_groups::reduce(v593, Tuple14{v572, v573}, v594);
                                    v595 = tmp115.v0; v596 = tmp115.v1;
                                    bool v597;
                                    v597 = v596 == false;
                                    if (v597){
                                        int v598;
                                        v598 = threadIdx.x;
                                        int v599;
                                        v599 = blockIdx.x;
                                        int v600;
                                        v600 = v599 * 256;
                                        int v601;
                                        v601 = v598 + v600;
                                        cuda::counting_semaphore<cuda::thread_scope_system, 1> & v602 = console_lock;
                                        auto v603 = cooperative_groups::coalesced_threads();
                                        v602.acquire();
                                        int v604;
                                        v604 = 0;
                                        printf("{%s = %d; %s = %c","tid", v601, "x'", '[');
                                        int v605;
                                        v605 = 0;
                                        while (while_method_6(v605)){
                                            int v607;
                                            v607 = v604;
                                            bool v608;
                                            v608 = v607 >= 100;
                                            if (v608){
                                                printf("%s"," ...");
                                                break;
                                            } else {
                                            }
                                            bool v609;
                                            v609 = v605 == 0;
                                            bool v610;
                                            v610 = v609 != true;
                                            if (v610){
                                                printf("%s","; ");
                                            } else {
                                            }
                                            printf("%c",'[');
                                            int v611;
                                            v611 = 0;
                                            while (while_method_3(v611)){
                                                int v613;
                                                v613 = v604;
                                                bool v614;
                                                v614 = v613 >= 100;
                                                if (v614){
                                                    printf("%s"," ...");
                                                    break;
                                                } else {
                                                }
                                                bool v615;
                                                v615 = v611 == 0;
                                                bool v616;
                                                v616 = v615 != true;
                                                if (v616){
                                                    printf("%s","; ");
                                                } else {
                                                }
                                                int v617;
                                                v617 = v604 + 1;
                                                v604 = v617;
                                                int v618;
                                                v618 = v605 * 4;
                                                int v619;
                                                v619 = v618 + v611;
                                                float v620;
                                                v620 = v561[v619];
                                                bool v621;
                                                v621 = v562[v619];
                                                const char * v624;
                                                if (v621){
                                                    const char * v622;
                                                    v622 = "true";
                                                    v624 = v622;
                                                } else {
                                                    const char * v623;
                                                    v623 = "false";
                                                    v624 = v623;
                                                }
                                                printf("%f, %s",v620, v624);
                                                v611 += 1 ;
                                            }
                                            printf("%c",']');
                                            v605 += 1 ;
                                        }
                                        printf("%c",']');
                                        printf("}\n");
                                        v602.release();
                                        v603.sync() ;
                                    } else {
                                    }
                                    if (v597){
                                        assert("The local reduce must be true." && v596);
                                    } else {
                                    }
                                    float v660[4];
                                    int v661[4];
                                    int v662;
                                    v662 = 0;
                                    while (while_method_6(v662)){
                                        int v664;
                                        v664 = 0;
                                        while (while_method_3(v664)){
                                            assert("Tensor range check" && 0 <= v662 && v662 < 1);
                                            assert("Tensor range check" && 0 <= v664 && v664 < 4);
                                            int v666;
                                            v666 = 4 * v662;
                                            int v667;
                                            v667 = v666 + v664;
                                            int v668;
                                            v668 = v499[v667];
                                            float v669;
                                            v669 = curand_uniform(&v180);
                                            assert("Tensor range check" && 0 <= v662 && v662 < 1);
                                            assert("Tensor range check" && 0 <= v664 && v664 < 4);
                                            v660[v667] = v669;
                                            v661[v667] = v668;
                                            v664 += 1 ;
                                        }
                                        v662 += 1 ;
                                    }
                                    float v670; int v671;
                                    Tuple15 tmp116 = Tuple15{0.0f, 2147483647};
                                    v670 = tmp116.v0; v671 = tmp116.v1;
                                    int v672;
                                    v672 = 0;
                                    while (while_method_6(v672)){
                                        int v674;
                                        v674 = 0;
                                        while (while_method_3(v674)){
                                            assert("Tensor range check" && 0 <= v672 && v672 < 1);
                                            assert("Tensor range check" && 0 <= v674 && v674 < 4);
                                            int v676;
                                            v676 = 4 * v672;
                                            int v677;
                                            v677 = v676 + v674;
                                            float v678;
                                            v678 = v660[v677];
                                            int v679;
                                            v679 = v661[v677];
                                            bool v680;
                                            v680 = v671 < v679;
                                            float v681; int v682;
                                            if (v680){
                                                v681 = v670; v682 = v671;
                                            } else {
                                                v681 = v678; v682 = v679;
                                            }
                                            v670 = v681;
                                            v671 = v682;
                                            v674 += 1 ;
                                        }
                                        v672 += 1 ;
                                    }
                                    auto v683 = cooperative_groups::coalesced_threads();
                                    int v684;
                                    v684 = threadIdx.x;
                                    int v685;
                                    v685 = v684 / 16;
                                    auto v686 = cooperative_groups::labeled_partition(v683,v685);
                                    Closure4 v687{};
                                    float v688; int v689;
                                    Tuple15 tmp117 = cooperative_groups::reduce(v686, Tuple15{v670, v671}, v687);
                                    v688 = tmp117.v0; v689 = tmp117.v1;
                                    float v690;
                                    v690 = v595 * v688;
                                    int v691[4];
                                    bool v692[4];
                                    int v693;
                                    v693 = 0;
                                    while (while_method_6(v693)){
                                        int v695;
                                        v695 = 0;
                                        while (while_method_3(v695)){
                                            assert("Tensor range check" && 0 <= v693 && v693 < 1);
                                            assert("Tensor range check" && 0 <= v695 && v695 < 4);
                                            int v697;
                                            v697 = 4 * v693;
                                            int v698;
                                            v698 = v697 + v695;
                                            float v699;
                                            v699 = v561[v698];
                                            bool v700;
                                            v700 = v562[v698];
                                            int v701;
                                            v701 = v499[v698];
                                            int v704; bool v705;
                                            if (v700){
                                                float v702;
                                                v702 = v699 - v690;
                                                bool v703;
                                                v703 = v702 >= 0.0f;
                                                v704 = v701; v705 = v703;
                                            } else {
                                                v704 = 2147483647; v705 = false;
                                            }
                                            assert("Tensor range check" && 0 <= v693 && v693 < 1);
                                            assert("Tensor range check" && 0 <= v695 && v695 < 4);
                                            v691[v698] = v704;
                                            v692[v698] = v705;
                                            v695 += 1 ;
                                        }
                                        v693 += 1 ;
                                    }
                                    int v706; bool v707;
                                    Tuple16 tmp118 = Tuple16{2147483647, false};
                                    v706 = tmp118.v0; v707 = tmp118.v1;
                                    int v708;
                                    v708 = 0;
                                    while (while_method_6(v708)){
                                        int v710;
                                        v710 = 0;
                                        while (while_method_3(v710)){
                                            assert("Tensor range check" && 0 <= v708 && v708 < 1);
                                            assert("Tensor range check" && 0 <= v710 && v710 < 4);
                                            int v712;
                                            v712 = 4 * v708;
                                            int v713;
                                            v713 = v712 + v710;
                                            int v714;
                                            v714 = v691[v713];
                                            bool v715;
                                            v715 = v692[v713];
                                            int v722; bool v723;
                                            if (v707){
                                                if (v715){
                                                    bool v716;
                                                    v716 = v706 < v714;
                                                    int v717;
                                                    if (v716){
                                                        v717 = v706;
                                                    } else {
                                                        v717 = v714;
                                                    }
                                                    v722 = v717; v723 = true;
                                                } else {
                                                    v722 = v706; v723 = v707;
                                                }
                                            } else {
                                                if (v715){
                                                    v722 = v714; v723 = v715;
                                                } else {
                                                    v722 = v706; v723 = v707;
                                                }
                                            }
                                            v706 = v722;
                                            v707 = v723;
                                            v710 += 1 ;
                                        }
                                        v708 += 1 ;
                                    }
                                    auto v724 = cooperative_groups::coalesced_threads();
                                    int v725;
                                    v725 = threadIdx.x;
                                    int v726;
                                    v726 = v725 / 16;
                                    auto v727 = cooperative_groups::labeled_partition(v724,v726);
                                    Closure5 v728{};
                                    int v729; bool v730;
                                    Tuple16 tmp119 = cooperative_groups::reduce(v727, Tuple16{v706, v707}, v728);
                                    v729 = tmp119.v0; v730 = tmp119.v1;
                                    bool v731;
                                    v731 = v730 == false;
                                    if (v731){
                                        int v732;
                                        v732 = threadIdx.x;
                                        int v733;
                                        v733 = blockIdx.x;
                                        int v734;
                                        v734 = v733 * 256;
                                        int v735;
                                        v735 = v732 + v734;
                                        cuda::counting_semaphore<cuda::thread_scope_system, 1> & v736 = console_lock;
                                        auto v737 = cooperative_groups::coalesced_threads();
                                        v736.acquire();
                                        int v738;
                                        v738 = 0;
                                        printf("{%s = %d; %s = %c","tid", v735, "x'", '[');
                                        int v739;
                                        v739 = 0;
                                        while (while_method_6(v739)){
                                            int v741;
                                            v741 = v738;
                                            bool v742;
                                            v742 = v741 >= 100;
                                            if (v742){
                                                printf("%s"," ...");
                                                break;
                                            } else {
                                            }
                                            bool v743;
                                            v743 = v739 == 0;
                                            bool v744;
                                            v744 = v743 != true;
                                            if (v744){
                                                printf("%s","; ");
                                            } else {
                                            }
                                            printf("%c",'[');
                                            int v745;
                                            v745 = 0;
                                            while (while_method_3(v745)){
                                                int v747;
                                                v747 = v738;
                                                bool v748;
                                                v748 = v747 >= 100;
                                                if (v748){
                                                    printf("%s"," ...");
                                                    break;
                                                } else {
                                                }
                                                bool v749;
                                                v749 = v745 == 0;
                                                bool v750;
                                                v750 = v749 != true;
                                                if (v750){
                                                    printf("%s","; ");
                                                } else {
                                                }
                                                int v751;
                                                v751 = v738 + 1;
                                                v738 = v751;
                                                int v752;
                                                v752 = v739 * 4;
                                                int v753;
                                                v753 = v752 + v745;
                                                int v754;
                                                v754 = v691[v753];
                                                bool v755;
                                                v755 = v692[v753];
                                                const char * v758;
                                                if (v755){
                                                    const char * v756;
                                                    v756 = "true";
                                                    v758 = v756;
                                                } else {
                                                    const char * v757;
                                                    v757 = "false";
                                                    v758 = v757;
                                                }
                                                printf("%d, %s",v754, v758);
                                                v745 += 1 ;
                                            }
                                            printf("%c",']');
                                            v739 += 1 ;
                                        }
                                        printf("%c",']');
                                        printf("}\n");
                                        v736.release();
                                        v737.sync() ;
                                    } else {
                                    }
                                    if (v731){
                                        assert("The local reduce must be true." && v730);
                                    } else {
                                    }
                                    float v794; int v795;
                                    Tuple15 tmp120 = Tuple15{0.0f, 2147483647};
                                    v794 = tmp120.v0; v795 = tmp120.v1;
                                    int v796;
                                    v796 = 0;
                                    while (while_method_6(v796)){
                                        int v798;
                                        v798 = 0;
                                        while (while_method_3(v798)){
                                            assert("Tensor range check" && 0 <= v796 && v796 < 1);
                                            assert("Tensor range check" && 0 <= v798 && v798 < 4);
                                            int v800;
                                            v800 = 4 * v796;
                                            int v801;
                                            v801 = v800 + v798;
                                            float v802;
                                            v802 = v498[v801];
                                            int v803;
                                            v803 = v499[v801];
                                            bool v804;
                                            v804 = v795 == v729;
                                            float v808; int v809;
                                            if (v804){
                                                v808 = v794; v809 = v795;
                                            } else {
                                                bool v805;
                                                v805 = v803 == v729;
                                                if (v805){
                                                    v808 = v802; v809 = v803;
                                                } else {
                                                    v808 = v794; v809 = v795;
                                                }
                                            }
                                            v794 = v808;
                                            v795 = v809;
                                            v798 += 1 ;
                                        }
                                        v796 += 1 ;
                                    }
                                    auto v810 = cooperative_groups::coalesced_threads();
                                    int v811;
                                    v811 = threadIdx.x;
                                    int v812;
                                    v812 = v811 / 16;
                                    auto v813 = cooperative_groups::labeled_partition(v810,v812);
                                    Closure6 v814{v729};
                                    float v815; int v816;
                                    Tuple15 tmp121 = cooperative_groups::reduce(v813, Tuple15{v794, v795}, v814);
                                    v815 = tmp121.v0; v816 = tmp121.v1;
                                    bool v817;
                                    v817 = v816 == 2147483647;
                                    bool v818;
                                    v818 = v817 != true;
                                    bool v819;
                                    v819 = v818 == false;
                                    if (v819){
                                        assert("Expected a valid action id in get_prob." && v818);
                                    } else {
                                    }
                                    int v821;
                                    v821 = 0;
                                    while (while_method_6(v821)){
                                        assert("Tensor range check" && 0 <= v821 && v821 < 1);
                                        assert("Tensor range check" && 0 <= v821 && v821 < 1);
                                        v821 += 1 ;
                                    }
                                    assert("Tensor range check" && 0 <= v490 && v490 < 256);
                                    v465[v490] = v815;
                                    v467[v490] = v729;
                                    v478 += 1 ;
                                }
                                __syncthreads();
                                assert("Tensor range check" && 0 <= v469 && v469 < 256);
                                float v823;
                                v823 = v465[v469];
                                int v824;
                                v824 = v467[v469];
                                __syncthreads();
                                extern __shared__ unsigned char v825[];
                                float * v826;
                                v826 = reinterpret_cast<float *>(&v825[0ull]);
                                int * v828;
                                v828 = reinterpret_cast<int *>(&v825[16ull]);
                                int v830;
                                v830 = threadIdx.x;
                                bool v831;
                                v831 = v830 == 0;
                                if (v831){
                                    v826[0] = v823;
                                    v828[0] = v824;
                                } else {
                                }
                                __syncthreads();
                                float v832;
                                v832 = v826[0];
                                int v833;
                                v833 = v828[0];
                                __syncthreads();
                                double * v834;
                                v834 = reinterpret_cast<double *>(&v1[58195968ull]);
                                double * v836;
                                v836 = reinterpret_cast<double *>(&v1[58589184ull]);
                                int v838;
                                v838 = threadIdx.x;
                                int v839;
                                v839 = blockIdx.x;
                                int v840;
                                v840 = v839 * 256;
                                int v841;
                                v841 = v838 + v840;
                                int v842;
                                v842 = 0;
                                while (while_method_3(v842)){
                                    float * v844;
                                    v844 = reinterpret_cast<float *>(&v1[51904512ull]);
                                    int v846;
                                    v846 = blockIdx.x;
                                    int v847;
                                    v847 = threadIdx.x;
                                    assert("Tensor range check" && 0 <= v842 && v842 < 4);
                                    assert("Tensor range check" && 0 <= v846 && v846 < 24);
                                    assert("Tensor range check" && 0 <= v847 && v847 < 256);
                                    assert("Tensor range check" && 0 <= v833 && v833 < 64);
                                    int v848;
                                    v848 = 64 * v847;
                                    int v849;
                                    v849 = v848 + v833;
                                    int v850;
                                    v850 = 16384 * v846;
                                    int v851;
                                    v851 = v850 + v849;
                                    int v852;
                                    v852 = 393216 * v842;
                                    int v853;
                                    v853 = v852 + v851;
                                    float v854;
                                    v854 = v844[v853];
                                    double v855;
                                    v855 = (double)v832;
                                    double v856;
                                    v856 = log(v855);
                                    double v857;
                                    v857 = (double)v854;
                                    double v858;
                                    v858 = log(v857);
                                    assert("Tensor range check" && 0 <= v842 && v842 < 4);
                                    assert("Tensor range check" && 0 <= v841 && v841 < 6144);
                                    assert("Tensor range check" && 0 <= v168 && v168 < 2);
                                    int v859;
                                    v859 = 2 * v841;
                                    int v860;
                                    v860 = v859 + v168;
                                    int v861;
                                    v861 = 12288 * v842;
                                    int v862;
                                    v862 = v861 + v860;
                                    double v863;
                                    v863 = v834[v862];
                                    double v864;
                                    v864 = v836[v862];
                                    double v865;
                                    v865 = v858 + v863;
                                    double v866;
                                    v866 = v856 + v864;
                                    bool v867;
                                    v867 = isnan(v866);
                                    bool v868;
                                    v868 = v867 == false;
                                    bool v869;
                                    v869 = v868 == false;
                                    if (v869){
                                        assert("The sampling log probability shouldn't be nan." && v868);
                                    } else {
                                    }
                                    bool v871;
                                    v871 = isnan(v865);
                                    bool v872;
                                    v872 = v871 == false;
                                    bool v873;
                                    v873 = v872 == false;
                                    if (v873){
                                        assert("The policy log probability shouldn't be nan." && v872);
                                    } else {
                                    }
                                    assert("Tensor range check" && 0 <= v842 && v842 < 4);
                                    assert("Tensor range check" && 0 <= v841 && v841 < 6144);
                                    assert("Tensor range check" && 0 <= v168 && v168 < 2);
                                    v834[v862] = v865;
                                    v836[v862] = v866;
                                    v842 += 1 ;
                                }
                                bool v875;
                                v875 = 0 == v833;
                                Union10 v884;
                                if (v875){
                                    v884 = Union10{Union10_1{}};
                                } else {
                                    bool v877;
                                    v877 = 1 == v833;
                                    if (v877){
                                        v884 = Union10{Union10_0{}};
                                    } else {
                                        bool v879;
                                        v879 = 2 == v833;
                                        if (v879){
                                            v884 = Union10{Union10_2{1, 1}};
                                        } else {
                                            printf("%s\n", "Invalid output id in the NL Holdem model.");
                                            __trap();
                                        }
                                    }
                                }
                                switch (v884.tag) {
                                    case 0: { // AA_Call
                                        v1172 = Union1{Union1_1{}};
                                        break;
                                    }
                                    case 1: { // AA_Fold
                                        int v885;
                                        v885 = v164[0];
                                        int v887; int v888;
                                        Tuple4 tmp122 = Tuple4{1, v885};
                                        v887 = tmp122.v0; v888 = tmp122.v1;
                                        while (while_method_0(v887)){
                                            bool v890;
                                            v890 = 0 <= v887;
                                            bool v892;
                                            if (v890){
                                                bool v891;
                                                v891 = v887 < 2;
                                                v892 = v891;
                                            } else {
                                                v892 = false;
                                            }
                                            bool v893;
                                            v893 = v892 == false;
                                            if (v893){
                                                assert("Index must be in range." && v892);
                                            } else {
                                            }
                                            int v895;
                                            v895 = v164[v887];
                                            bool v897;
                                            v897 = v888 >= v895;
                                            int v898;
                                            if (v897){
                                                v898 = v888;
                                            } else {
                                                v898 = v895;
                                            }
                                            v888 = v898;
                                            v887 += 1 ;
                                        }
                                        bool v900;
                                        if (v170){
                                            bool v899;
                                            v899 = v168 < 2;
                                            v900 = v899;
                                        } else {
                                            v900 = false;
                                        }
                                        bool v901;
                                        v901 = v900 == false;
                                        if (v901){
                                            assert("Index must be in range." && v900);
                                        } else {
                                        }
                                        int v903;
                                        v903 = v164[v168];
                                        bool v905;
                                        v905 = v903 == v888;
                                        if (v905){
                                            v1172 = Union1{Union1_1{}};
                                        } else {
                                            v1172 = Union1{Union1_2{}};
                                        }
                                        break;
                                    }
                                    case 2: { // AA_Raise
                                        int v910 = v884.case2.v0; int v911 = v884.case2.v1;
                                        static_array<int,2> v912;
                                        int v914;
                                        v914 = 0;
                                        while (while_method_0(v914)){
                                            bool v916;
                                            v916 = 0 <= v914;
                                            bool v918;
                                            if (v916){
                                                bool v917;
                                                v917 = v914 < 2;
                                                v918 = v917;
                                            } else {
                                                v918 = false;
                                            }
                                            bool v919;
                                            v919 = v918 == false;
                                            if (v919){
                                                assert("Index must be in range." && v918);
                                            } else {
                                            }
                                            int v921;
                                            v921 = v166[v914];
                                            bool v924;
                                            if (v916){
                                                bool v923;
                                                v923 = v914 < 2;
                                                v924 = v923;
                                            } else {
                                                v924 = false;
                                            }
                                            bool v925;
                                            v925 = v924 == false;
                                            if (v925){
                                                assert("Index must be in range." && v924);
                                            } else {
                                            }
                                            int v927;
                                            v927 = v164[v914];
                                            int v929;
                                            v929 = v921 + v927;
                                            v912[v914] = v929;
                                            v914 += 1 ;
                                        }
                                        int v930;
                                        v930 = v164[0];
                                        int v932; int v933;
                                        Tuple4 tmp123 = Tuple4{1, v930};
                                        v932 = tmp123.v0; v933 = tmp123.v1;
                                        while (while_method_0(v932)){
                                            bool v935;
                                            v935 = 0 <= v932;
                                            bool v937;
                                            if (v935){
                                                bool v936;
                                                v936 = v932 < 2;
                                                v937 = v936;
                                            } else {
                                                v937 = false;
                                            }
                                            bool v938;
                                            v938 = v937 == false;
                                            if (v938){
                                                assert("Index must be in range." && v937);
                                            } else {
                                            }
                                            int v940;
                                            v940 = v164[v932];
                                            bool v942;
                                            v942 = v933 >= v940;
                                            int v943;
                                            if (v942){
                                                v943 = v933;
                                            } else {
                                                v943 = v940;
                                            }
                                            v933 = v943;
                                            v932 += 1 ;
                                        }
                                        bool v945;
                                        if (v170){
                                            bool v944;
                                            v944 = v168 < 2;
                                            v945 = v944;
                                        } else {
                                            v945 = false;
                                        }
                                        bool v946;
                                        v946 = v945 == false;
                                        if (v946){
                                            assert("Index must be in range." && v945);
                                        } else {
                                        }
                                        int v948;
                                        v948 = v912[v168];
                                        bool v950;
                                        v950 = v933 < v948;
                                        int v951;
                                        if (v950){
                                            v951 = v933;
                                        } else {
                                            v951 = v948;
                                        }
                                        static_array<int,2> v952;
                                        int v954;
                                        v954 = 0;
                                        while (while_method_0(v954)){
                                            bool v956;
                                            v956 = 0 <= v954;
                                            bool v958;
                                            if (v956){
                                                bool v957;
                                                v957 = v954 < 2;
                                                v958 = v957;
                                            } else {
                                                v958 = false;
                                            }
                                            bool v959;
                                            v959 = v958 == false;
                                            if (v959){
                                                assert("Index must be in range." && v958);
                                            } else {
                                            }
                                            int v961;
                                            v961 = v164[v954];
                                            bool v963;
                                            v963 = v168 == v954;
                                            int v964;
                                            if (v963){
                                                v964 = v951;
                                            } else {
                                                v964 = v961;
                                            }
                                            v952[v954] = v964;
                                            v954 += 1 ;
                                        }
                                        int v965;
                                        v965 = v952[0];
                                        int v967; int v968;
                                        Tuple4 tmp124 = Tuple4{1, v965};
                                        v967 = tmp124.v0; v968 = tmp124.v1;
                                        while (while_method_0(v967)){
                                            bool v970;
                                            v970 = 0 <= v967;
                                            bool v972;
                                            if (v970){
                                                bool v971;
                                                v971 = v967 < 2;
                                                v972 = v971;
                                            } else {
                                                v972 = false;
                                            }
                                            bool v973;
                                            v973 = v972 == false;
                                            if (v973){
                                                assert("Index must be in range." && v972);
                                            } else {
                                            }
                                            int v975;
                                            v975 = v952[v967];
                                            int v977;
                                            v977 = v968 + v975;
                                            v968 = v977;
                                            v967 += 1 ;
                                        }
                                        static_array<int,2> v978;
                                        int v980;
                                        v980 = 0;
                                        while (while_method_0(v980)){
                                            bool v982;
                                            v982 = 0 <= v980;
                                            bool v984;
                                            if (v982){
                                                bool v983;
                                                v983 = v980 < 2;
                                                v984 = v983;
                                            } else {
                                                v984 = false;
                                            }
                                            bool v985;
                                            v985 = v984 == false;
                                            if (v985){
                                                assert("Index must be in range." && v984);
                                            } else {
                                            }
                                            int v987;
                                            v987 = v912[v980];
                                            bool v990;
                                            if (v982){
                                                bool v989;
                                                v989 = v980 < 2;
                                                v990 = v989;
                                            } else {
                                                v990 = false;
                                            }
                                            bool v991;
                                            v991 = v990 == false;
                                            if (v991){
                                                assert("Index must be in range." && v990);
                                            } else {
                                            }
                                            int v993;
                                            v993 = v952[v980];
                                            int v995;
                                            v995 = v987 - v993;
                                            v978[v980] = v995;
                                            v980 += 1 ;
                                        }
                                        int v996;
                                        v996 = v910 * v968;
                                        int v997;
                                        v997 = v996 / v911;
                                        bool v998;
                                        v998 = v162 >= v997;
                                        int v999;
                                        if (v998){
                                            v999 = v162;
                                        } else {
                                            v999 = v997;
                                        }
                                        bool v1001;
                                        if (v170){
                                            bool v1000;
                                            v1000 = v168 < 2;
                                            v1001 = v1000;
                                        } else {
                                            v1001 = false;
                                        }
                                        bool v1002;
                                        v1002 = v1001 == false;
                                        if (v1002){
                                            assert("Index must be in range." && v1001);
                                        } else {
                                        }
                                        int v1004;
                                        v1004 = v978[v168];
                                        bool v1006;
                                        v1006 = v999 >= v1004;
                                        if (v1006){
                                            v1172 = Union1{Union1_0{}};
                                        } else {
                                            v1172 = Union1{Union1_3{v999}};
                                        }
                                        break;
                                    }
                                    default: {
                                        assert("Invalid tag." && false); __trap();
                                    }
                                }
                                break;
                            }
                            case 2: { // Human
                                printf("%s\n", "Humans aren't allowed during training.");
                                __trap();
                                break;
                            }
                            case 3: { // Random
                                curandStatePhilox4_32_10_t & v1013 = v3.v5;
                                curandStatePhilox4_32_10_t & v1014 = v1013;
                                static_array<int,2> v1015;
                                int v1017;
                                v1017 = 0;
                                while (while_method_0(v1017)){
                                    bool v1019;
                                    v1019 = 0 <= v1017;
                                    bool v1021;
                                    if (v1019){
                                        bool v1020;
                                        v1020 = v1017 < 2;
                                        v1021 = v1020;
                                    } else {
                                        v1021 = false;
                                    }
                                    bool v1022;
                                    v1022 = v1021 == false;
                                    if (v1022){
                                        assert("Index must be in range." && v1021);
                                    } else {
                                    }
                                    int v1024;
                                    v1024 = v166[v1017];
                                    bool v1027;
                                    if (v1019){
                                        bool v1026;
                                        v1026 = v1017 < 2;
                                        v1027 = v1026;
                                    } else {
                                        v1027 = false;
                                    }
                                    bool v1028;
                                    v1028 = v1027 == false;
                                    if (v1028){
                                        assert("Index must be in range." && v1027);
                                    } else {
                                    }
                                    int v1030;
                                    v1030 = v164[v1017];
                                    int v1032;
                                    v1032 = v1024 + v1030;
                                    v1015[v1017] = v1032;
                                    v1017 += 1 ;
                                }
                                int v1033;
                                v1033 = v164[0];
                                int v1035; int v1036;
                                Tuple4 tmp125 = Tuple4{1, v1033};
                                v1035 = tmp125.v0; v1036 = tmp125.v1;
                                while (while_method_0(v1035)){
                                    bool v1038;
                                    v1038 = 0 <= v1035;
                                    bool v1040;
                                    if (v1038){
                                        bool v1039;
                                        v1039 = v1035 < 2;
                                        v1040 = v1039;
                                    } else {
                                        v1040 = false;
                                    }
                                    bool v1041;
                                    v1041 = v1040 == false;
                                    if (v1041){
                                        assert("Index must be in range." && v1040);
                                    } else {
                                    }
                                    int v1043;
                                    v1043 = v164[v1035];
                                    bool v1045;
                                    v1045 = v1036 >= v1043;
                                    int v1046;
                                    if (v1045){
                                        v1046 = v1036;
                                    } else {
                                        v1046 = v1043;
                                    }
                                    v1036 = v1046;
                                    v1035 += 1 ;
                                }
                                bool v1048;
                                if (v170){
                                    bool v1047;
                                    v1047 = v168 < 2;
                                    v1048 = v1047;
                                } else {
                                    v1048 = false;
                                }
                                bool v1049;
                                v1049 = v1048 == false;
                                if (v1049){
                                    assert("Index must be in range." && v1048);
                                } else {
                                }
                                int v1051;
                                v1051 = v1015[v168];
                                bool v1053;
                                v1053 = v1036 < v1051;
                                int v1054;
                                if (v1053){
                                    v1054 = v1036;
                                } else {
                                    v1054 = v1051;
                                }
                                static_array<int,2> v1055;
                                int v1057;
                                v1057 = 0;
                                while (while_method_0(v1057)){
                                    bool v1059;
                                    v1059 = 0 <= v1057;
                                    bool v1061;
                                    if (v1059){
                                        bool v1060;
                                        v1060 = v1057 < 2;
                                        v1061 = v1060;
                                    } else {
                                        v1061 = false;
                                    }
                                    bool v1062;
                                    v1062 = v1061 == false;
                                    if (v1062){
                                        assert("Index must be in range." && v1061);
                                    } else {
                                    }
                                    int v1064;
                                    v1064 = v164[v1057];
                                    bool v1066;
                                    v1066 = v168 == v1057;
                                    int v1067;
                                    if (v1066){
                                        v1067 = v1054;
                                    } else {
                                        v1067 = v1064;
                                    }
                                    v1055[v1057] = v1067;
                                    v1057 += 1 ;
                                }
                                int v1068;
                                v1068 = v1055[0];
                                int v1070; int v1071;
                                Tuple4 tmp126 = Tuple4{1, v1068};
                                v1070 = tmp126.v0; v1071 = tmp126.v1;
                                while (while_method_0(v1070)){
                                    bool v1073;
                                    v1073 = 0 <= v1070;
                                    bool v1075;
                                    if (v1073){
                                        bool v1074;
                                        v1074 = v1070 < 2;
                                        v1075 = v1074;
                                    } else {
                                        v1075 = false;
                                    }
                                    bool v1076;
                                    v1076 = v1075 == false;
                                    if (v1076){
                                        assert("Index must be in range." && v1075);
                                    } else {
                                    }
                                    int v1078;
                                    v1078 = v1055[v1070];
                                    int v1080;
                                    v1080 = v1071 + v1078;
                                    v1071 = v1080;
                                    v1070 += 1 ;
                                }
                                static_array<int,2> v1081;
                                int v1083;
                                v1083 = 0;
                                while (while_method_0(v1083)){
                                    bool v1085;
                                    v1085 = 0 <= v1083;
                                    bool v1087;
                                    if (v1085){
                                        bool v1086;
                                        v1086 = v1083 < 2;
                                        v1087 = v1086;
                                    } else {
                                        v1087 = false;
                                    }
                                    bool v1088;
                                    v1088 = v1087 == false;
                                    if (v1088){
                                        assert("Index must be in range." && v1087);
                                    } else {
                                    }
                                    int v1090;
                                    v1090 = v1015[v1083];
                                    bool v1093;
                                    if (v1085){
                                        bool v1092;
                                        v1092 = v1083 < 2;
                                        v1093 = v1092;
                                    } else {
                                        v1093 = false;
                                    }
                                    bool v1094;
                                    v1094 = v1093 == false;
                                    if (v1094){
                                        assert("Index must be in range." && v1093);
                                    } else {
                                    }
                                    int v1096;
                                    v1096 = v1055[v1083];
                                    int v1098;
                                    v1098 = v1090 - v1096;
                                    v1081[v1083] = v1098;
                                    v1083 += 1 ;
                                }
                                bool v1100;
                                if (v170){
                                    bool v1099;
                                    v1099 = v168 < 2;
                                    v1100 = v1099;
                                } else {
                                    v1100 = false;
                                }
                                bool v1101;
                                v1101 = v1100 == false;
                                if (v1101){
                                    assert("Index must be in range." && v1100);
                                } else {
                                }
                                int v1103;
                                v1103 = v164[v168];
                                bool v1105;
                                v1105 = v1103 < v1036;
                                float v1106;
                                if (v1105){
                                    v1106 = 1.0f;
                                } else {
                                    v1106 = 0.0f;
                                }
                                int v1107;
                                v1107 = v1071 / 3;
                                bool v1108;
                                v1108 = v162 <= v1107;
                                bool v1116;
                                if (v1108){
                                    bool v1110;
                                    if (v170){
                                        bool v1109;
                                        v1109 = v168 < 2;
                                        v1110 = v1109;
                                    } else {
                                        v1110 = false;
                                    }
                                    bool v1111;
                                    v1111 = v1110 == false;
                                    if (v1111){
                                        assert("Index must be in range." && v1110);
                                    } else {
                                    }
                                    int v1113;
                                    v1113 = v1081[v168];
                                    bool v1115;
                                    v1115 = v1107 < v1113;
                                    v1116 = v1115;
                                } else {
                                    v1116 = false;
                                }
                                float v1117;
                                if (v1116){
                                    v1117 = 1.0f;
                                } else {
                                    v1117 = 0.0f;
                                }
                                int v1118;
                                v1118 = v1071 / 2;
                                bool v1119;
                                v1119 = v162 <= v1118;
                                bool v1127;
                                if (v1119){
                                    bool v1121;
                                    if (v170){
                                        bool v1120;
                                        v1120 = v168 < 2;
                                        v1121 = v1120;
                                    } else {
                                        v1121 = false;
                                    }
                                    bool v1122;
                                    v1122 = v1121 == false;
                                    if (v1122){
                                        assert("Index must be in range." && v1121);
                                    } else {
                                    }
                                    int v1124;
                                    v1124 = v1081[v168];
                                    bool v1126;
                                    v1126 = v1118 < v1124;
                                    v1127 = v1126;
                                } else {
                                    v1127 = false;
                                }
                                float v1128;
                                if (v1127){
                                    v1128 = 1.0f;
                                } else {
                                    v1128 = 0.0f;
                                }
                                bool v1129;
                                v1129 = v162 <= v1071;
                                bool v1137;
                                if (v1129){
                                    bool v1131;
                                    if (v170){
                                        bool v1130;
                                        v1130 = v168 < 2;
                                        v1131 = v1130;
                                    } else {
                                        v1131 = false;
                                    }
                                    bool v1132;
                                    v1132 = v1131 == false;
                                    if (v1132){
                                        assert("Index must be in range." && v1131);
                                    } else {
                                    }
                                    int v1134;
                                    v1134 = v1081[v168];
                                    bool v1136;
                                    v1136 = v1071 < v1134;
                                    v1137 = v1136;
                                } else {
                                    v1137 = false;
                                }
                                float v1138;
                                if (v1137){
                                    v1138 = 1.0f;
                                } else {
                                    v1138 = 0.0f;
                                }
                                static_array<Tuple17,6> v1139;
                                Union1 v1141;
                                v1141 = Union1{Union1_2{}};
                                v1139[0] = Tuple17{v1141, v1106};
                                Union1 v1143;
                                v1143 = Union1{Union1_1{}};
                                v1139[1] = Tuple17{v1143, 4.0f};
                                Union1 v1145;
                                v1145 = Union1{Union1_3{v1107}};
                                v1139[2] = Tuple17{v1145, v1117};
                                Union1 v1147;
                                v1147 = Union1{Union1_3{v1118}};
                                v1139[3] = Tuple17{v1147, v1128};
                                Union1 v1149;
                                v1149 = Union1{Union1_3{v1071}};
                                v1139[4] = Tuple17{v1149, v1138};
                                Union1 v1151;
                                v1151 = Union1{Union1_0{}};
                                v1139[5] = Tuple17{v1151, 1.0f};
                                Union1 v1153;
                                v1153 = sample_discrete_47(v1139, v1014);
                                int v1154;
                                v1154 = sizeof(Union1);
                                unsigned long long v1155;
                                v1155 = (unsigned long long)v1154;
                                bool v1156;
                                v1156 = v1155 <= 98304ull;
                                bool v1157;
                                v1157 = v1156 == false;
                                if (v1157){
                                    assert("The dynamic shared memory is insufficient to allocate the tensor." && v1156);
                                } else {
                                }
                                extern __shared__ unsigned char v1159[];
                                bool v1160;
                                v1160 = v1155 <= v1155;
                                bool v1161;
                                v1161 = v1160 == false;
                                if (v1161){
                                    assert("The length of the partition has to be less than or equal to the length of the base array." && v1160);
                                } else {
                                }
                                Union1 * v1163;
                                v1163 = reinterpret_cast<Union1 *>(&v1159[0ull]);
                                int v1165;
                                v1165 = threadIdx.x;
                                bool v1166;
                                v1166 = v1165 == 0;
                                if (v1166){
                                    v1163[0] = v1153;
                                } else {
                                }
                                __syncthreads();
                                Union1 v1167;
                                v1167 = v1163[0];
                                __syncthreads();
                                v1172 = v1167;
                                break;
                            }
                            default: {
                                assert("Invalid tag." && false); __trap();
                            }
                        }
                        Union6 v1173;
                        v1173 = Union6{Union6_2{v168, v1172}};
                        v14.push(v1173);
                        v1324 = Union18{Union18_1{v162, v163, v164, v165, v166, v167, v1172}};
                        break;
                    }
                    case 5: { // G_Round'
                        int v1175 = v19.case5.v0; static_array<static_array<unsigned char,2>,2> v1176 = v19.case5.v1; static_array<int,2> v1177 = v19.case5.v2; int v1178 = v19.case5.v3; static_array<int,2> v1179 = v19.case5.v4; Union5 v1180 = v19.case5.v5; Union1 v1181 = v19.case5.v6;
                        int v1182;
                        v1182 = v1178 % 2;
                        Union6 v1183;
                        v1183 = Union6{Union6_2{v1182, v1181}};
                        v14.push(v1183);
                        v1324 = Union18{Union18_1{v1175, v1176, v1177, v1178, v1179, v1180, v1181}};
                        break;
                    }
                    case 6: { // G_Showdown
                        int v43 = v19.case6.v0; static_array<static_array<unsigned char,2>,2> v44 = v19.case6.v1; static_array<int,2> v45 = v19.case6.v2; int v46 = v19.case6.v3; static_array<int,2> v47 = v19.case6.v4; Union5 v48 = v19.case6.v5;
                        static_array<unsigned char,5> v51;
                        switch (v48.tag) {
                            case 2: { // River
                                static_array<unsigned char,5> v49 = v48.case2.v0;
                                v51 = v49;
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in showdown.");
                                __trap();
                            }
                        }
                        static_array<unsigned char,2> v52;
                        v52 = v44[0];
                        static_array<unsigned char,7> v54;
                        int v56;
                        v56 = 0;
                        while (while_method_0(v56)){
                            bool v58;
                            v58 = 0 <= v56;
                            bool v60;
                            if (v58){
                                bool v59;
                                v59 = v56 < 2;
                                v60 = v59;
                            } else {
                                v60 = false;
                            }
                            bool v61;
                            v61 = v60 == false;
                            if (v61){
                                assert("Index must be in range." && v60);
                            } else {
                            }
                            unsigned char v63;
                            v63 = v52[v56];
                            v54[v56] = v63;
                            v56 += 1 ;
                        }
                        int v65;
                        v65 = 0;
                        while (while_method_2(v65)){
                            bool v67;
                            v67 = 0 <= v65;
                            bool v69;
                            if (v67){
                                bool v68;
                                v68 = v65 < 5;
                                v69 = v68;
                            } else {
                                v69 = false;
                            }
                            bool v70;
                            v70 = v69 == false;
                            if (v70){
                                assert("Index must be in range." && v69);
                            } else {
                            }
                            unsigned char v72;
                            v72 = v51[v65];
                            int v74;
                            v74 = 2 + v65;
                            v54[v74] = v72;
                            v65 += 1 ;
                        }
                        static_array<unsigned char,5> v75; char v76;
                        Tuple0 tmp127 = score_51(v54);
                        v75 = tmp127.v0; v76 = tmp127.v1;
                        static_array<unsigned char,2> v77;
                        v77 = v44[1];
                        static_array<unsigned char,7> v79;
                        int v81;
                        v81 = 0;
                        while (while_method_0(v81)){
                            bool v83;
                            v83 = 0 <= v81;
                            bool v85;
                            if (v83){
                                bool v84;
                                v84 = v81 < 2;
                                v85 = v84;
                            } else {
                                v85 = false;
                            }
                            bool v86;
                            v86 = v85 == false;
                            if (v86){
                                assert("Index must be in range." && v85);
                            } else {
                            }
                            unsigned char v88;
                            v88 = v77[v81];
                            v79[v81] = v88;
                            v81 += 1 ;
                        }
                        int v90;
                        v90 = 0;
                        while (while_method_2(v90)){
                            bool v92;
                            v92 = 0 <= v90;
                            bool v94;
                            if (v92){
                                bool v93;
                                v93 = v90 < 5;
                                v94 = v93;
                            } else {
                                v94 = false;
                            }
                            bool v95;
                            v95 = v94 == false;
                            if (v95){
                                assert("Index must be in range." && v94);
                            } else {
                            }
                            unsigned char v97;
                            v97 = v51[v90];
                            int v99;
                            v99 = 2 + v90;
                            v79[v99] = v97;
                            v90 += 1 ;
                        }
                        static_array<unsigned char,5> v100; char v101;
                        Tuple0 tmp128 = score_51(v79);
                        v100 = tmp128.v0; v101 = tmp128.v1;
                        int v102;
                        v102 = v46 % 2;
                        bool v103;
                        v103 = 0 <= v102;
                        bool v105;
                        if (v103){
                            bool v104;
                            v104 = v102 < 2;
                            v105 = v104;
                        } else {
                            v105 = false;
                        }
                        bool v106;
                        v106 = v105 == false;
                        if (v106){
                            assert("Index must be in range." && v105);
                        } else {
                        }
                        int v108;
                        v108 = v45[v102];
                        bool v110;
                        v110 = v76 < v101;
                        Union11 v116;
                        if (v110){
                            v116 = Union11{Union11_2{}};
                        } else {
                            bool v112;
                            v112 = v76 > v101;
                            if (v112){
                                v116 = Union11{Union11_1{}};
                            } else {
                                v116 = Union11{Union11_0{}};
                            }
                        }
                        Union11 v144;
                        switch (v116.tag) {
                            case 0: { // Eq
                                Union11 v117;
                                v117 = Union11{Union11_0{}};
                                int v118;
                                v118 = 0;
                                while (while_method_2(v118)){
                                    bool v120;
                                    v120 = 0 <= v118;
                                    bool v122;
                                    if (v120){
                                        bool v121;
                                        v121 = v118 < 5;
                                        v122 = v121;
                                    } else {
                                        v122 = false;
                                    }
                                    bool v123;
                                    v123 = v122 == false;
                                    if (v123){
                                        assert("Index must be in range." && v122);
                                    } else {
                                    }
                                    unsigned char v125;
                                    v125 = v75[v118];
                                    bool v128;
                                    if (v120){
                                        bool v127;
                                        v127 = v118 < 5;
                                        v128 = v127;
                                    } else {
                                        v128 = false;
                                    }
                                    bool v129;
                                    v129 = v128 == false;
                                    if (v129){
                                        assert("Index must be in range." && v128);
                                    } else {
                                    }
                                    unsigned char v131;
                                    v131 = v100[v118];
                                    unsigned char v133;
                                    v133 = v125 / 4u;
                                    unsigned char v134;
                                    v134 = v131 / 4u;
                                    bool v135;
                                    v135 = v133 < v134;
                                    Union11 v141;
                                    if (v135){
                                        v141 = Union11{Union11_2{}};
                                    } else {
                                        bool v137;
                                        v137 = v133 > v134;
                                        if (v137){
                                            v141 = Union11{Union11_1{}};
                                        } else {
                                            v141 = Union11{Union11_0{}};
                                        }
                                    }
                                    bool v142;
                                    switch (v141.tag) {
                                        case 0: { // Eq
                                            v142 = true;
                                            break;
                                        }
                                        default: {
                                            v142 = false;
                                        }
                                    }
                                    bool v143;
                                    v143 = v142 == false;
                                    if (v143){
                                        v117 = v141;
                                        break;
                                    } else {
                                    }
                                    v118 += 1 ;
                                }
                                v144 = v117;
                                break;
                            }
                            default: {
                                v144 = v116;
                            }
                        }
                        int v149; int v150;
                        switch (v144.tag) {
                            case 0: { // Eq
                                v149 = 0; v150 = -1;
                                break;
                            }
                            case 1: { // Gt
                                v149 = v108; v150 = 0;
                                break;
                            }
                            case 2: { // Lt
                                v149 = v108; v150 = 1;
                                break;
                            }
                            default: {
                                assert("Invalid tag." && false); __trap();
                            }
                        }
                        int v151;
                        v151 = -v150;
                        bool v152;
                        v152 = v150 >= v151;
                        int v153;
                        if (v152){
                            v153 = v150;
                        } else {
                            v153 = v151;
                        }
                        float v154;
                        v154 = (float)v149;
                        static_array<float,2> & v155 = v3.v4;
                        v155[v153] = v154;
                        int v156;
                        v156 = v153 ^ 1;
                        float v157;
                        v157 = -v154;
                        v155[v156] = v157;
                        static_array<Tuple0,2> v158;
                        v158[0] = Tuple0{v75, v76};
                        v158[1] = Tuple0{v100, v101};
                        Union6 v160;
                        v160 = Union6{Union6_4{v149, v158, v150}};
                        v14.push(v160);
                        v1324 = Union18{Union18_0{}};
                        break;
                    }
                    case 7: { // G_Turn
                        int v1204 = v19.case7.v0; static_array<static_array<unsigned char,2>,2> v1205 = v19.case7.v1; static_array<int,2> v1206 = v19.case7.v2; int v1207 = v19.case7.v3; static_array<int,2> v1208 = v19.case7.v4; Union5 v1209 = v19.case7.v5;
                        curandStatePhilox4_32_10_t & v1210 = v3.v5;
                        curandStatePhilox4_32_10_t & v1211 = v1210;
                        static_array<unsigned char,1> v1212; unsigned long long v1213;
                        Tuple12 tmp129 = draw_cards_40(v1211, v15);
                        v1212 = tmp129.v0; v1213 = tmp129.v1;
                        v3.v0 = v1213;
                        static_array_list<unsigned char,5> v1214;
                        v1214 = get_community_cards_82(v1209, v1212);
                        Union6 v1215;
                        v1215 = Union6{Union6_0{v1214}};
                        v14.push(v1215);
                        Union5 v1240;
                        switch (v1209.tag) {
                            case 0: { // Flop
                                static_array<unsigned char,3> v1216 = v1209.case0.v0;
                                static_array<unsigned char,4> v1217;
                                int v1219;
                                v1219 = 0;
                                while (while_method_1(v1219)){
                                    bool v1221;
                                    v1221 = 0 <= v1219;
                                    bool v1223;
                                    if (v1221){
                                        bool v1222;
                                        v1222 = v1219 < 3;
                                        v1223 = v1222;
                                    } else {
                                        v1223 = false;
                                    }
                                    bool v1224;
                                    v1224 = v1223 == false;
                                    if (v1224){
                                        assert("Index must be in range." && v1223);
                                    } else {
                                    }
                                    unsigned char v1226;
                                    v1226 = v1216[v1219];
                                    v1217[v1219] = v1226;
                                    v1219 += 1 ;
                                }
                                int v1228;
                                v1228 = 0;
                                while (while_method_6(v1228)){
                                    bool v1230;
                                    v1230 = 0 <= v1228;
                                    bool v1232;
                                    if (v1230){
                                        bool v1231;
                                        v1231 = v1228 < 1;
                                        v1232 = v1231;
                                    } else {
                                        v1232 = false;
                                    }
                                    bool v1233;
                                    v1233 = v1232 == false;
                                    if (v1233){
                                        assert("Index must be in range." && v1232);
                                    } else {
                                    }
                                    unsigned char v1235;
                                    v1235 = v1212[v1228];
                                    int v1237;
                                    v1237 = 3 + v1228;
                                    v1217[v1237] = v1235;
                                    v1228 += 1 ;
                                }
                                v1240 = Union5{Union5_3{v1217}};
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in turn.");
                                __trap();
                            }
                        }
                        int v1241;
                        v1241 = 2;
                        int v1242;
                        v1242 = 0;
                        Union4 v1243;
                        v1243 = try_round_36(v1241, v1205, v1206, v1242, v1208, v1240);
                        v1324 = Union18{Union18_2{v1243}};
                        break;
                    }
                    default: {
                        assert("Invalid tag." && false); __trap();
                    }
                }
                switch (v1324.tag) {
                    case 0: { // T_none
                        v1673 = Union3{Union3_0{}};
                        break;
                    }
                    case 1: { // T_round
                        int v1328 = v1324.case1.v0; static_array<static_array<unsigned char,2>,2> v1329 = v1324.case1.v1; static_array<int,2> v1330 = v1324.case1.v2; int v1331 = v1324.case1.v3; static_array<int,2> v1332 = v1324.case1.v4; Union5 v1333 = v1324.case1.v5; Union1 v1334 = v1324.case1.v6;
                        int v1335;
                        v1335 = v1331 % 2;
                        Union4 v1666;
                        switch (v1334.tag) {
                            case 0: { // A_All_In
                                static_array<int,2> v1541;
                                int v1543;
                                v1543 = 0;
                                while (while_method_0(v1543)){
                                    bool v1545;
                                    v1545 = 0 <= v1543;
                                    bool v1547;
                                    if (v1545){
                                        bool v1546;
                                        v1546 = v1543 < 2;
                                        v1547 = v1546;
                                    } else {
                                        v1547 = false;
                                    }
                                    bool v1548;
                                    v1548 = v1547 == false;
                                    if (v1548){
                                        assert("Index must be in range." && v1547);
                                    } else {
                                    }
                                    int v1550;
                                    v1550 = v1332[v1543];
                                    bool v1553;
                                    if (v1545){
                                        bool v1552;
                                        v1552 = v1543 < 2;
                                        v1553 = v1552;
                                    } else {
                                        v1553 = false;
                                    }
                                    bool v1554;
                                    v1554 = v1553 == false;
                                    if (v1554){
                                        assert("Index must be in range." && v1553);
                                    } else {
                                    }
                                    int v1556;
                                    v1556 = v1330[v1543];
                                    int v1558;
                                    v1558 = v1550 + v1556;
                                    v1541[v1543] = v1558;
                                    v1543 += 1 ;
                                }
                                int v1559;
                                v1559 = v1330[0];
                                int v1561; int v1562;
                                Tuple4 tmp130 = Tuple4{1, v1559};
                                v1561 = tmp130.v0; v1562 = tmp130.v1;
                                while (while_method_0(v1561)){
                                    bool v1564;
                                    v1564 = 0 <= v1561;
                                    bool v1566;
                                    if (v1564){
                                        bool v1565;
                                        v1565 = v1561 < 2;
                                        v1566 = v1565;
                                    } else {
                                        v1566 = false;
                                    }
                                    bool v1567;
                                    v1567 = v1566 == false;
                                    if (v1567){
                                        assert("Index must be in range." && v1566);
                                    } else {
                                    }
                                    int v1569;
                                    v1569 = v1330[v1561];
                                    bool v1571;
                                    v1571 = v1562 >= v1569;
                                    int v1572;
                                    if (v1571){
                                        v1572 = v1562;
                                    } else {
                                        v1572 = v1569;
                                    }
                                    v1562 = v1572;
                                    v1561 += 1 ;
                                }
                                bool v1573;
                                v1573 = 0 <= v1335;
                                bool v1575;
                                if (v1573){
                                    bool v1574;
                                    v1574 = v1335 < 2;
                                    v1575 = v1574;
                                } else {
                                    v1575 = false;
                                }
                                bool v1576;
                                v1576 = v1575 == false;
                                if (v1576){
                                    assert("Index must be in range." && v1575);
                                } else {
                                }
                                int v1578;
                                v1578 = v1541[v1335];
                                bool v1580;
                                v1580 = v1562 < v1578;
                                int v1581;
                                if (v1580){
                                    v1581 = v1562;
                                } else {
                                    v1581 = v1578;
                                }
                                static_array<int,2> v1582;
                                int v1584;
                                v1584 = 0;
                                while (while_method_0(v1584)){
                                    bool v1586;
                                    v1586 = 0 <= v1584;
                                    bool v1588;
                                    if (v1586){
                                        bool v1587;
                                        v1587 = v1584 < 2;
                                        v1588 = v1587;
                                    } else {
                                        v1588 = false;
                                    }
                                    bool v1589;
                                    v1589 = v1588 == false;
                                    if (v1589){
                                        assert("Index must be in range." && v1588);
                                    } else {
                                    }
                                    int v1591;
                                    v1591 = v1330[v1584];
                                    bool v1593;
                                    v1593 = v1335 == v1584;
                                    int v1594;
                                    if (v1593){
                                        v1594 = v1581;
                                    } else {
                                        v1594 = v1591;
                                    }
                                    v1582[v1584] = v1594;
                                    v1584 += 1 ;
                                }
                                static_array<int,2> v1595;
                                int v1597;
                                v1597 = 0;
                                while (while_method_0(v1597)){
                                    bool v1599;
                                    v1599 = 0 <= v1597;
                                    bool v1601;
                                    if (v1599){
                                        bool v1600;
                                        v1600 = v1597 < 2;
                                        v1601 = v1600;
                                    } else {
                                        v1601 = false;
                                    }
                                    bool v1602;
                                    v1602 = v1601 == false;
                                    if (v1602){
                                        assert("Index must be in range." && v1601);
                                    } else {
                                    }
                                    int v1604;
                                    v1604 = v1541[v1597];
                                    bool v1607;
                                    if (v1599){
                                        bool v1606;
                                        v1606 = v1597 < 2;
                                        v1607 = v1606;
                                    } else {
                                        v1607 = false;
                                    }
                                    bool v1608;
                                    v1608 = v1607 == false;
                                    if (v1608){
                                        assert("Index must be in range." && v1607);
                                    } else {
                                    }
                                    int v1610;
                                    v1610 = v1582[v1597];
                                    int v1612;
                                    v1612 = v1604 - v1610;
                                    v1595[v1597] = v1612;
                                    v1597 += 1 ;
                                }
                                bool v1614;
                                if (v1573){
                                    bool v1613;
                                    v1613 = v1335 < 2;
                                    v1614 = v1613;
                                } else {
                                    v1614 = false;
                                }
                                bool v1615;
                                v1615 = v1614 == false;
                                if (v1615){
                                    assert("Index must be in range." && v1614);
                                } else {
                                }
                                int v1617;
                                v1617 = v1595[v1335];
                                int v1619;
                                v1619 = v1562 + v1617;
                                bool v1621;
                                if (v1573){
                                    bool v1620;
                                    v1620 = v1335 < 2;
                                    v1621 = v1620;
                                } else {
                                    v1621 = false;
                                }
                                bool v1622;
                                v1622 = v1621 == false;
                                if (v1622){
                                    assert("Index must be in range." && v1621);
                                } else {
                                }
                                int v1624;
                                v1624 = v1541[v1335];
                                bool v1626;
                                v1626 = v1619 < v1624;
                                int v1627;
                                if (v1626){
                                    v1627 = v1619;
                                } else {
                                    v1627 = v1624;
                                }
                                static_array<int,2> v1628;
                                int v1630;
                                v1630 = 0;
                                while (while_method_0(v1630)){
                                    bool v1632;
                                    v1632 = 0 <= v1630;
                                    bool v1634;
                                    if (v1632){
                                        bool v1633;
                                        v1633 = v1630 < 2;
                                        v1634 = v1633;
                                    } else {
                                        v1634 = false;
                                    }
                                    bool v1635;
                                    v1635 = v1634 == false;
                                    if (v1635){
                                        assert("Index must be in range." && v1634);
                                    } else {
                                    }
                                    int v1637;
                                    v1637 = v1330[v1630];
                                    bool v1639;
                                    v1639 = v1335 == v1630;
                                    int v1640;
                                    if (v1639){
                                        v1640 = v1627;
                                    } else {
                                        v1640 = v1637;
                                    }
                                    v1628[v1630] = v1640;
                                    v1630 += 1 ;
                                }
                                static_array<int,2> v1641;
                                int v1643;
                                v1643 = 0;
                                while (while_method_0(v1643)){
                                    bool v1645;
                                    v1645 = 0 <= v1643;
                                    bool v1647;
                                    if (v1645){
                                        bool v1646;
                                        v1646 = v1643 < 2;
                                        v1647 = v1646;
                                    } else {
                                        v1647 = false;
                                    }
                                    bool v1648;
                                    v1648 = v1647 == false;
                                    if (v1648){
                                        assert("Index must be in range." && v1647);
                                    } else {
                                    }
                                    int v1650;
                                    v1650 = v1541[v1643];
                                    bool v1653;
                                    if (v1645){
                                        bool v1652;
                                        v1652 = v1643 < 2;
                                        v1653 = v1652;
                                    } else {
                                        v1653 = false;
                                    }
                                    bool v1654;
                                    v1654 = v1653 == false;
                                    if (v1654){
                                        assert("Index must be in range." && v1653);
                                    } else {
                                    }
                                    int v1656;
                                    v1656 = v1628[v1643];
                                    int v1658;
                                    v1658 = v1650 - v1656;
                                    v1641[v1643] = v1658;
                                    v1643 += 1 ;
                                }
                                bool v1659;
                                v1659 = v1617 >= v1328;
                                int v1660;
                                if (v1659){
                                    v1660 = v1617;
                                } else {
                                    v1660 = v1328;
                                }
                                int v1661;
                                v1661 = v1331 + 1;
                                v1666 = try_round_36(v1660, v1329, v1628, v1661, v1641, v1333);
                                break;
                            }
                            case 1: { // A_Call
                                static_array<int,2> v1337;
                                int v1339;
                                v1339 = 0;
                                while (while_method_0(v1339)){
                                    bool v1341;
                                    v1341 = 0 <= v1339;
                                    bool v1343;
                                    if (v1341){
                                        bool v1342;
                                        v1342 = v1339 < 2;
                                        v1343 = v1342;
                                    } else {
                                        v1343 = false;
                                    }
                                    bool v1344;
                                    v1344 = v1343 == false;
                                    if (v1344){
                                        assert("Index must be in range." && v1343);
                                    } else {
                                    }
                                    int v1346;
                                    v1346 = v1332[v1339];
                                    bool v1349;
                                    if (v1341){
                                        bool v1348;
                                        v1348 = v1339 < 2;
                                        v1349 = v1348;
                                    } else {
                                        v1349 = false;
                                    }
                                    bool v1350;
                                    v1350 = v1349 == false;
                                    if (v1350){
                                        assert("Index must be in range." && v1349);
                                    } else {
                                    }
                                    int v1352;
                                    v1352 = v1330[v1339];
                                    int v1354;
                                    v1354 = v1346 + v1352;
                                    v1337[v1339] = v1354;
                                    v1339 += 1 ;
                                }
                                int v1355;
                                v1355 = v1330[0];
                                int v1357; int v1358;
                                Tuple4 tmp131 = Tuple4{1, v1355};
                                v1357 = tmp131.v0; v1358 = tmp131.v1;
                                while (while_method_0(v1357)){
                                    bool v1360;
                                    v1360 = 0 <= v1357;
                                    bool v1362;
                                    if (v1360){
                                        bool v1361;
                                        v1361 = v1357 < 2;
                                        v1362 = v1361;
                                    } else {
                                        v1362 = false;
                                    }
                                    bool v1363;
                                    v1363 = v1362 == false;
                                    if (v1363){
                                        assert("Index must be in range." && v1362);
                                    } else {
                                    }
                                    int v1365;
                                    v1365 = v1330[v1357];
                                    bool v1367;
                                    v1367 = v1358 >= v1365;
                                    int v1368;
                                    if (v1367){
                                        v1368 = v1358;
                                    } else {
                                        v1368 = v1365;
                                    }
                                    v1358 = v1368;
                                    v1357 += 1 ;
                                }
                                bool v1369;
                                v1369 = 0 <= v1335;
                                bool v1371;
                                if (v1369){
                                    bool v1370;
                                    v1370 = v1335 < 2;
                                    v1371 = v1370;
                                } else {
                                    v1371 = false;
                                }
                                bool v1372;
                                v1372 = v1371 == false;
                                if (v1372){
                                    assert("Index must be in range." && v1371);
                                } else {
                                }
                                int v1374;
                                v1374 = v1337[v1335];
                                bool v1376;
                                v1376 = v1358 < v1374;
                                int v1377;
                                if (v1376){
                                    v1377 = v1358;
                                } else {
                                    v1377 = v1374;
                                }
                                static_array<int,2> v1378;
                                int v1380;
                                v1380 = 0;
                                while (while_method_0(v1380)){
                                    bool v1382;
                                    v1382 = 0 <= v1380;
                                    bool v1384;
                                    if (v1382){
                                        bool v1383;
                                        v1383 = v1380 < 2;
                                        v1384 = v1383;
                                    } else {
                                        v1384 = false;
                                    }
                                    bool v1385;
                                    v1385 = v1384 == false;
                                    if (v1385){
                                        assert("Index must be in range." && v1384);
                                    } else {
                                    }
                                    int v1387;
                                    v1387 = v1330[v1380];
                                    bool v1389;
                                    v1389 = v1335 == v1380;
                                    int v1390;
                                    if (v1389){
                                        v1390 = v1377;
                                    } else {
                                        v1390 = v1387;
                                    }
                                    v1378[v1380] = v1390;
                                    v1380 += 1 ;
                                }
                                static_array<int,2> v1391;
                                int v1393;
                                v1393 = 0;
                                while (while_method_0(v1393)){
                                    bool v1395;
                                    v1395 = 0 <= v1393;
                                    bool v1397;
                                    if (v1395){
                                        bool v1396;
                                        v1396 = v1393 < 2;
                                        v1397 = v1396;
                                    } else {
                                        v1397 = false;
                                    }
                                    bool v1398;
                                    v1398 = v1397 == false;
                                    if (v1398){
                                        assert("Index must be in range." && v1397);
                                    } else {
                                    }
                                    int v1400;
                                    v1400 = v1337[v1393];
                                    bool v1403;
                                    if (v1395){
                                        bool v1402;
                                        v1402 = v1393 < 2;
                                        v1403 = v1402;
                                    } else {
                                        v1403 = false;
                                    }
                                    bool v1404;
                                    v1404 = v1403 == false;
                                    if (v1404){
                                        assert("Index must be in range." && v1403);
                                    } else {
                                    }
                                    int v1406;
                                    v1406 = v1378[v1393];
                                    int v1408;
                                    v1408 = v1400 - v1406;
                                    v1391[v1393] = v1408;
                                    v1393 += 1 ;
                                }
                                bool v1409;
                                v1409 = v1335 < 2;
                                if (v1409){
                                    int v1410;
                                    v1410 = v1331 + 1;
                                    v1666 = try_round_36(v1328, v1329, v1378, v1410, v1391, v1333);
                                } else {
                                    v1666 = go_next_street_38(v1328, v1329, v1378, v1331, v1391, v1333);
                                }
                                break;
                            }
                            case 2: { // A_Fold
                                v1666 = Union4{Union4_1{v1328, v1329, v1330, v1331, v1332, v1333}};
                                break;
                            }
                            case 3: { // A_Raise
                                int v1414 = v1334.case3.v0;
                                bool v1415;
                                v1415 = v1328 <= v1414;
                                bool v1416;
                                v1416 = v1415 == false;
                                if (v1416){
                                    assert("The raise amount must match the minimum." && v1415);
                                } else {
                                }
                                static_array<int,2> v1418;
                                int v1420;
                                v1420 = 0;
                                while (while_method_0(v1420)){
                                    bool v1422;
                                    v1422 = 0 <= v1420;
                                    bool v1424;
                                    if (v1422){
                                        bool v1423;
                                        v1423 = v1420 < 2;
                                        v1424 = v1423;
                                    } else {
                                        v1424 = false;
                                    }
                                    bool v1425;
                                    v1425 = v1424 == false;
                                    if (v1425){
                                        assert("Index must be in range." && v1424);
                                    } else {
                                    }
                                    int v1427;
                                    v1427 = v1332[v1420];
                                    bool v1430;
                                    if (v1422){
                                        bool v1429;
                                        v1429 = v1420 < 2;
                                        v1430 = v1429;
                                    } else {
                                        v1430 = false;
                                    }
                                    bool v1431;
                                    v1431 = v1430 == false;
                                    if (v1431){
                                        assert("Index must be in range." && v1430);
                                    } else {
                                    }
                                    int v1433;
                                    v1433 = v1330[v1420];
                                    int v1435;
                                    v1435 = v1427 + v1433;
                                    v1418[v1420] = v1435;
                                    v1420 += 1 ;
                                }
                                int v1436;
                                v1436 = v1330[0];
                                int v1438; int v1439;
                                Tuple4 tmp132 = Tuple4{1, v1436};
                                v1438 = tmp132.v0; v1439 = tmp132.v1;
                                while (while_method_0(v1438)){
                                    bool v1441;
                                    v1441 = 0 <= v1438;
                                    bool v1443;
                                    if (v1441){
                                        bool v1442;
                                        v1442 = v1438 < 2;
                                        v1443 = v1442;
                                    } else {
                                        v1443 = false;
                                    }
                                    bool v1444;
                                    v1444 = v1443 == false;
                                    if (v1444){
                                        assert("Index must be in range." && v1443);
                                    } else {
                                    }
                                    int v1446;
                                    v1446 = v1330[v1438];
                                    bool v1448;
                                    v1448 = v1439 >= v1446;
                                    int v1449;
                                    if (v1448){
                                        v1449 = v1439;
                                    } else {
                                        v1449 = v1446;
                                    }
                                    v1439 = v1449;
                                    v1438 += 1 ;
                                }
                                bool v1450;
                                v1450 = 0 <= v1335;
                                bool v1452;
                                if (v1450){
                                    bool v1451;
                                    v1451 = v1335 < 2;
                                    v1452 = v1451;
                                } else {
                                    v1452 = false;
                                }
                                bool v1453;
                                v1453 = v1452 == false;
                                if (v1453){
                                    assert("Index must be in range." && v1452);
                                } else {
                                }
                                int v1455;
                                v1455 = v1418[v1335];
                                bool v1457;
                                v1457 = v1439 < v1455;
                                int v1458;
                                if (v1457){
                                    v1458 = v1439;
                                } else {
                                    v1458 = v1455;
                                }
                                static_array<int,2> v1459;
                                int v1461;
                                v1461 = 0;
                                while (while_method_0(v1461)){
                                    bool v1463;
                                    v1463 = 0 <= v1461;
                                    bool v1465;
                                    if (v1463){
                                        bool v1464;
                                        v1464 = v1461 < 2;
                                        v1465 = v1464;
                                    } else {
                                        v1465 = false;
                                    }
                                    bool v1466;
                                    v1466 = v1465 == false;
                                    if (v1466){
                                        assert("Index must be in range." && v1465);
                                    } else {
                                    }
                                    int v1468;
                                    v1468 = v1330[v1461];
                                    bool v1470;
                                    v1470 = v1335 == v1461;
                                    int v1471;
                                    if (v1470){
                                        v1471 = v1458;
                                    } else {
                                        v1471 = v1468;
                                    }
                                    v1459[v1461] = v1471;
                                    v1461 += 1 ;
                                }
                                static_array<int,2> v1472;
                                int v1474;
                                v1474 = 0;
                                while (while_method_0(v1474)){
                                    bool v1476;
                                    v1476 = 0 <= v1474;
                                    bool v1478;
                                    if (v1476){
                                        bool v1477;
                                        v1477 = v1474 < 2;
                                        v1478 = v1477;
                                    } else {
                                        v1478 = false;
                                    }
                                    bool v1479;
                                    v1479 = v1478 == false;
                                    if (v1479){
                                        assert("Index must be in range." && v1478);
                                    } else {
                                    }
                                    int v1481;
                                    v1481 = v1418[v1474];
                                    bool v1484;
                                    if (v1476){
                                        bool v1483;
                                        v1483 = v1474 < 2;
                                        v1484 = v1483;
                                    } else {
                                        v1484 = false;
                                    }
                                    bool v1485;
                                    v1485 = v1484 == false;
                                    if (v1485){
                                        assert("Index must be in range." && v1484);
                                    } else {
                                    }
                                    int v1487;
                                    v1487 = v1459[v1474];
                                    int v1489;
                                    v1489 = v1481 - v1487;
                                    v1472[v1474] = v1489;
                                    v1474 += 1 ;
                                }
                                bool v1491;
                                if (v1450){
                                    bool v1490;
                                    v1490 = v1335 < 2;
                                    v1491 = v1490;
                                } else {
                                    v1491 = false;
                                }
                                bool v1492;
                                v1492 = v1491 == false;
                                if (v1492){
                                    assert("Index must be in range." && v1491);
                                } else {
                                }
                                int v1494;
                                v1494 = v1472[v1335];
                                bool v1496;
                                v1496 = v1414 < v1494;
                                bool v1497;
                                v1497 = v1496 == false;
                                if (v1497){
                                    assert("The raise amount must be less than the stack size after calling." && v1496);
                                } else {
                                }
                                int v1499;
                                v1499 = v1439 + v1414;
                                bool v1501;
                                if (v1450){
                                    bool v1500;
                                    v1500 = v1335 < 2;
                                    v1501 = v1500;
                                } else {
                                    v1501 = false;
                                }
                                bool v1502;
                                v1502 = v1501 == false;
                                if (v1502){
                                    assert("Index must be in range." && v1501);
                                } else {
                                }
                                int v1504;
                                v1504 = v1418[v1335];
                                bool v1506;
                                v1506 = v1499 < v1504;
                                int v1507;
                                if (v1506){
                                    v1507 = v1499;
                                } else {
                                    v1507 = v1504;
                                }
                                static_array<int,2> v1508;
                                int v1510;
                                v1510 = 0;
                                while (while_method_0(v1510)){
                                    bool v1512;
                                    v1512 = 0 <= v1510;
                                    bool v1514;
                                    if (v1512){
                                        bool v1513;
                                        v1513 = v1510 < 2;
                                        v1514 = v1513;
                                    } else {
                                        v1514 = false;
                                    }
                                    bool v1515;
                                    v1515 = v1514 == false;
                                    if (v1515){
                                        assert("Index must be in range." && v1514);
                                    } else {
                                    }
                                    int v1517;
                                    v1517 = v1330[v1510];
                                    bool v1519;
                                    v1519 = v1335 == v1510;
                                    int v1520;
                                    if (v1519){
                                        v1520 = v1507;
                                    } else {
                                        v1520 = v1517;
                                    }
                                    v1508[v1510] = v1520;
                                    v1510 += 1 ;
                                }
                                static_array<int,2> v1521;
                                int v1523;
                                v1523 = 0;
                                while (while_method_0(v1523)){
                                    bool v1525;
                                    v1525 = 0 <= v1523;
                                    bool v1527;
                                    if (v1525){
                                        bool v1526;
                                        v1526 = v1523 < 2;
                                        v1527 = v1526;
                                    } else {
                                        v1527 = false;
                                    }
                                    bool v1528;
                                    v1528 = v1527 == false;
                                    if (v1528){
                                        assert("Index must be in range." && v1527);
                                    } else {
                                    }
                                    int v1530;
                                    v1530 = v1418[v1523];
                                    bool v1533;
                                    if (v1525){
                                        bool v1532;
                                        v1532 = v1523 < 2;
                                        v1533 = v1532;
                                    } else {
                                        v1533 = false;
                                    }
                                    bool v1534;
                                    v1534 = v1533 == false;
                                    if (v1534){
                                        assert("Index must be in range." && v1533);
                                    } else {
                                    }
                                    int v1536;
                                    v1536 = v1508[v1523];
                                    int v1538;
                                    v1538 = v1530 - v1536;
                                    v1521[v1523] = v1538;
                                    v1523 += 1 ;
                                }
                                int v1539;
                                v1539 = v1331 + 1;
                                v1666 = try_round_36(v1414, v1329, v1508, v1539, v1521, v1333);
                                break;
                            }
                            default: {
                                assert("Invalid tag." && false); __trap();
                            }
                        }
                        v1673 = Union3{Union3_1{v1666}};
                        break;
                    }
                    case 2: { // T_some
                        Union4 v1326 = v1324.case2.v0;
                        v1673 = Union3{Union3_1{v1326}};
                        break;
                    }
                    default: {
                        assert("Invalid tag." && false); __trap();
                    }
                }
                break;
            }
            default: {
                assert("Invalid tag." && false); __trap();
            }
        }
        v17 = v1673;
    }
    return ;
}
__device__ void method_84(unsigned char * v0, unsigned char * v1, unsigned char * v2, StackMut1 & v3, Union4 v4){
    v3.v0 = 4503599627370495ull;
    static_array<float,2> v5;
    v5[0] = 0.0f;
    v5[1] = 0.0f;
    v3.v4 = v5;
    static_array_list<Union6,128> & v7 = v3.v2;
    v7.unsafe_set_length(0);
    static_array<Union2,2> v8;
    Union2 v10;
    v10 = Union2{Union2_1{}};
    v8[0] = v10;
    Union2 v12;
    v12 = Union2{Union2_1{}};
    v8[1] = v12;
    v3.v3 = v8;
    static_array_list<Union6,128> & v14 = v3.v2;
    unsigned long long & v15 = v3.v0;
    Union3 v16;
    v16 = Union3{Union3_1{v4}};
    Union3 v17;
    v17 = v16;
    while (while_method_22(v17)){
        Union3 v1681;
        switch (v17.tag) {
            case 0: { // None
                v1681 = Union3{Union3_0{}};
                break;
            }
            case 1: { // Some
                Union4 v19 = v17.case1.v0;
                Union18 v1332;
                switch (v19.tag) {
                    case 0: { // G_Flop
                        int v1193 = v19.case0.v0; static_array<static_array<unsigned char,2>,2> v1194 = v19.case0.v1; static_array<int,2> v1195 = v19.case0.v2; int v1196 = v19.case0.v3; static_array<int,2> v1197 = v19.case0.v4; Union5 v1198 = v19.case0.v5;
                        curandStatePhilox4_32_10_t & v1199 = v3.v5;
                        curandStatePhilox4_32_10_t & v1200 = v1199;
                        static_array<unsigned char,3> v1201; unsigned long long v1202;
                        Tuple8 tmp135 = draw_cards_32(v1200, v15);
                        v1201 = tmp135.v0; v1202 = tmp135.v1;
                        v3.v0 = v1202;
                        static_array_list<unsigned char,5> v1203;
                        v1203 = get_community_cards_81(v1198, v1201);
                        Union6 v1204;
                        v1204 = Union6{Union6_0{v1203}};
                        v14.push(v1204);
                        Union5 v1207;
                        switch (v1198.tag) {
                            case 1: { // Preflop
                                v1207 = Union5{Union5_0{v1201}};
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in flop.");
                                __trap();
                            }
                        }
                        int v1208;
                        v1208 = 2;
                        int v1209;
                        v1209 = 0;
                        Union4 v1210;
                        v1210 = try_round_36(v1208, v1194, v1195, v1209, v1197, v1207);
                        v1332 = Union18{Union18_2{v1210}};
                        break;
                    }
                    case 1: { // G_Fold
                        int v20 = v19.case1.v0; static_array<static_array<unsigned char,2>,2> v21 = v19.case1.v1; static_array<int,2> v22 = v19.case1.v2; int v23 = v19.case1.v3; static_array<int,2> v24 = v19.case1.v4; Union5 v25 = v19.case1.v5;
                        int v26;
                        v26 = v23 % 2;
                        bool v27;
                        v27 = 0 <= v26;
                        bool v29;
                        if (v27){
                            bool v28;
                            v28 = v26 < 2;
                            v29 = v28;
                        } else {
                            v29 = false;
                        }
                        bool v30;
                        v30 = v29 == false;
                        if (v30){
                            assert("Index must be in range." && v29);
                        } else {
                        }
                        int v32;
                        v32 = v22[v26];
                        int v34;
                        v34 = -v32;
                        float v35;
                        v35 = (float)v34;
                        static_array<float,2> & v36 = v3.v4;
                        v36[v26] = v35;
                        int v37;
                        v37 = v26 ^ 1;
                        float v38;
                        v38 = -v35;
                        v36[v37] = v38;
                        int v39;
                        v39 = v23 + 1;
                        int v40;
                        v40 = v39 % 2;
                        Union6 v41;
                        v41 = Union6{Union6_1{v32, v40}};
                        v14.push(v41);
                        v1332 = Union18{Union18_0{}};
                        break;
                    }
                    case 2: { // G_Preflop
                        curandStatePhilox4_32_10_t & v1294 = v3.v5;
                        curandStatePhilox4_32_10_t & v1295 = v1294;
                        static_array<unsigned char,2> v1296; unsigned long long v1297;
                        Tuple11 tmp136 = draw_cards_39(v1295, v15);
                        v1296 = tmp136.v0; v1297 = tmp136.v1;
                        v3.v0 = v1297;
                        curandStatePhilox4_32_10_t & v1298 = v3.v5;
                        curandStatePhilox4_32_10_t & v1299 = v1298;
                        static_array<unsigned char,2> v1300; unsigned long long v1301;
                        Tuple11 tmp137 = draw_cards_39(v1299, v15);
                        v1300 = tmp137.v0; v1301 = tmp137.v1;
                        v3.v0 = v1301;
                        Union6 v1302;
                        v1302 = Union6{Union6_3{0, v1296}};
                        v14.push(v1302);
                        Union6 v1303;
                        v1303 = Union6{Union6_3{1, v1300}};
                        v14.push(v1303);
                        static_array<static_array<unsigned char,2>,2> v1304;
                        v1304[0] = v1296;
                        v1304[1] = v1300;
                        static_array<int,2> v1306;
                        v1306[0] = 2;
                        v1306[1] = 1;
                        static_array<int,2> v1308;
                        int v1310;
                        v1310 = 0;
                        while (while_method_0(v1310)){
                            bool v1312;
                            v1312 = 0 <= v1310;
                            bool v1314;
                            if (v1312){
                                bool v1313;
                                v1313 = v1310 < 2;
                                v1314 = v1313;
                            } else {
                                v1314 = false;
                            }
                            bool v1315;
                            v1315 = v1314 == false;
                            if (v1315){
                                assert("Index must be in range." && v1314);
                            } else {
                            }
                            int v1317;
                            v1317 = v1306[v1310];
                            int v1319;
                            v1319 = 100 - v1317;
                            v1308[v1310] = v1319;
                            v1310 += 1 ;
                        }
                        int v1320;
                        v1320 = 2;
                        int v1321;
                        v1321 = 0;
                        Union5 v1322;
                        v1322 = Union5{Union5_1{}};
                        Union4 v1323;
                        v1323 = try_round_36(v1320, v1304, v1306, v1321, v1308, v1322);
                        v1332 = Union18{Union18_2{v1323}};
                        break;
                    }
                    case 3: { // G_River
                        int v1253 = v19.case3.v0; static_array<static_array<unsigned char,2>,2> v1254 = v19.case3.v1; static_array<int,2> v1255 = v19.case3.v2; int v1256 = v19.case3.v3; static_array<int,2> v1257 = v19.case3.v4; Union5 v1258 = v19.case3.v5;
                        curandStatePhilox4_32_10_t & v1259 = v3.v5;
                        curandStatePhilox4_32_10_t & v1260 = v1259;
                        static_array<unsigned char,1> v1261; unsigned long long v1262;
                        Tuple12 tmp138 = draw_cards_40(v1260, v15);
                        v1261 = tmp138.v0; v1262 = tmp138.v1;
                        v3.v0 = v1262;
                        static_array_list<unsigned char,5> v1263;
                        v1263 = get_community_cards_82(v1258, v1261);
                        Union6 v1264;
                        v1264 = Union6{Union6_0{v1263}};
                        v14.push(v1264);
                        Union5 v1289;
                        switch (v1258.tag) {
                            case 3: { // Turn
                                static_array<unsigned char,4> v1265 = v1258.case3.v0;
                                static_array<unsigned char,5> v1266;
                                int v1268;
                                v1268 = 0;
                                while (while_method_3(v1268)){
                                    bool v1270;
                                    v1270 = 0 <= v1268;
                                    bool v1272;
                                    if (v1270){
                                        bool v1271;
                                        v1271 = v1268 < 4;
                                        v1272 = v1271;
                                    } else {
                                        v1272 = false;
                                    }
                                    bool v1273;
                                    v1273 = v1272 == false;
                                    if (v1273){
                                        assert("Index must be in range." && v1272);
                                    } else {
                                    }
                                    unsigned char v1275;
                                    v1275 = v1265[v1268];
                                    v1266[v1268] = v1275;
                                    v1268 += 1 ;
                                }
                                int v1277;
                                v1277 = 0;
                                while (while_method_6(v1277)){
                                    bool v1279;
                                    v1279 = 0 <= v1277;
                                    bool v1281;
                                    if (v1279){
                                        bool v1280;
                                        v1280 = v1277 < 1;
                                        v1281 = v1280;
                                    } else {
                                        v1281 = false;
                                    }
                                    bool v1282;
                                    v1282 = v1281 == false;
                                    if (v1282){
                                        assert("Index must be in range." && v1281);
                                    } else {
                                    }
                                    unsigned char v1284;
                                    v1284 = v1261[v1277];
                                    int v1286;
                                    v1286 = 4 + v1277;
                                    v1266[v1286] = v1284;
                                    v1277 += 1 ;
                                }
                                v1289 = Union5{Union5_2{v1266}};
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in river.");
                                __trap();
                            }
                        }
                        int v1290;
                        v1290 = 2;
                        int v1291;
                        v1291 = 0;
                        Union4 v1292;
                        v1292 = try_round_36(v1290, v1254, v1255, v1291, v1257, v1289);
                        v1332 = Union18{Union18_2{v1292}};
                        break;
                    }
                    case 4: { // G_Round
                        int v162 = v19.case4.v0; static_array<static_array<unsigned char,2>,2> v163 = v19.case4.v1; static_array<int,2> v164 = v19.case4.v2; int v165 = v19.case4.v3; static_array<int,2> v166 = v19.case4.v4; Union5 v167 = v19.case4.v5;
                        int v168;
                        v168 = v165 % 2;
                        static_array<Union2,2> & v169 = v3.v3;
                        bool v170;
                        v170 = 0 <= v168;
                        bool v172;
                        if (v170){
                            bool v171;
                            v171 = v168 < 2;
                            v172 = v171;
                        } else {
                            v172 = false;
                        }
                        bool v173;
                        v173 = v172 == false;
                        if (v173){
                            assert("Index must be in range." && v172);
                        } else {
                        }
                        Union2 v175;
                        v175 = v169[v168];
                        Union1 v1180;
                        switch (v175.tag) {
                            case 0: { // CallingMachine
                                v1180 = Union1{Union1_1{}};
                                break;
                            }
                            case 1: { // Computer
                                static_array_list<Union6,128> & v178 = v3.v2;
                                curandStatePhilox4_32_10_t & v179 = v3.v5;
                                curandStatePhilox4_32_10_t & v180 = v179;
                                float * v181;
                                v181 = reinterpret_cast<float *>(&v1[51904512ull]);
                                float * v183;
                                v183 = reinterpret_cast<float *>(&v1[0ull]);
                                float * v185;
                                v185 = reinterpret_cast<float *>(&v1[0ull]);
                                int v187;
                                v187 = blockIdx.x;
                                assert("Tensor range check" && 0 <= v187 && v187 < 24);
                                int v188;
                                v188 = 524288 * v187;
                                int v189;
                                v189 = threadIdx.x;
                                int v190;
                                v190 = v189;
                                while (while_method_7(v190)){
                                    bool v192;
                                    v192 = 0 <= v190;
                                    bool v193;
                                    v193 = v192 == false;
                                    if (v193){
                                        assert("The index needs to be zero or positive." && v192);
                                    } else {
                                    }
                                    int v195;
                                    v195 = v190 % 2048;
                                    int v196;
                                    v196 = v190 / 2048;
                                    bool v197;
                                    v197 = v196 < 256;
                                    bool v198;
                                    v198 = v197 == false;
                                    if (v198){
                                        assert("The last element of the projection dimensions needs to be greater than the index remainder." && v197);
                                    } else {
                                    }
                                    assert("Tensor range check" && 0 <= v196 && v196 < 256);
                                    assert("Tensor range check" && 0 <= v195 && v195 < 2048);
                                    int v200;
                                    v200 = v195 + v188;
                                    int v201;
                                    v201 = 2048 * v196;
                                    int v202;
                                    v202 = v201 + v200;
                                    v185[v202] = 0.0f;
                                    v190 += 256 ;
                                }
                                __syncthreads();
                                int v203;
                                v203 = threadIdx.x;
                                assert("Tensor range check" && 0 <= v203 && v203 < 256);
                                int v204;
                                v204 = 2048 * v203;
                                int v205;
                                v205 = v204 + v188;
                                int v206;
                                v206 = v178.length;
                                bool v207;
                                v207 = 128 >= v206;
                                bool v208;
                                v208 = v207 == false;
                                if (v208){
                                    assert("The type level dimension has to equal the value passed at runtime into create." && v207);
                                } else {
                                }
                                static_array_list<Union8,128> v210;
                                v210 = static_array_list<Union8,128>{};
                                v210.unsafe_set_length(v206);
                                int v212;
                                v212 = 0;
                                while (while_method_4(v206, v212)){
                                    Union6 v214;
                                    v214 = v178[v212];
                                    Union8 v220;
                                    switch (v214.tag) {
                                        case 2: { // PlayerAction
                                            int v216 = v214.case2.v0; Union1 v217 = v214.case2.v1;
                                            v220 = Union8{Union8_1{v217}};
                                            break;
                                        }
                                        default: {
                                            v220 = Union8{Union8_0{}};
                                        }
                                    }
                                    v210[v212] = v220;
                                    v212 += 1 ;
                                }
                                static_array<int,2> v221;
                                int v223;
                                v223 = 0;
                                while (while_method_0(v223)){
                                    int v225;
                                    v225 = v223 + v165;
                                    int v226;
                                    v226 = v225 % 2;
                                    bool v227;
                                    v227 = 0 <= v226;
                                    bool v229;
                                    if (v227){
                                        bool v228;
                                        v228 = v226 < 2;
                                        v229 = v228;
                                    } else {
                                        v229 = false;
                                    }
                                    bool v230;
                                    v230 = v229 == false;
                                    if (v230){
                                        assert("Index must be in range." && v229);
                                    } else {
                                    }
                                    int v232;
                                    v232 = v164[v226];
                                    v221[v223] = v232;
                                    v223 += 1 ;
                                }
                                static_array<int,2> v234;
                                int v236;
                                v236 = 0;
                                while (while_method_0(v236)){
                                    int v238;
                                    v238 = v236 + v165;
                                    int v239;
                                    v239 = v238 % 2;
                                    bool v240;
                                    v240 = 0 <= v239;
                                    bool v242;
                                    if (v240){
                                        bool v241;
                                        v241 = v239 < 2;
                                        v242 = v241;
                                    } else {
                                        v242 = false;
                                    }
                                    bool v243;
                                    v243 = v242 == false;
                                    if (v243){
                                        assert("Index must be in range." && v242);
                                    } else {
                                    }
                                    int v245;
                                    v245 = v166[v239];
                                    v234[v236] = v245;
                                    v236 += 1 ;
                                }
                                bool v248;
                                if (v170){
                                    bool v247;
                                    v247 = v168 < 2;
                                    v248 = v247;
                                } else {
                                    v248 = false;
                                }
                                bool v249;
                                v249 = v248 == false;
                                if (v249){
                                    assert("Index must be in range." && v248);
                                } else {
                                }
                                static_array<unsigned char,2> v251;
                                v251 = v163[v168];
                                static_array_list<unsigned char,5> v253;
                                v253 = static_array_list<unsigned char,5>{};
                                switch (v167.tag) {
                                    case 0: { // Flop
                                        static_array<unsigned char,3> v255 = v167.case0.v0;
                                        int v256;
                                        v256 = 0;
                                        while (while_method_1(v256)){
                                            bool v258;
                                            v258 = 0 <= v256;
                                            bool v260;
                                            if (v258){
                                                bool v259;
                                                v259 = v256 < 3;
                                                v260 = v259;
                                            } else {
                                                v260 = false;
                                            }
                                            bool v261;
                                            v261 = v260 == false;
                                            if (v261){
                                                assert("Index must be in range." && v260);
                                            } else {
                                            }
                                            unsigned char v263;
                                            v263 = v255[v256];
                                            v253.push(v263);
                                            v256 += 1 ;
                                        }
                                        break;
                                    }
                                    case 1: { // Preflop
                                        break;
                                    }
                                    case 2: { // River
                                        static_array<unsigned char,5> v275 = v167.case2.v0;
                                        int v276;
                                        v276 = 0;
                                        while (while_method_2(v276)){
                                            bool v278;
                                            v278 = 0 <= v276;
                                            bool v280;
                                            if (v278){
                                                bool v279;
                                                v279 = v276 < 5;
                                                v280 = v279;
                                            } else {
                                                v280 = false;
                                            }
                                            bool v281;
                                            v281 = v280 == false;
                                            if (v281){
                                                assert("Index must be in range." && v280);
                                            } else {
                                            }
                                            unsigned char v283;
                                            v283 = v275[v276];
                                            v253.push(v283);
                                            v276 += 1 ;
                                        }
                                        break;
                                    }
                                    case 3: { // Turn
                                        static_array<unsigned char,4> v265 = v167.case3.v0;
                                        int v266;
                                        v266 = 0;
                                        while (while_method_3(v266)){
                                            bool v268;
                                            v268 = 0 <= v266;
                                            bool v270;
                                            if (v268){
                                                bool v269;
                                                v269 = v266 < 4;
                                                v270 = v269;
                                            } else {
                                                v270 = false;
                                            }
                                            bool v271;
                                            v271 = v270 == false;
                                            if (v271){
                                                assert("Index must be in range." && v270);
                                            } else {
                                            }
                                            unsigned char v273;
                                            v273 = v265[v266];
                                            v253.push(v273);
                                            v266 += 1 ;
                                        }
                                        break;
                                    }
                                    default: {
                                        assert("Invalid tag." && false); __trap();
                                    }
                                }
                                float * v285;
                                v285 = v185+v205;
                                int v287;
                                v287 = v210.length;
                                bool v288;
                                v288 = v287 == 0;
                                if (v288){
                                    v285[0] = 1.0f;
                                } else {
                                }
                                int v289;
                                v289 = v210.length;
                                int v290;
                                v290 = 0;
                                while (while_method_4(v289, v290)){
                                    Union8 v292;
                                    v292 = v210[v290];
                                    int v294;
                                    v294 = v290 * 14;
                                    int v295;
                                    v295 = 1 + v294;
                                    switch (v292.tag) {
                                        case 0: { // None
                                            v285[v295] = 1.0f;
                                            break;
                                        }
                                        case 1: { // Some
                                            Union1 v296 = v292.case1.v0;
                                            int v297;
                                            v297 = v295 + 1;
                                            switch (v296.tag) {
                                                case 0: { // A_All_In
                                                    v285[v297] = 1.0f;
                                                    break;
                                                }
                                                case 1: { // A_Call
                                                    int v298;
                                                    v298 = v297 + 1;
                                                    v285[v298] = 1.0f;
                                                    break;
                                                }
                                                case 2: { // A_Fold
                                                    int v299;
                                                    v299 = v297 + 2;
                                                    v285[v299] = 1.0f;
                                                    break;
                                                }
                                                case 3: { // A_Raise
                                                    int v300 = v296.case3.v0;
                                                    int v301;
                                                    v301 = v297 + 3;
                                                    bool v302;
                                                    v302 = 1 <= v300;
                                                    bool v304;
                                                    if (v302){
                                                        bool v303;
                                                        v303 = v300 < 1023;
                                                        v304 = v303;
                                                    } else {
                                                        v304 = false;
                                                    }
                                                    bool v305;
                                                    v305 = v304 == false;
                                                    if (v305){
                                                        assert("Pickle failure. The input is out of the bounds of the given range." && v304);
                                                    } else {
                                                    }
                                                    int v307;
                                                    v307 = v300 - 1;
                                                    unsigned int v308;
                                                    v308 = (unsigned int)v307;
                                                    method_42(v308, v285, v301);
                                                    break;
                                                }
                                                default: {
                                                    assert("Invalid tag." && false); __trap();
                                                }
                                            }
                                            break;
                                        }
                                        default: {
                                            assert("Invalid tag." && false); __trap();
                                        }
                                    }
                                    v290 += 1 ;
                                }
                                int v309;
                                v309 = 0;
                                while (while_method_0(v309)){
                                    // 222;
                                    bool v311;
                                    v311 = 0 <= v309;
                                    bool v313;
                                    if (v311){
                                        bool v312;
                                        v312 = v309 < 2;
                                        v313 = v312;
                                    } else {
                                        v313 = false;
                                    }
                                    bool v314;
                                    v314 = v313 == false;
                                    if (v314){
                                        assert("Index must be in range." && v313);
                                    } else {
                                    }
                                    int v316;
                                    v316 = v221[v309];
                                    int v318;
                                    v318 = v309 * 11;
                                    int v319;
                                    v319 = 1794 + v318;
                                    bool v320;
                                    v320 = 0 <= v316;
                                    bool v322;
                                    if (v320){
                                        bool v321;
                                        v321 = v316 < 1023;
                                        v322 = v321;
                                    } else {
                                        v322 = false;
                                    }
                                    bool v323;
                                    v323 = v322 == false;
                                    if (v323){
                                        assert("Pickle failure. The input is out of the bounds of the given range." && v322);
                                    } else {
                                    }
                                    unsigned int v325;
                                    v325 = (unsigned int)v316;
                                    method_43(v325, v285, v319);
                                    v309 += 1 ;
                                }
                                int v326;
                                v326 = 0;
                                while (while_method_0(v326)){
                                    // 222;
                                    bool v328;
                                    v328 = 0 <= v326;
                                    bool v330;
                                    if (v328){
                                        bool v329;
                                        v329 = v326 < 2;
                                        v330 = v329;
                                    } else {
                                        v330 = false;
                                    }
                                    bool v331;
                                    v331 = v330 == false;
                                    if (v331){
                                        assert("Index must be in range." && v330);
                                    } else {
                                    }
                                    int v333;
                                    v333 = v234[v326];
                                    int v335;
                                    v335 = v326 * 11;
                                    int v336;
                                    v336 = 1817 + v335;
                                    bool v337;
                                    v337 = 0 <= v333;
                                    bool v339;
                                    if (v337){
                                        bool v338;
                                        v338 = v333 < 1023;
                                        v339 = v338;
                                    } else {
                                        v339 = false;
                                    }
                                    bool v340;
                                    v340 = v339 == false;
                                    if (v340){
                                        assert("Pickle failure. The input is out of the bounds of the given range." && v339);
                                    } else {
                                    }
                                    unsigned int v342;
                                    v342 = (unsigned int)v333;
                                    method_43(v342, v285, v336);
                                    v326 += 1 ;
                                }
                                int v343;
                                v343 = 0;
                                while (while_method_0(v343)){
                                    // 222;
                                    bool v345;
                                    v345 = 0 <= v343;
                                    bool v347;
                                    if (v345){
                                        bool v346;
                                        v346 = v343 < 2;
                                        v347 = v346;
                                    } else {
                                        v347 = false;
                                    }
                                    bool v348;
                                    v348 = v347 == false;
                                    if (v348){
                                        assert("Index must be in range." && v347);
                                    } else {
                                    }
                                    unsigned char v350;
                                    v350 = v251[v343];
                                    int v352;
                                    v352 = v343 * 17;
                                    int v353;
                                    v353 = 1840 + v352;
                                    unsigned char v354;
                                    v354 = v350 % 4u;
                                    int v355;
                                    v355 = (int)v354;
                                    unsigned char v356;
                                    v356 = v350 / 4u;
                                    int v357;
                                    v357 = (int)v356;
                                    unsigned int v358;
                                    v358 = (unsigned int)v355;
                                    int v359;
                                    v359 = (int)v358;
                                    bool v360;
                                    v360 = v359 < 4;
                                    bool v361;
                                    v361 = v360 == false;
                                    if (v361){
                                        assert("Pickle failure. Int value out of bounds." && v360);
                                    } else {
                                    }
                                    int v363;
                                    v363 = v353 + v359;
                                    v285[v363] = 1.0f;
                                    int v364;
                                    v364 = v353 + 4;
                                    unsigned int v365;
                                    v365 = (unsigned int)v357;
                                    int v366;
                                    v366 = (int)v365;
                                    bool v367;
                                    v367 = v366 < 13;
                                    bool v368;
                                    v368 = v367 == false;
                                    if (v368){
                                        assert("Pickle failure. Int value out of bounds." && v367);
                                    } else {
                                    }
                                    int v370;
                                    v370 = v364 + v366;
                                    v285[v370] = 1.0f;
                                    v343 += 1 ;
                                }
                                int v371;
                                v371 = v253.length;
                                bool v372;
                                v372 = v371 == 0;
                                if (v372){
                                    v285[1874] = 1.0f;
                                } else {
                                }
                                int v373;
                                v373 = v253.length;
                                int v374;
                                v374 = 0;
                                while (while_method_4(v373, v374)){
                                    unsigned char v376;
                                    v376 = v253[v374];
                                    int v378;
                                    v378 = v374 * 17;
                                    int v379;
                                    v379 = 1875 + v378;
                                    unsigned char v380;
                                    v380 = v376 % 4u;
                                    int v381;
                                    v381 = (int)v380;
                                    unsigned char v382;
                                    v382 = v376 / 4u;
                                    int v383;
                                    v383 = (int)v382;
                                    unsigned int v384;
                                    v384 = (unsigned int)v381;
                                    int v385;
                                    v385 = (int)v384;
                                    bool v386;
                                    v386 = v385 < 4;
                                    bool v387;
                                    v387 = v386 == false;
                                    if (v387){
                                        assert("Pickle failure. Int value out of bounds." && v386);
                                    } else {
                                    }
                                    int v389;
                                    v389 = v379 + v385;
                                    v285[v389] = 1.0f;
                                    int v390;
                                    v390 = v379 + 4;
                                    unsigned int v391;
                                    v391 = (unsigned int)v383;
                                    int v392;
                                    v392 = (int)v391;
                                    bool v393;
                                    v393 = v392 < 13;
                                    bool v394;
                                    v394 = v393 == false;
                                    if (v394){
                                        assert("Pickle failure. Int value out of bounds." && v393);
                                    } else {
                                    }
                                    int v396;
                                    v396 = v390 + v392;
                                    v285[v396] = 1.0f;
                                    v374 += 1 ;
                                }
                                __syncthreads();
                                int v397;
                                v397 = 0;
                                while (while_method_3(v397)){
                                    float * v399;
                                    v399 = reinterpret_cast<float *>(&v1[51904512ull]);
                                    assert("Tensor range check" && 0 <= v397 && v397 < 4);
                                    int v401;
                                    v401 = 393216 * v397;
                                    float * v402;
                                    v402 = reinterpret_cast<float *>(&v1[0ull]);
                                    float * v404;
                                    v404 = reinterpret_cast<float *>(&v0[0ull]);
                                    float * v406;
                                    v406 = reinterpret_cast<float *>(&v2[0ull]);
                                    assert("Tensor range check" && 0 <= v397 && v397 < 4);
                                    int v408;
                                    v408 = 131072 * v397;
                                    float * v409;
                                    v409 = reinterpret_cast<float *>(&v1[50331648ull]);
                                    block_matmul_45(v409, v404, v408, v402);
                                    block_row_map_46(v399, v401, v409);
                                    int * v411;
                                    v411 = reinterpret_cast<int *>(&v0[2097152ull]);
                                    bool * v413;
                                    v413 = reinterpret_cast<bool *>(&v0[2097168ull]);
                                    float * v415;
                                    v415 = reinterpret_cast<float *>(&v0[2097184ull]);
                                    float * v417;
                                    v417 = reinterpret_cast<float *>(&v0[2097200ull]);
                                    double * v419;
                                    v419 = reinterpret_cast<double *>(&v1[58195968ull]);
                                    double * v421;
                                    v421 = reinterpret_cast<double *>(&v1[58589184ull]);
                                    v397 += 1 ;
                                }
                                __syncthreads();
                                int * v423;
                                v423 = reinterpret_cast<int *>(&v0[2097152ull]);
                                bool * v425;
                                v425 = reinterpret_cast<bool *>(&v0[2097168ull]);
                                float * v427;
                                v427 = reinterpret_cast<float *>(&v0[2097184ull]);
                                float * v429;
                                v429 = reinterpret_cast<float *>(&v0[2097200ull]);
                                int v431;
                                v431 = 0;
                                int v432;
                                v432 = 4;
                                int v433;
                                v433 = int_range_44(v432, v431, v180);
                                extern __shared__ unsigned char v434[];
                                int * v435;
                                v435 = reinterpret_cast<int *>(&v434[0ull]);
                                int v437;
                                v437 = threadIdx.x;
                                bool v438;
                                v438 = v437 == 0;
                                if (v438){
                                    v435[0] = v433;
                                } else {
                                }
                                __syncthreads();
                                int v439;
                                v439 = v435[0];
                                __syncthreads();
                                float * v440;
                                v440 = reinterpret_cast<float *>(&v1[51904512ull]);
                                assert("Tensor range check" && 0 <= v439 && v439 < 4);
                                int v442;
                                v442 = 393216 * v439;
                                int v443;
                                v443 = blockIdx.x;
                                assert("Tensor range check" && 0 <= v443 && v443 < 24);
                                int v444;
                                v444 = 16384 * v443;
                                int v445;
                                v445 = v444 + v442;
                                int v446;
                                v446 = threadIdx.x;
                                assert("Tensor range check" && 0 <= v446 && v446 < 256);
                                int v447;
                                v447 = 64 * v446;
                                int v448;
                                v448 = v447 + v445;
                                float * v449;
                                v449 = v440+v448;
                                int v451;
                                v451 = sizeof(float *);
                                unsigned long long v452;
                                v452 = (unsigned long long)v451;
                                unsigned long long v453;
                                v453 = 256ull * v452;
                                unsigned long long v454;
                                v454 = v453 + 16ull;
                                unsigned long long v455;
                                v455 = v454 - 1ull;
                                unsigned long long v456;
                                v456 = v455 % 16ull;
                                unsigned long long v457;
                                v457 = v455 - v456;
                                unsigned long long v458;
                                v458 = v457 + 1024ull;
                                unsigned long long v459;
                                v459 = v458 + 16ull;
                                unsigned long long v460;
                                v460 = v459 - 1ull;
                                unsigned long long v461;
                                v461 = v460 % 16ull;
                                unsigned long long v462;
                                v462 = v460 - v461;
                                unsigned long long v463;
                                v463 = v462 + 1024ull;
                                bool v464;
                                v464 = v463 <= 98304ull;
                                bool v465;
                                v465 = v464 == false;
                                if (v465){
                                    assert("The dynamic shared memory is insufficient to allocate the tensor." && v464);
                                } else {
                                }
                                extern __shared__ unsigned char v467[];
                                bool v468;
                                v468 = v463 <= v463;
                                bool v469;
                                v469 = v468 == false;
                                if (v469){
                                    assert("The length of the partition has to be less than or equal to the length of the base array." && v468);
                                } else {
                                }
                                float * * v471;
                                v471 = reinterpret_cast<float * *>(&v467[0ull]);
                                float * v473;
                                v473 = reinterpret_cast<float *>(&v467[v457]);
                                int * v475;
                                v475 = reinterpret_cast<int *>(&v467[v462]);
                                int v477;
                                v477 = threadIdx.x;
                                assert("Tensor range check" && 0 <= v477 && v477 < 256);
                                v471[v477] = v449;
                                __syncthreads();
                                bool v478;
                                v478 = 0 <= v477;
                                bool v479;
                                v479 = v478 == false;
                                if (v479){
                                    assert("The index needs to be zero or positive." && v478);
                                } else {
                                }
                                int v481;
                                v481 = v477 % 16;
                                int v482;
                                v482 = v477 / 16;
                                bool v483;
                                v483 = v482 < 16;
                                bool v484;
                                v484 = v483 == false;
                                if (v484){
                                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v483);
                                } else {
                                }
                                assert("Tensor range check" && 0 <= v482 && v482 < 16);
                                int v486;
                                v486 = 0;
                                while (while_method_12(v486)){
                                    bool v488;
                                    v488 = 0 <= v482;
                                    bool v489;
                                    v489 = v488 && v483;
                                    bool v490;
                                    v490 = v489 == false;
                                    if (v490){
                                        assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v489);
                                    } else {
                                    }
                                    bool v492;
                                    v492 = 0 <= v486;
                                    bool v494;
                                    if (v492){
                                        bool v493;
                                        v493 = v486 < 16;
                                        v494 = v493;
                                    } else {
                                        v494 = false;
                                    }
                                    bool v495;
                                    v495 = v494 == false;
                                    if (v495){
                                        assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v494);
                                    } else {
                                    }
                                    int v497;
                                    v497 = v486 * 16;
                                    int v498;
                                    v498 = v497 + v482;
                                    assert("Tensor range check" && 0 <= v486 && v486 < 16);
                                    int v499;
                                    v499 = 16 * v486;
                                    int v500;
                                    v500 = v499 + v482;
                                    float * v501;
                                    v501 = v471[v500];
                                    int v502;
                                    v502 = blockIdx.x;
                                    int v503;
                                    v503 = v502 * 256;
                                    int v504;
                                    v504 = v503 + v498;
                                    assert("Tensor range check" && 0 <= v481 && v481 < 16);
                                    int v505;
                                    v505 = 4 * v481;
                                    float v506[4];
                                    int v507[4];
                                    int v508;
                                    v508 = 0;
                                    while (while_method_6(v508)){
                                        assert("Tensor range check" && 0 <= v508 && v508 < 1);
                                        int v510;
                                        v510 = 4 * v508;
                                        assert("Tensor range check" && 0 <= v508 && v508 < 1);
                                        int v511;
                                        v511 = 64 * v508;
                                        int v512;
                                        v512 = v511 + v505;
                                        int4* v513;
                                        v513 = reinterpret_cast<int4*>(v501 + v512);
                                        int4* v514;
                                        v514 = reinterpret_cast<int4*>(v506 + v510);
                                        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v513) % 16 == 0 && reinterpret_cast<unsigned long long>(v514) % 16 == 0);
                                        *v514 = *v513;
                                        v508 += 1 ;
                                    }
                                    int v515;
                                    v515 = 0;
                                    while (while_method_6(v515)){
                                        int v517;
                                        v517 = 0;
                                        while (while_method_3(v517)){
                                            bool v519;
                                            v519 = 0 <= v517;
                                            bool v521;
                                            if (v519){
                                                bool v520;
                                                v520 = v517 < 4;
                                                v521 = v520;
                                            } else {
                                                v521 = false;
                                            }
                                            bool v522;
                                            v522 = v521 == false;
                                            if (v522){
                                                assert("The indices should be inside the range of the dimension." && v521);
                                            } else {
                                            }
                                            bool v524;
                                            v524 = 0 <= v481;
                                            bool v526;
                                            if (v524){
                                                bool v525;
                                                v525 = v481 < 16;
                                                v526 = v525;
                                            } else {
                                                v526 = false;
                                            }
                                            bool v527;
                                            v527 = v526 == false;
                                            if (v527){
                                                assert("The indices should be inside the range of the dimension." && v526);
                                            } else {
                                            }
                                            int v529;
                                            v529 = v481 * 4;
                                            int v530;
                                            v530 = v517 + v529;
                                            bool v531;
                                            v531 = 0 <= v515;
                                            bool v533;
                                            if (v531){
                                                bool v532;
                                                v532 = v515 < 1;
                                                v533 = v532;
                                            } else {
                                                v533 = false;
                                            }
                                            bool v534;
                                            v534 = v533 == false;
                                            if (v534){
                                                assert("The indices should be inside the range of the dimension." && v533);
                                            } else {
                                            }
                                            int v536;
                                            v536 = v515 * 64;
                                            int v537;
                                            v537 = v530 + v536;
                                            assert("Tensor range check" && 0 <= v515 && v515 < 1);
                                            assert("Tensor range check" && 0 <= v517 && v517 < 4);
                                            int v538;
                                            v538 = 4 * v515;
                                            int v539;
                                            v539 = v538 + v517;
                                            v507[v539] = v537;
                                            v517 += 1 ;
                                        }
                                        v515 += 1 ;
                                    }
                                    float v540[4];
                                    float v541;
                                    v541 = 0.0f;
                                    int v542;
                                    v542 = 0;
                                    while (while_method_6(v542)){
                                        assert("Tensor range check" && 0 <= v542 && v542 < 1);
                                        int v544;
                                        v544 = 4 * v542;
                                        assert("Tensor range check" && 0 <= v542 && v542 < 1);
                                        float v545;
                                        v545 = 0.0f;
                                        int v546;
                                        v546 = 0;
                                        while (while_method_3(v546)){
                                            assert("Tensor range check" && 0 <= v546 && v546 < 4);
                                            int v548;
                                            v548 = v546 + v544;
                                            float v549;
                                            v549 = v506[v548];
                                            float v550;
                                            v550 = v545 + v549;
                                            v545 = v550;
                                            v546 += 1 ;
                                        }
                                        auto v551 = cooperative_groups::coalesced_threads();
                                        int v552;
                                        v552 = threadIdx.x;
                                        int v553;
                                        v553 = v552 / 16;
                                        auto v554 = cooperative_groups::labeled_partition(v551,v553);
                                        Closure2 v555{};
                                        float v556;
                                        v556 = cooperative_groups::inclusive_scan(v554, v545, v555);
                                        float v557;
                                        v557 = v554.shfl_up(v556,1);
                                        bool v558;
                                        v558 = v554.thread_rank() == 0;
                                        float v559;
                                        if (v558){
                                            v559 = 0.0f;
                                        } else {
                                            v559 = v557;
                                        }
                                        float v560;
                                        v560 = v554.shfl(v556,v554.num_threads()-1);
                                        float v561;
                                        v561 = v541 + v559;
                                        float v562;
                                        v562 = v561;
                                        int v563;
                                        v563 = 0;
                                        while (while_method_3(v563)){
                                            assert("Tensor range check" && 0 <= v563 && v563 < 4);
                                            int v565;
                                            v565 = v563 + v544;
                                            float v566;
                                            v566 = v506[v565];
                                            float v567;
                                            v567 = v562 + v566;
                                            assert("Tensor range check" && 0 <= v563 && v563 < 4);
                                            v540[v565] = v567;
                                            v562 = v567;
                                            v563 += 1 ;
                                        }
                                        float v568;
                                        v568 = v541 + v560;
                                        v541 = v568;
                                        v542 += 1 ;
                                    }
                                    float v569[4];
                                    bool v570[4];
                                    int v571;
                                    v571 = 0;
                                    while (while_method_6(v571)){
                                        int v573;
                                        v573 = 0;
                                        while (while_method_3(v573)){
                                            assert("Tensor range check" && 0 <= v571 && v571 < 1);
                                            assert("Tensor range check" && 0 <= v573 && v573 < 4);
                                            int v575;
                                            v575 = 4 * v571;
                                            int v576;
                                            v576 = v575 + v573;
                                            float v577;
                                            v577 = v540[v576];
                                            float v578;
                                            v578 = v506[v576];
                                            bool v579;
                                            v579 = v578 > 0.0f;
                                            assert("Tensor range check" && 0 <= v571 && v571 < 1);
                                            assert("Tensor range check" && 0 <= v573 && v573 < 4);
                                            v569[v576] = v577;
                                            v570[v576] = v579;
                                            v573 += 1 ;
                                        }
                                        v571 += 1 ;
                                    }
                                    float v580; bool v581;
                                    Tuple14 tmp139 = Tuple14{-1.0f / 0.0f, false};
                                    v580 = tmp139.v0; v581 = tmp139.v1;
                                    int v582;
                                    v582 = 0;
                                    while (while_method_6(v582)){
                                        int v584;
                                        v584 = 0;
                                        while (while_method_3(v584)){
                                            assert("Tensor range check" && 0 <= v582 && v582 < 1);
                                            assert("Tensor range check" && 0 <= v584 && v584 < 4);
                                            int v586;
                                            v586 = 4 * v582;
                                            int v587;
                                            v587 = v586 + v584;
                                            float v588;
                                            v588 = v569[v587];
                                            bool v589;
                                            v589 = v570[v587];
                                            float v596; bool v597;
                                            if (v581){
                                                if (v589){
                                                    bool v590;
                                                    v590 = v580 >= v588;
                                                    float v591;
                                                    if (v590){
                                                        v591 = v580;
                                                    } else {
                                                        v591 = v588;
                                                    }
                                                    v596 = v591; v597 = true;
                                                } else {
                                                    v596 = v580; v597 = v581;
                                                }
                                            } else {
                                                if (v589){
                                                    v596 = v588; v597 = v589;
                                                } else {
                                                    v596 = v580; v597 = v581;
                                                }
                                            }
                                            v580 = v596;
                                            v581 = v597;
                                            v584 += 1 ;
                                        }
                                        v582 += 1 ;
                                    }
                                    auto v598 = cooperative_groups::coalesced_threads();
                                    int v599;
                                    v599 = threadIdx.x;
                                    int v600;
                                    v600 = v599 / 16;
                                    auto v601 = cooperative_groups::labeled_partition(v598,v600);
                                    Closure3 v602{};
                                    float v603; bool v604;
                                    Tuple14 tmp140 = cooperative_groups::reduce(v601, Tuple14{v580, v581}, v602);
                                    v603 = tmp140.v0; v604 = tmp140.v1;
                                    bool v605;
                                    v605 = v604 == false;
                                    if (v605){
                                        int v606;
                                        v606 = threadIdx.x;
                                        int v607;
                                        v607 = blockIdx.x;
                                        int v608;
                                        v608 = v607 * 256;
                                        int v609;
                                        v609 = v606 + v608;
                                        cuda::counting_semaphore<cuda::thread_scope_system, 1> & v610 = console_lock;
                                        auto v611 = cooperative_groups::coalesced_threads();
                                        v610.acquire();
                                        int v612;
                                        v612 = 0;
                                        printf("{%s = %d; %s = %c","tid", v609, "x'", '[');
                                        int v613;
                                        v613 = 0;
                                        while (while_method_6(v613)){
                                            int v615;
                                            v615 = v612;
                                            bool v616;
                                            v616 = v615 >= 100;
                                            if (v616){
                                                printf("%s"," ...");
                                                break;
                                            } else {
                                            }
                                            bool v617;
                                            v617 = v613 == 0;
                                            bool v618;
                                            v618 = v617 != true;
                                            if (v618){
                                                printf("%s","; ");
                                            } else {
                                            }
                                            printf("%c",'[');
                                            int v619;
                                            v619 = 0;
                                            while (while_method_3(v619)){
                                                int v621;
                                                v621 = v612;
                                                bool v622;
                                                v622 = v621 >= 100;
                                                if (v622){
                                                    printf("%s"," ...");
                                                    break;
                                                } else {
                                                }
                                                bool v623;
                                                v623 = v619 == 0;
                                                bool v624;
                                                v624 = v623 != true;
                                                if (v624){
                                                    printf("%s","; ");
                                                } else {
                                                }
                                                int v625;
                                                v625 = v612 + 1;
                                                v612 = v625;
                                                int v626;
                                                v626 = v613 * 4;
                                                int v627;
                                                v627 = v626 + v619;
                                                float v628;
                                                v628 = v569[v627];
                                                bool v629;
                                                v629 = v570[v627];
                                                const char * v632;
                                                if (v629){
                                                    const char * v630;
                                                    v630 = "true";
                                                    v632 = v630;
                                                } else {
                                                    const char * v631;
                                                    v631 = "false";
                                                    v632 = v631;
                                                }
                                                printf("%f, %s",v628, v632);
                                                v619 += 1 ;
                                            }
                                            printf("%c",']');
                                            v613 += 1 ;
                                        }
                                        printf("%c",']');
                                        printf("}\n");
                                        v610.release();
                                        v611.sync() ;
                                    } else {
                                    }
                                    if (v605){
                                        assert("The local reduce must be true." && v604);
                                    } else {
                                    }
                                    float v668[4];
                                    int v669[4];
                                    int v670;
                                    v670 = 0;
                                    while (while_method_6(v670)){
                                        int v672;
                                        v672 = 0;
                                        while (while_method_3(v672)){
                                            assert("Tensor range check" && 0 <= v670 && v670 < 1);
                                            assert("Tensor range check" && 0 <= v672 && v672 < 4);
                                            int v674;
                                            v674 = 4 * v670;
                                            int v675;
                                            v675 = v674 + v672;
                                            int v676;
                                            v676 = v507[v675];
                                            float v677;
                                            v677 = curand_uniform(&v180);
                                            assert("Tensor range check" && 0 <= v670 && v670 < 1);
                                            assert("Tensor range check" && 0 <= v672 && v672 < 4);
                                            v668[v675] = v677;
                                            v669[v675] = v676;
                                            v672 += 1 ;
                                        }
                                        v670 += 1 ;
                                    }
                                    float v678; int v679;
                                    Tuple15 tmp141 = Tuple15{0.0f, 2147483647};
                                    v678 = tmp141.v0; v679 = tmp141.v1;
                                    int v680;
                                    v680 = 0;
                                    while (while_method_6(v680)){
                                        int v682;
                                        v682 = 0;
                                        while (while_method_3(v682)){
                                            assert("Tensor range check" && 0 <= v680 && v680 < 1);
                                            assert("Tensor range check" && 0 <= v682 && v682 < 4);
                                            int v684;
                                            v684 = 4 * v680;
                                            int v685;
                                            v685 = v684 + v682;
                                            float v686;
                                            v686 = v668[v685];
                                            int v687;
                                            v687 = v669[v685];
                                            bool v688;
                                            v688 = v679 < v687;
                                            float v689; int v690;
                                            if (v688){
                                                v689 = v678; v690 = v679;
                                            } else {
                                                v689 = v686; v690 = v687;
                                            }
                                            v678 = v689;
                                            v679 = v690;
                                            v682 += 1 ;
                                        }
                                        v680 += 1 ;
                                    }
                                    auto v691 = cooperative_groups::coalesced_threads();
                                    int v692;
                                    v692 = threadIdx.x;
                                    int v693;
                                    v693 = v692 / 16;
                                    auto v694 = cooperative_groups::labeled_partition(v691,v693);
                                    Closure4 v695{};
                                    float v696; int v697;
                                    Tuple15 tmp142 = cooperative_groups::reduce(v694, Tuple15{v678, v679}, v695);
                                    v696 = tmp142.v0; v697 = tmp142.v1;
                                    float v698;
                                    v698 = v603 * v696;
                                    int v699[4];
                                    bool v700[4];
                                    int v701;
                                    v701 = 0;
                                    while (while_method_6(v701)){
                                        int v703;
                                        v703 = 0;
                                        while (while_method_3(v703)){
                                            assert("Tensor range check" && 0 <= v701 && v701 < 1);
                                            assert("Tensor range check" && 0 <= v703 && v703 < 4);
                                            int v705;
                                            v705 = 4 * v701;
                                            int v706;
                                            v706 = v705 + v703;
                                            float v707;
                                            v707 = v569[v706];
                                            bool v708;
                                            v708 = v570[v706];
                                            int v709;
                                            v709 = v507[v706];
                                            int v712; bool v713;
                                            if (v708){
                                                float v710;
                                                v710 = v707 - v698;
                                                bool v711;
                                                v711 = v710 >= 0.0f;
                                                v712 = v709; v713 = v711;
                                            } else {
                                                v712 = 2147483647; v713 = false;
                                            }
                                            assert("Tensor range check" && 0 <= v701 && v701 < 1);
                                            assert("Tensor range check" && 0 <= v703 && v703 < 4);
                                            v699[v706] = v712;
                                            v700[v706] = v713;
                                            v703 += 1 ;
                                        }
                                        v701 += 1 ;
                                    }
                                    int v714; bool v715;
                                    Tuple16 tmp143 = Tuple16{2147483647, false};
                                    v714 = tmp143.v0; v715 = tmp143.v1;
                                    int v716;
                                    v716 = 0;
                                    while (while_method_6(v716)){
                                        int v718;
                                        v718 = 0;
                                        while (while_method_3(v718)){
                                            assert("Tensor range check" && 0 <= v716 && v716 < 1);
                                            assert("Tensor range check" && 0 <= v718 && v718 < 4);
                                            int v720;
                                            v720 = 4 * v716;
                                            int v721;
                                            v721 = v720 + v718;
                                            int v722;
                                            v722 = v699[v721];
                                            bool v723;
                                            v723 = v700[v721];
                                            int v730; bool v731;
                                            if (v715){
                                                if (v723){
                                                    bool v724;
                                                    v724 = v714 < v722;
                                                    int v725;
                                                    if (v724){
                                                        v725 = v714;
                                                    } else {
                                                        v725 = v722;
                                                    }
                                                    v730 = v725; v731 = true;
                                                } else {
                                                    v730 = v714; v731 = v715;
                                                }
                                            } else {
                                                if (v723){
                                                    v730 = v722; v731 = v723;
                                                } else {
                                                    v730 = v714; v731 = v715;
                                                }
                                            }
                                            v714 = v730;
                                            v715 = v731;
                                            v718 += 1 ;
                                        }
                                        v716 += 1 ;
                                    }
                                    auto v732 = cooperative_groups::coalesced_threads();
                                    int v733;
                                    v733 = threadIdx.x;
                                    int v734;
                                    v734 = v733 / 16;
                                    auto v735 = cooperative_groups::labeled_partition(v732,v734);
                                    Closure5 v736{};
                                    int v737; bool v738;
                                    Tuple16 tmp144 = cooperative_groups::reduce(v735, Tuple16{v714, v715}, v736);
                                    v737 = tmp144.v0; v738 = tmp144.v1;
                                    bool v739;
                                    v739 = v738 == false;
                                    if (v739){
                                        int v740;
                                        v740 = threadIdx.x;
                                        int v741;
                                        v741 = blockIdx.x;
                                        int v742;
                                        v742 = v741 * 256;
                                        int v743;
                                        v743 = v740 + v742;
                                        cuda::counting_semaphore<cuda::thread_scope_system, 1> & v744 = console_lock;
                                        auto v745 = cooperative_groups::coalesced_threads();
                                        v744.acquire();
                                        int v746;
                                        v746 = 0;
                                        printf("{%s = %d; %s = %c","tid", v743, "x'", '[');
                                        int v747;
                                        v747 = 0;
                                        while (while_method_6(v747)){
                                            int v749;
                                            v749 = v746;
                                            bool v750;
                                            v750 = v749 >= 100;
                                            if (v750){
                                                printf("%s"," ...");
                                                break;
                                            } else {
                                            }
                                            bool v751;
                                            v751 = v747 == 0;
                                            bool v752;
                                            v752 = v751 != true;
                                            if (v752){
                                                printf("%s","; ");
                                            } else {
                                            }
                                            printf("%c",'[');
                                            int v753;
                                            v753 = 0;
                                            while (while_method_3(v753)){
                                                int v755;
                                                v755 = v746;
                                                bool v756;
                                                v756 = v755 >= 100;
                                                if (v756){
                                                    printf("%s"," ...");
                                                    break;
                                                } else {
                                                }
                                                bool v757;
                                                v757 = v753 == 0;
                                                bool v758;
                                                v758 = v757 != true;
                                                if (v758){
                                                    printf("%s","; ");
                                                } else {
                                                }
                                                int v759;
                                                v759 = v746 + 1;
                                                v746 = v759;
                                                int v760;
                                                v760 = v747 * 4;
                                                int v761;
                                                v761 = v760 + v753;
                                                int v762;
                                                v762 = v699[v761];
                                                bool v763;
                                                v763 = v700[v761];
                                                const char * v766;
                                                if (v763){
                                                    const char * v764;
                                                    v764 = "true";
                                                    v766 = v764;
                                                } else {
                                                    const char * v765;
                                                    v765 = "false";
                                                    v766 = v765;
                                                }
                                                printf("%d, %s",v762, v766);
                                                v753 += 1 ;
                                            }
                                            printf("%c",']');
                                            v747 += 1 ;
                                        }
                                        printf("%c",']');
                                        printf("}\n");
                                        v744.release();
                                        v745.sync() ;
                                    } else {
                                    }
                                    if (v739){
                                        assert("The local reduce must be true." && v738);
                                    } else {
                                    }
                                    float v802; int v803;
                                    Tuple15 tmp145 = Tuple15{0.0f, 2147483647};
                                    v802 = tmp145.v0; v803 = tmp145.v1;
                                    int v804;
                                    v804 = 0;
                                    while (while_method_6(v804)){
                                        int v806;
                                        v806 = 0;
                                        while (while_method_3(v806)){
                                            assert("Tensor range check" && 0 <= v804 && v804 < 1);
                                            assert("Tensor range check" && 0 <= v806 && v806 < 4);
                                            int v808;
                                            v808 = 4 * v804;
                                            int v809;
                                            v809 = v808 + v806;
                                            float v810;
                                            v810 = v506[v809];
                                            int v811;
                                            v811 = v507[v809];
                                            bool v812;
                                            v812 = v803 == v737;
                                            float v816; int v817;
                                            if (v812){
                                                v816 = v802; v817 = v803;
                                            } else {
                                                bool v813;
                                                v813 = v811 == v737;
                                                if (v813){
                                                    v816 = v810; v817 = v811;
                                                } else {
                                                    v816 = v802; v817 = v803;
                                                }
                                            }
                                            v802 = v816;
                                            v803 = v817;
                                            v806 += 1 ;
                                        }
                                        v804 += 1 ;
                                    }
                                    auto v818 = cooperative_groups::coalesced_threads();
                                    int v819;
                                    v819 = threadIdx.x;
                                    int v820;
                                    v820 = v819 / 16;
                                    auto v821 = cooperative_groups::labeled_partition(v818,v820);
                                    Closure6 v822{v737};
                                    float v823; int v824;
                                    Tuple15 tmp146 = cooperative_groups::reduce(v821, Tuple15{v802, v803}, v822);
                                    v823 = tmp146.v0; v824 = tmp146.v1;
                                    bool v825;
                                    v825 = v824 == 2147483647;
                                    bool v826;
                                    v826 = v825 != true;
                                    bool v827;
                                    v827 = v826 == false;
                                    if (v827){
                                        assert("Expected a valid action id in get_prob." && v826);
                                    } else {
                                    }
                                    int v829;
                                    v829 = 0;
                                    while (while_method_6(v829)){
                                        assert("Tensor range check" && 0 <= v829 && v829 < 1);
                                        assert("Tensor range check" && 0 <= v829 && v829 < 1);
                                        v829 += 1 ;
                                    }
                                    assert("Tensor range check" && 0 <= v498 && v498 < 256);
                                    v473[v498] = v823;
                                    v475[v498] = v737;
                                    v486 += 1 ;
                                }
                                __syncthreads();
                                assert("Tensor range check" && 0 <= v477 && v477 < 256);
                                float v831;
                                v831 = v473[v477];
                                int v832;
                                v832 = v475[v477];
                                __syncthreads();
                                extern __shared__ unsigned char v833[];
                                float * v834;
                                v834 = reinterpret_cast<float *>(&v833[0ull]);
                                int * v836;
                                v836 = reinterpret_cast<int *>(&v833[16ull]);
                                int v838;
                                v838 = threadIdx.x;
                                bool v839;
                                v839 = v838 == 0;
                                if (v839){
                                    v834[0] = v831;
                                    v836[0] = v832;
                                } else {
                                }
                                __syncthreads();
                                float v840;
                                v840 = v834[0];
                                int v841;
                                v841 = v836[0];
                                __syncthreads();
                                double * v842;
                                v842 = reinterpret_cast<double *>(&v1[58195968ull]);
                                double * v844;
                                v844 = reinterpret_cast<double *>(&v1[58589184ull]);
                                int v846;
                                v846 = threadIdx.x;
                                int v847;
                                v847 = blockIdx.x;
                                int v848;
                                v848 = v847 * 256;
                                int v849;
                                v849 = v846 + v848;
                                int v850;
                                v850 = 0;
                                while (while_method_3(v850)){
                                    float * v852;
                                    v852 = reinterpret_cast<float *>(&v1[51904512ull]);
                                    int v854;
                                    v854 = blockIdx.x;
                                    int v855;
                                    v855 = threadIdx.x;
                                    assert("Tensor range check" && 0 <= v850 && v850 < 4);
                                    assert("Tensor range check" && 0 <= v854 && v854 < 24);
                                    assert("Tensor range check" && 0 <= v855 && v855 < 256);
                                    assert("Tensor range check" && 0 <= v841 && v841 < 64);
                                    int v856;
                                    v856 = 64 * v855;
                                    int v857;
                                    v857 = v856 + v841;
                                    int v858;
                                    v858 = 16384 * v854;
                                    int v859;
                                    v859 = v858 + v857;
                                    int v860;
                                    v860 = 393216 * v850;
                                    int v861;
                                    v861 = v860 + v859;
                                    float v862;
                                    v862 = v852[v861];
                                    double v863;
                                    v863 = (double)v840;
                                    double v864;
                                    v864 = log(v863);
                                    double v865;
                                    v865 = (double)v862;
                                    double v866;
                                    v866 = log(v865);
                                    assert("Tensor range check" && 0 <= v850 && v850 < 4);
                                    assert("Tensor range check" && 0 <= v849 && v849 < 6144);
                                    assert("Tensor range check" && 0 <= v168 && v168 < 2);
                                    int v867;
                                    v867 = 2 * v849;
                                    int v868;
                                    v868 = v867 + v168;
                                    int v869;
                                    v869 = 12288 * v850;
                                    int v870;
                                    v870 = v869 + v868;
                                    double v871;
                                    v871 = v842[v870];
                                    double v872;
                                    v872 = v844[v870];
                                    double v873;
                                    v873 = v866 + v871;
                                    double v874;
                                    v874 = v864 + v872;
                                    bool v875;
                                    v875 = isnan(v874);
                                    bool v876;
                                    v876 = v875 == false;
                                    bool v877;
                                    v877 = v876 == false;
                                    if (v877){
                                        assert("The sampling log probability shouldn't be nan." && v876);
                                    } else {
                                    }
                                    bool v879;
                                    v879 = isnan(v873);
                                    bool v880;
                                    v880 = v879 == false;
                                    bool v881;
                                    v881 = v880 == false;
                                    if (v881){
                                        assert("The policy log probability shouldn't be nan." && v880);
                                    } else {
                                    }
                                    assert("Tensor range check" && 0 <= v850 && v850 < 4);
                                    assert("Tensor range check" && 0 <= v849 && v849 < 6144);
                                    assert("Tensor range check" && 0 <= v168 && v168 < 2);
                                    v842[v870] = v873;
                                    v844[v870] = v874;
                                    v850 += 1 ;
                                }
                                bool v883;
                                v883 = 0 == v841;
                                Union10 v892;
                                if (v883){
                                    v892 = Union10{Union10_1{}};
                                } else {
                                    bool v885;
                                    v885 = 1 == v841;
                                    if (v885){
                                        v892 = Union10{Union10_0{}};
                                    } else {
                                        bool v887;
                                        v887 = 2 == v841;
                                        if (v887){
                                            v892 = Union10{Union10_2{1, 1}};
                                        } else {
                                            printf("%s\n", "Invalid output id in the NL Holdem model.");
                                            __trap();
                                        }
                                    }
                                }
                                switch (v892.tag) {
                                    case 0: { // AA_Call
                                        v1180 = Union1{Union1_1{}};
                                        break;
                                    }
                                    case 1: { // AA_Fold
                                        int v893;
                                        v893 = v164[0];
                                        int v895; int v896;
                                        Tuple4 tmp147 = Tuple4{1, v893};
                                        v895 = tmp147.v0; v896 = tmp147.v1;
                                        while (while_method_0(v895)){
                                            bool v898;
                                            v898 = 0 <= v895;
                                            bool v900;
                                            if (v898){
                                                bool v899;
                                                v899 = v895 < 2;
                                                v900 = v899;
                                            } else {
                                                v900 = false;
                                            }
                                            bool v901;
                                            v901 = v900 == false;
                                            if (v901){
                                                assert("Index must be in range." && v900);
                                            } else {
                                            }
                                            int v903;
                                            v903 = v164[v895];
                                            bool v905;
                                            v905 = v896 >= v903;
                                            int v906;
                                            if (v905){
                                                v906 = v896;
                                            } else {
                                                v906 = v903;
                                            }
                                            v896 = v906;
                                            v895 += 1 ;
                                        }
                                        bool v908;
                                        if (v170){
                                            bool v907;
                                            v907 = v168 < 2;
                                            v908 = v907;
                                        } else {
                                            v908 = false;
                                        }
                                        bool v909;
                                        v909 = v908 == false;
                                        if (v909){
                                            assert("Index must be in range." && v908);
                                        } else {
                                        }
                                        int v911;
                                        v911 = v164[v168];
                                        bool v913;
                                        v913 = v911 == v896;
                                        if (v913){
                                            v1180 = Union1{Union1_1{}};
                                        } else {
                                            v1180 = Union1{Union1_2{}};
                                        }
                                        break;
                                    }
                                    case 2: { // AA_Raise
                                        int v918 = v892.case2.v0; int v919 = v892.case2.v1;
                                        static_array<int,2> v920;
                                        int v922;
                                        v922 = 0;
                                        while (while_method_0(v922)){
                                            bool v924;
                                            v924 = 0 <= v922;
                                            bool v926;
                                            if (v924){
                                                bool v925;
                                                v925 = v922 < 2;
                                                v926 = v925;
                                            } else {
                                                v926 = false;
                                            }
                                            bool v927;
                                            v927 = v926 == false;
                                            if (v927){
                                                assert("Index must be in range." && v926);
                                            } else {
                                            }
                                            int v929;
                                            v929 = v166[v922];
                                            bool v932;
                                            if (v924){
                                                bool v931;
                                                v931 = v922 < 2;
                                                v932 = v931;
                                            } else {
                                                v932 = false;
                                            }
                                            bool v933;
                                            v933 = v932 == false;
                                            if (v933){
                                                assert("Index must be in range." && v932);
                                            } else {
                                            }
                                            int v935;
                                            v935 = v164[v922];
                                            int v937;
                                            v937 = v929 + v935;
                                            v920[v922] = v937;
                                            v922 += 1 ;
                                        }
                                        int v938;
                                        v938 = v164[0];
                                        int v940; int v941;
                                        Tuple4 tmp148 = Tuple4{1, v938};
                                        v940 = tmp148.v0; v941 = tmp148.v1;
                                        while (while_method_0(v940)){
                                            bool v943;
                                            v943 = 0 <= v940;
                                            bool v945;
                                            if (v943){
                                                bool v944;
                                                v944 = v940 < 2;
                                                v945 = v944;
                                            } else {
                                                v945 = false;
                                            }
                                            bool v946;
                                            v946 = v945 == false;
                                            if (v946){
                                                assert("Index must be in range." && v945);
                                            } else {
                                            }
                                            int v948;
                                            v948 = v164[v940];
                                            bool v950;
                                            v950 = v941 >= v948;
                                            int v951;
                                            if (v950){
                                                v951 = v941;
                                            } else {
                                                v951 = v948;
                                            }
                                            v941 = v951;
                                            v940 += 1 ;
                                        }
                                        bool v953;
                                        if (v170){
                                            bool v952;
                                            v952 = v168 < 2;
                                            v953 = v952;
                                        } else {
                                            v953 = false;
                                        }
                                        bool v954;
                                        v954 = v953 == false;
                                        if (v954){
                                            assert("Index must be in range." && v953);
                                        } else {
                                        }
                                        int v956;
                                        v956 = v920[v168];
                                        bool v958;
                                        v958 = v941 < v956;
                                        int v959;
                                        if (v958){
                                            v959 = v941;
                                        } else {
                                            v959 = v956;
                                        }
                                        static_array<int,2> v960;
                                        int v962;
                                        v962 = 0;
                                        while (while_method_0(v962)){
                                            bool v964;
                                            v964 = 0 <= v962;
                                            bool v966;
                                            if (v964){
                                                bool v965;
                                                v965 = v962 < 2;
                                                v966 = v965;
                                            } else {
                                                v966 = false;
                                            }
                                            bool v967;
                                            v967 = v966 == false;
                                            if (v967){
                                                assert("Index must be in range." && v966);
                                            } else {
                                            }
                                            int v969;
                                            v969 = v164[v962];
                                            bool v971;
                                            v971 = v168 == v962;
                                            int v972;
                                            if (v971){
                                                v972 = v959;
                                            } else {
                                                v972 = v969;
                                            }
                                            v960[v962] = v972;
                                            v962 += 1 ;
                                        }
                                        int v973;
                                        v973 = v960[0];
                                        int v975; int v976;
                                        Tuple4 tmp149 = Tuple4{1, v973};
                                        v975 = tmp149.v0; v976 = tmp149.v1;
                                        while (while_method_0(v975)){
                                            bool v978;
                                            v978 = 0 <= v975;
                                            bool v980;
                                            if (v978){
                                                bool v979;
                                                v979 = v975 < 2;
                                                v980 = v979;
                                            } else {
                                                v980 = false;
                                            }
                                            bool v981;
                                            v981 = v980 == false;
                                            if (v981){
                                                assert("Index must be in range." && v980);
                                            } else {
                                            }
                                            int v983;
                                            v983 = v960[v975];
                                            int v985;
                                            v985 = v976 + v983;
                                            v976 = v985;
                                            v975 += 1 ;
                                        }
                                        static_array<int,2> v986;
                                        int v988;
                                        v988 = 0;
                                        while (while_method_0(v988)){
                                            bool v990;
                                            v990 = 0 <= v988;
                                            bool v992;
                                            if (v990){
                                                bool v991;
                                                v991 = v988 < 2;
                                                v992 = v991;
                                            } else {
                                                v992 = false;
                                            }
                                            bool v993;
                                            v993 = v992 == false;
                                            if (v993){
                                                assert("Index must be in range." && v992);
                                            } else {
                                            }
                                            int v995;
                                            v995 = v920[v988];
                                            bool v998;
                                            if (v990){
                                                bool v997;
                                                v997 = v988 < 2;
                                                v998 = v997;
                                            } else {
                                                v998 = false;
                                            }
                                            bool v999;
                                            v999 = v998 == false;
                                            if (v999){
                                                assert("Index must be in range." && v998);
                                            } else {
                                            }
                                            int v1001;
                                            v1001 = v960[v988];
                                            int v1003;
                                            v1003 = v995 - v1001;
                                            v986[v988] = v1003;
                                            v988 += 1 ;
                                        }
                                        int v1004;
                                        v1004 = v918 * v976;
                                        int v1005;
                                        v1005 = v1004 / v919;
                                        bool v1006;
                                        v1006 = v162 >= v1005;
                                        int v1007;
                                        if (v1006){
                                            v1007 = v162;
                                        } else {
                                            v1007 = v1005;
                                        }
                                        bool v1009;
                                        if (v170){
                                            bool v1008;
                                            v1008 = v168 < 2;
                                            v1009 = v1008;
                                        } else {
                                            v1009 = false;
                                        }
                                        bool v1010;
                                        v1010 = v1009 == false;
                                        if (v1010){
                                            assert("Index must be in range." && v1009);
                                        } else {
                                        }
                                        int v1012;
                                        v1012 = v986[v168];
                                        bool v1014;
                                        v1014 = v1007 >= v1012;
                                        if (v1014){
                                            v1180 = Union1{Union1_0{}};
                                        } else {
                                            v1180 = Union1{Union1_3{v1007}};
                                        }
                                        break;
                                    }
                                    default: {
                                        assert("Invalid tag." && false); __trap();
                                    }
                                }
                                break;
                            }
                            case 2: { // Human
                                printf("%s\n", "Humans aren't allowed during training.");
                                __trap();
                                break;
                            }
                            case 3: { // Random
                                curandStatePhilox4_32_10_t & v1021 = v3.v5;
                                curandStatePhilox4_32_10_t & v1022 = v1021;
                                static_array<int,2> v1023;
                                int v1025;
                                v1025 = 0;
                                while (while_method_0(v1025)){
                                    bool v1027;
                                    v1027 = 0 <= v1025;
                                    bool v1029;
                                    if (v1027){
                                        bool v1028;
                                        v1028 = v1025 < 2;
                                        v1029 = v1028;
                                    } else {
                                        v1029 = false;
                                    }
                                    bool v1030;
                                    v1030 = v1029 == false;
                                    if (v1030){
                                        assert("Index must be in range." && v1029);
                                    } else {
                                    }
                                    int v1032;
                                    v1032 = v166[v1025];
                                    bool v1035;
                                    if (v1027){
                                        bool v1034;
                                        v1034 = v1025 < 2;
                                        v1035 = v1034;
                                    } else {
                                        v1035 = false;
                                    }
                                    bool v1036;
                                    v1036 = v1035 == false;
                                    if (v1036){
                                        assert("Index must be in range." && v1035);
                                    } else {
                                    }
                                    int v1038;
                                    v1038 = v164[v1025];
                                    int v1040;
                                    v1040 = v1032 + v1038;
                                    v1023[v1025] = v1040;
                                    v1025 += 1 ;
                                }
                                int v1041;
                                v1041 = v164[0];
                                int v1043; int v1044;
                                Tuple4 tmp150 = Tuple4{1, v1041};
                                v1043 = tmp150.v0; v1044 = tmp150.v1;
                                while (while_method_0(v1043)){
                                    bool v1046;
                                    v1046 = 0 <= v1043;
                                    bool v1048;
                                    if (v1046){
                                        bool v1047;
                                        v1047 = v1043 < 2;
                                        v1048 = v1047;
                                    } else {
                                        v1048 = false;
                                    }
                                    bool v1049;
                                    v1049 = v1048 == false;
                                    if (v1049){
                                        assert("Index must be in range." && v1048);
                                    } else {
                                    }
                                    int v1051;
                                    v1051 = v164[v1043];
                                    bool v1053;
                                    v1053 = v1044 >= v1051;
                                    int v1054;
                                    if (v1053){
                                        v1054 = v1044;
                                    } else {
                                        v1054 = v1051;
                                    }
                                    v1044 = v1054;
                                    v1043 += 1 ;
                                }
                                bool v1056;
                                if (v170){
                                    bool v1055;
                                    v1055 = v168 < 2;
                                    v1056 = v1055;
                                } else {
                                    v1056 = false;
                                }
                                bool v1057;
                                v1057 = v1056 == false;
                                if (v1057){
                                    assert("Index must be in range." && v1056);
                                } else {
                                }
                                int v1059;
                                v1059 = v1023[v168];
                                bool v1061;
                                v1061 = v1044 < v1059;
                                int v1062;
                                if (v1061){
                                    v1062 = v1044;
                                } else {
                                    v1062 = v1059;
                                }
                                static_array<int,2> v1063;
                                int v1065;
                                v1065 = 0;
                                while (while_method_0(v1065)){
                                    bool v1067;
                                    v1067 = 0 <= v1065;
                                    bool v1069;
                                    if (v1067){
                                        bool v1068;
                                        v1068 = v1065 < 2;
                                        v1069 = v1068;
                                    } else {
                                        v1069 = false;
                                    }
                                    bool v1070;
                                    v1070 = v1069 == false;
                                    if (v1070){
                                        assert("Index must be in range." && v1069);
                                    } else {
                                    }
                                    int v1072;
                                    v1072 = v164[v1065];
                                    bool v1074;
                                    v1074 = v168 == v1065;
                                    int v1075;
                                    if (v1074){
                                        v1075 = v1062;
                                    } else {
                                        v1075 = v1072;
                                    }
                                    v1063[v1065] = v1075;
                                    v1065 += 1 ;
                                }
                                int v1076;
                                v1076 = v1063[0];
                                int v1078; int v1079;
                                Tuple4 tmp151 = Tuple4{1, v1076};
                                v1078 = tmp151.v0; v1079 = tmp151.v1;
                                while (while_method_0(v1078)){
                                    bool v1081;
                                    v1081 = 0 <= v1078;
                                    bool v1083;
                                    if (v1081){
                                        bool v1082;
                                        v1082 = v1078 < 2;
                                        v1083 = v1082;
                                    } else {
                                        v1083 = false;
                                    }
                                    bool v1084;
                                    v1084 = v1083 == false;
                                    if (v1084){
                                        assert("Index must be in range." && v1083);
                                    } else {
                                    }
                                    int v1086;
                                    v1086 = v1063[v1078];
                                    int v1088;
                                    v1088 = v1079 + v1086;
                                    v1079 = v1088;
                                    v1078 += 1 ;
                                }
                                static_array<int,2> v1089;
                                int v1091;
                                v1091 = 0;
                                while (while_method_0(v1091)){
                                    bool v1093;
                                    v1093 = 0 <= v1091;
                                    bool v1095;
                                    if (v1093){
                                        bool v1094;
                                        v1094 = v1091 < 2;
                                        v1095 = v1094;
                                    } else {
                                        v1095 = false;
                                    }
                                    bool v1096;
                                    v1096 = v1095 == false;
                                    if (v1096){
                                        assert("Index must be in range." && v1095);
                                    } else {
                                    }
                                    int v1098;
                                    v1098 = v1023[v1091];
                                    bool v1101;
                                    if (v1093){
                                        bool v1100;
                                        v1100 = v1091 < 2;
                                        v1101 = v1100;
                                    } else {
                                        v1101 = false;
                                    }
                                    bool v1102;
                                    v1102 = v1101 == false;
                                    if (v1102){
                                        assert("Index must be in range." && v1101);
                                    } else {
                                    }
                                    int v1104;
                                    v1104 = v1063[v1091];
                                    int v1106;
                                    v1106 = v1098 - v1104;
                                    v1089[v1091] = v1106;
                                    v1091 += 1 ;
                                }
                                bool v1108;
                                if (v170){
                                    bool v1107;
                                    v1107 = v168 < 2;
                                    v1108 = v1107;
                                } else {
                                    v1108 = false;
                                }
                                bool v1109;
                                v1109 = v1108 == false;
                                if (v1109){
                                    assert("Index must be in range." && v1108);
                                } else {
                                }
                                int v1111;
                                v1111 = v164[v168];
                                bool v1113;
                                v1113 = v1111 < v1044;
                                float v1114;
                                if (v1113){
                                    v1114 = 1.0f;
                                } else {
                                    v1114 = 0.0f;
                                }
                                int v1115;
                                v1115 = v1079 / 3;
                                bool v1116;
                                v1116 = v162 <= v1115;
                                bool v1124;
                                if (v1116){
                                    bool v1118;
                                    if (v170){
                                        bool v1117;
                                        v1117 = v168 < 2;
                                        v1118 = v1117;
                                    } else {
                                        v1118 = false;
                                    }
                                    bool v1119;
                                    v1119 = v1118 == false;
                                    if (v1119){
                                        assert("Index must be in range." && v1118);
                                    } else {
                                    }
                                    int v1121;
                                    v1121 = v1089[v168];
                                    bool v1123;
                                    v1123 = v1115 < v1121;
                                    v1124 = v1123;
                                } else {
                                    v1124 = false;
                                }
                                float v1125;
                                if (v1124){
                                    v1125 = 1.0f;
                                } else {
                                    v1125 = 0.0f;
                                }
                                int v1126;
                                v1126 = v1079 / 2;
                                bool v1127;
                                v1127 = v162 <= v1126;
                                bool v1135;
                                if (v1127){
                                    bool v1129;
                                    if (v170){
                                        bool v1128;
                                        v1128 = v168 < 2;
                                        v1129 = v1128;
                                    } else {
                                        v1129 = false;
                                    }
                                    bool v1130;
                                    v1130 = v1129 == false;
                                    if (v1130){
                                        assert("Index must be in range." && v1129);
                                    } else {
                                    }
                                    int v1132;
                                    v1132 = v1089[v168];
                                    bool v1134;
                                    v1134 = v1126 < v1132;
                                    v1135 = v1134;
                                } else {
                                    v1135 = false;
                                }
                                float v1136;
                                if (v1135){
                                    v1136 = 1.0f;
                                } else {
                                    v1136 = 0.0f;
                                }
                                bool v1137;
                                v1137 = v162 <= v1079;
                                bool v1145;
                                if (v1137){
                                    bool v1139;
                                    if (v170){
                                        bool v1138;
                                        v1138 = v168 < 2;
                                        v1139 = v1138;
                                    } else {
                                        v1139 = false;
                                    }
                                    bool v1140;
                                    v1140 = v1139 == false;
                                    if (v1140){
                                        assert("Index must be in range." && v1139);
                                    } else {
                                    }
                                    int v1142;
                                    v1142 = v1089[v168];
                                    bool v1144;
                                    v1144 = v1079 < v1142;
                                    v1145 = v1144;
                                } else {
                                    v1145 = false;
                                }
                                float v1146;
                                if (v1145){
                                    v1146 = 1.0f;
                                } else {
                                    v1146 = 0.0f;
                                }
                                static_array<Tuple17,6> v1147;
                                Union1 v1149;
                                v1149 = Union1{Union1_2{}};
                                v1147[0] = Tuple17{v1149, v1114};
                                Union1 v1151;
                                v1151 = Union1{Union1_1{}};
                                v1147[1] = Tuple17{v1151, 4.0f};
                                Union1 v1153;
                                v1153 = Union1{Union1_3{v1115}};
                                v1147[2] = Tuple17{v1153, v1125};
                                Union1 v1155;
                                v1155 = Union1{Union1_3{v1126}};
                                v1147[3] = Tuple17{v1155, v1136};
                                Union1 v1157;
                                v1157 = Union1{Union1_3{v1079}};
                                v1147[4] = Tuple17{v1157, v1146};
                                Union1 v1159;
                                v1159 = Union1{Union1_0{}};
                                v1147[5] = Tuple17{v1159, 1.0f};
                                Union1 v1161;
                                v1161 = sample_discrete_47(v1147, v1022);
                                int v1162;
                                v1162 = sizeof(Union1);
                                unsigned long long v1163;
                                v1163 = (unsigned long long)v1162;
                                bool v1164;
                                v1164 = v1163 <= 98304ull;
                                bool v1165;
                                v1165 = v1164 == false;
                                if (v1165){
                                    assert("The dynamic shared memory is insufficient to allocate the tensor." && v1164);
                                } else {
                                }
                                extern __shared__ unsigned char v1167[];
                                bool v1168;
                                v1168 = v1163 <= v1163;
                                bool v1169;
                                v1169 = v1168 == false;
                                if (v1169){
                                    assert("The length of the partition has to be less than or equal to the length of the base array." && v1168);
                                } else {
                                }
                                Union1 * v1171;
                                v1171 = reinterpret_cast<Union1 *>(&v1167[0ull]);
                                int v1173;
                                v1173 = threadIdx.x;
                                bool v1174;
                                v1174 = v1173 == 0;
                                if (v1174){
                                    v1171[0] = v1161;
                                } else {
                                }
                                __syncthreads();
                                Union1 v1175;
                                v1175 = v1171[0];
                                __syncthreads();
                                v1180 = v1175;
                                break;
                            }
                            default: {
                                assert("Invalid tag." && false); __trap();
                            }
                        }
                        Union6 v1181;
                        v1181 = Union6{Union6_2{v168, v1180}};
                        v14.push(v1181);
                        v1332 = Union18{Union18_1{v162, v163, v164, v165, v166, v167, v1180}};
                        break;
                    }
                    case 5: { // G_Round'
                        int v1183 = v19.case5.v0; static_array<static_array<unsigned char,2>,2> v1184 = v19.case5.v1; static_array<int,2> v1185 = v19.case5.v2; int v1186 = v19.case5.v3; static_array<int,2> v1187 = v19.case5.v4; Union5 v1188 = v19.case5.v5; Union1 v1189 = v19.case5.v6;
                        int v1190;
                        v1190 = v1186 % 2;
                        Union6 v1191;
                        v1191 = Union6{Union6_2{v1190, v1189}};
                        v14.push(v1191);
                        v1332 = Union18{Union18_1{v1183, v1184, v1185, v1186, v1187, v1188, v1189}};
                        break;
                    }
                    case 6: { // G_Showdown
                        int v43 = v19.case6.v0; static_array<static_array<unsigned char,2>,2> v44 = v19.case6.v1; static_array<int,2> v45 = v19.case6.v2; int v46 = v19.case6.v3; static_array<int,2> v47 = v19.case6.v4; Union5 v48 = v19.case6.v5;
                        static_array<unsigned char,5> v51;
                        switch (v48.tag) {
                            case 2: { // River
                                static_array<unsigned char,5> v49 = v48.case2.v0;
                                v51 = v49;
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in showdown.");
                                __trap();
                            }
                        }
                        static_array<unsigned char,2> v52;
                        v52 = v44[0];
                        static_array<unsigned char,7> v54;
                        int v56;
                        v56 = 0;
                        while (while_method_0(v56)){
                            bool v58;
                            v58 = 0 <= v56;
                            bool v60;
                            if (v58){
                                bool v59;
                                v59 = v56 < 2;
                                v60 = v59;
                            } else {
                                v60 = false;
                            }
                            bool v61;
                            v61 = v60 == false;
                            if (v61){
                                assert("Index must be in range." && v60);
                            } else {
                            }
                            unsigned char v63;
                            v63 = v52[v56];
                            v54[v56] = v63;
                            v56 += 1 ;
                        }
                        int v65;
                        v65 = 0;
                        while (while_method_2(v65)){
                            bool v67;
                            v67 = 0 <= v65;
                            bool v69;
                            if (v67){
                                bool v68;
                                v68 = v65 < 5;
                                v69 = v68;
                            } else {
                                v69 = false;
                            }
                            bool v70;
                            v70 = v69 == false;
                            if (v70){
                                assert("Index must be in range." && v69);
                            } else {
                            }
                            unsigned char v72;
                            v72 = v51[v65];
                            int v74;
                            v74 = 2 + v65;
                            v54[v74] = v72;
                            v65 += 1 ;
                        }
                        static_array<unsigned char,5> v75; char v76;
                        Tuple0 tmp152 = score_51(v54);
                        v75 = tmp152.v0; v76 = tmp152.v1;
                        static_array<unsigned char,2> v77;
                        v77 = v44[1];
                        static_array<unsigned char,7> v79;
                        int v81;
                        v81 = 0;
                        while (while_method_0(v81)){
                            bool v83;
                            v83 = 0 <= v81;
                            bool v85;
                            if (v83){
                                bool v84;
                                v84 = v81 < 2;
                                v85 = v84;
                            } else {
                                v85 = false;
                            }
                            bool v86;
                            v86 = v85 == false;
                            if (v86){
                                assert("Index must be in range." && v85);
                            } else {
                            }
                            unsigned char v88;
                            v88 = v77[v81];
                            v79[v81] = v88;
                            v81 += 1 ;
                        }
                        int v90;
                        v90 = 0;
                        while (while_method_2(v90)){
                            bool v92;
                            v92 = 0 <= v90;
                            bool v94;
                            if (v92){
                                bool v93;
                                v93 = v90 < 5;
                                v94 = v93;
                            } else {
                                v94 = false;
                            }
                            bool v95;
                            v95 = v94 == false;
                            if (v95){
                                assert("Index must be in range." && v94);
                            } else {
                            }
                            unsigned char v97;
                            v97 = v51[v90];
                            int v99;
                            v99 = 2 + v90;
                            v79[v99] = v97;
                            v90 += 1 ;
                        }
                        static_array<unsigned char,5> v100; char v101;
                        Tuple0 tmp153 = score_51(v79);
                        v100 = tmp153.v0; v101 = tmp153.v1;
                        int v102;
                        v102 = v46 % 2;
                        bool v103;
                        v103 = 0 <= v102;
                        bool v105;
                        if (v103){
                            bool v104;
                            v104 = v102 < 2;
                            v105 = v104;
                        } else {
                            v105 = false;
                        }
                        bool v106;
                        v106 = v105 == false;
                        if (v106){
                            assert("Index must be in range." && v105);
                        } else {
                        }
                        int v108;
                        v108 = v45[v102];
                        bool v110;
                        v110 = v76 < v101;
                        Union11 v116;
                        if (v110){
                            v116 = Union11{Union11_2{}};
                        } else {
                            bool v112;
                            v112 = v76 > v101;
                            if (v112){
                                v116 = Union11{Union11_1{}};
                            } else {
                                v116 = Union11{Union11_0{}};
                            }
                        }
                        Union11 v144;
                        switch (v116.tag) {
                            case 0: { // Eq
                                Union11 v117;
                                v117 = Union11{Union11_0{}};
                                int v118;
                                v118 = 0;
                                while (while_method_2(v118)){
                                    bool v120;
                                    v120 = 0 <= v118;
                                    bool v122;
                                    if (v120){
                                        bool v121;
                                        v121 = v118 < 5;
                                        v122 = v121;
                                    } else {
                                        v122 = false;
                                    }
                                    bool v123;
                                    v123 = v122 == false;
                                    if (v123){
                                        assert("Index must be in range." && v122);
                                    } else {
                                    }
                                    unsigned char v125;
                                    v125 = v75[v118];
                                    bool v128;
                                    if (v120){
                                        bool v127;
                                        v127 = v118 < 5;
                                        v128 = v127;
                                    } else {
                                        v128 = false;
                                    }
                                    bool v129;
                                    v129 = v128 == false;
                                    if (v129){
                                        assert("Index must be in range." && v128);
                                    } else {
                                    }
                                    unsigned char v131;
                                    v131 = v100[v118];
                                    unsigned char v133;
                                    v133 = v125 / 4u;
                                    unsigned char v134;
                                    v134 = v131 / 4u;
                                    bool v135;
                                    v135 = v133 < v134;
                                    Union11 v141;
                                    if (v135){
                                        v141 = Union11{Union11_2{}};
                                    } else {
                                        bool v137;
                                        v137 = v133 > v134;
                                        if (v137){
                                            v141 = Union11{Union11_1{}};
                                        } else {
                                            v141 = Union11{Union11_0{}};
                                        }
                                    }
                                    bool v142;
                                    switch (v141.tag) {
                                        case 0: { // Eq
                                            v142 = true;
                                            break;
                                        }
                                        default: {
                                            v142 = false;
                                        }
                                    }
                                    bool v143;
                                    v143 = v142 == false;
                                    if (v143){
                                        v117 = v141;
                                        break;
                                    } else {
                                    }
                                    v118 += 1 ;
                                }
                                v144 = v117;
                                break;
                            }
                            default: {
                                v144 = v116;
                            }
                        }
                        int v149; int v150;
                        switch (v144.tag) {
                            case 0: { // Eq
                                v149 = 0; v150 = -1;
                                break;
                            }
                            case 1: { // Gt
                                v149 = v108; v150 = 0;
                                break;
                            }
                            case 2: { // Lt
                                v149 = v108; v150 = 1;
                                break;
                            }
                            default: {
                                assert("Invalid tag." && false); __trap();
                            }
                        }
                        int v151;
                        v151 = -v150;
                        bool v152;
                        v152 = v150 >= v151;
                        int v153;
                        if (v152){
                            v153 = v150;
                        } else {
                            v153 = v151;
                        }
                        float v154;
                        v154 = (float)v149;
                        static_array<float,2> & v155 = v3.v4;
                        v155[v153] = v154;
                        int v156;
                        v156 = v153 ^ 1;
                        float v157;
                        v157 = -v154;
                        v155[v156] = v157;
                        static_array<Tuple0,2> v158;
                        v158[0] = Tuple0{v75, v76};
                        v158[1] = Tuple0{v100, v101};
                        Union6 v160;
                        v160 = Union6{Union6_4{v149, v158, v150}};
                        v14.push(v160);
                        v1332 = Union18{Union18_0{}};
                        break;
                    }
                    case 7: { // G_Turn
                        int v1212 = v19.case7.v0; static_array<static_array<unsigned char,2>,2> v1213 = v19.case7.v1; static_array<int,2> v1214 = v19.case7.v2; int v1215 = v19.case7.v3; static_array<int,2> v1216 = v19.case7.v4; Union5 v1217 = v19.case7.v5;
                        curandStatePhilox4_32_10_t & v1218 = v3.v5;
                        curandStatePhilox4_32_10_t & v1219 = v1218;
                        static_array<unsigned char,1> v1220; unsigned long long v1221;
                        Tuple12 tmp154 = draw_cards_40(v1219, v15);
                        v1220 = tmp154.v0; v1221 = tmp154.v1;
                        v3.v0 = v1221;
                        static_array_list<unsigned char,5> v1222;
                        v1222 = get_community_cards_82(v1217, v1220);
                        Union6 v1223;
                        v1223 = Union6{Union6_0{v1222}};
                        v14.push(v1223);
                        Union5 v1248;
                        switch (v1217.tag) {
                            case 0: { // Flop
                                static_array<unsigned char,3> v1224 = v1217.case0.v0;
                                static_array<unsigned char,4> v1225;
                                int v1227;
                                v1227 = 0;
                                while (while_method_1(v1227)){
                                    bool v1229;
                                    v1229 = 0 <= v1227;
                                    bool v1231;
                                    if (v1229){
                                        bool v1230;
                                        v1230 = v1227 < 3;
                                        v1231 = v1230;
                                    } else {
                                        v1231 = false;
                                    }
                                    bool v1232;
                                    v1232 = v1231 == false;
                                    if (v1232){
                                        assert("Index must be in range." && v1231);
                                    } else {
                                    }
                                    unsigned char v1234;
                                    v1234 = v1224[v1227];
                                    v1225[v1227] = v1234;
                                    v1227 += 1 ;
                                }
                                int v1236;
                                v1236 = 0;
                                while (while_method_6(v1236)){
                                    bool v1238;
                                    v1238 = 0 <= v1236;
                                    bool v1240;
                                    if (v1238){
                                        bool v1239;
                                        v1239 = v1236 < 1;
                                        v1240 = v1239;
                                    } else {
                                        v1240 = false;
                                    }
                                    bool v1241;
                                    v1241 = v1240 == false;
                                    if (v1241){
                                        assert("Index must be in range." && v1240);
                                    } else {
                                    }
                                    unsigned char v1243;
                                    v1243 = v1220[v1236];
                                    int v1245;
                                    v1245 = 3 + v1236;
                                    v1225[v1245] = v1243;
                                    v1236 += 1 ;
                                }
                                v1248 = Union5{Union5_3{v1225}};
                                break;
                            }
                            default: {
                                printf("%s\n", "Invalid street in turn.");
                                __trap();
                            }
                        }
                        int v1249;
                        v1249 = 2;
                        int v1250;
                        v1250 = 0;
                        Union4 v1251;
                        v1251 = try_round_36(v1249, v1213, v1214, v1250, v1216, v1248);
                        v1332 = Union18{Union18_2{v1251}};
                        break;
                    }
                    default: {
                        assert("Invalid tag." && false); __trap();
                    }
                }
                switch (v1332.tag) {
                    case 0: { // T_none
                        v1681 = Union3{Union3_0{}};
                        break;
                    }
                    case 1: { // T_round
                        int v1336 = v1332.case1.v0; static_array<static_array<unsigned char,2>,2> v1337 = v1332.case1.v1; static_array<int,2> v1338 = v1332.case1.v2; int v1339 = v1332.case1.v3; static_array<int,2> v1340 = v1332.case1.v4; Union5 v1341 = v1332.case1.v5; Union1 v1342 = v1332.case1.v6;
                        int v1343;
                        v1343 = v1339 % 2;
                        Union4 v1674;
                        switch (v1342.tag) {
                            case 0: { // A_All_In
                                static_array<int,2> v1549;
                                int v1551;
                                v1551 = 0;
                                while (while_method_0(v1551)){
                                    bool v1553;
                                    v1553 = 0 <= v1551;
                                    bool v1555;
                                    if (v1553){
                                        bool v1554;
                                        v1554 = v1551 < 2;
                                        v1555 = v1554;
                                    } else {
                                        v1555 = false;
                                    }
                                    bool v1556;
                                    v1556 = v1555 == false;
                                    if (v1556){
                                        assert("Index must be in range." && v1555);
                                    } else {
                                    }
                                    int v1558;
                                    v1558 = v1340[v1551];
                                    bool v1561;
                                    if (v1553){
                                        bool v1560;
                                        v1560 = v1551 < 2;
                                        v1561 = v1560;
                                    } else {
                                        v1561 = false;
                                    }
                                    bool v1562;
                                    v1562 = v1561 == false;
                                    if (v1562){
                                        assert("Index must be in range." && v1561);
                                    } else {
                                    }
                                    int v1564;
                                    v1564 = v1338[v1551];
                                    int v1566;
                                    v1566 = v1558 + v1564;
                                    v1549[v1551] = v1566;
                                    v1551 += 1 ;
                                }
                                int v1567;
                                v1567 = v1338[0];
                                int v1569; int v1570;
                                Tuple4 tmp155 = Tuple4{1, v1567};
                                v1569 = tmp155.v0; v1570 = tmp155.v1;
                                while (while_method_0(v1569)){
                                    bool v1572;
                                    v1572 = 0 <= v1569;
                                    bool v1574;
                                    if (v1572){
                                        bool v1573;
                                        v1573 = v1569 < 2;
                                        v1574 = v1573;
                                    } else {
                                        v1574 = false;
                                    }
                                    bool v1575;
                                    v1575 = v1574 == false;
                                    if (v1575){
                                        assert("Index must be in range." && v1574);
                                    } else {
                                    }
                                    int v1577;
                                    v1577 = v1338[v1569];
                                    bool v1579;
                                    v1579 = v1570 >= v1577;
                                    int v1580;
                                    if (v1579){
                                        v1580 = v1570;
                                    } else {
                                        v1580 = v1577;
                                    }
                                    v1570 = v1580;
                                    v1569 += 1 ;
                                }
                                bool v1581;
                                v1581 = 0 <= v1343;
                                bool v1583;
                                if (v1581){
                                    bool v1582;
                                    v1582 = v1343 < 2;
                                    v1583 = v1582;
                                } else {
                                    v1583 = false;
                                }
                                bool v1584;
                                v1584 = v1583 == false;
                                if (v1584){
                                    assert("Index must be in range." && v1583);
                                } else {
                                }
                                int v1586;
                                v1586 = v1549[v1343];
                                bool v1588;
                                v1588 = v1570 < v1586;
                                int v1589;
                                if (v1588){
                                    v1589 = v1570;
                                } else {
                                    v1589 = v1586;
                                }
                                static_array<int,2> v1590;
                                int v1592;
                                v1592 = 0;
                                while (while_method_0(v1592)){
                                    bool v1594;
                                    v1594 = 0 <= v1592;
                                    bool v1596;
                                    if (v1594){
                                        bool v1595;
                                        v1595 = v1592 < 2;
                                        v1596 = v1595;
                                    } else {
                                        v1596 = false;
                                    }
                                    bool v1597;
                                    v1597 = v1596 == false;
                                    if (v1597){
                                        assert("Index must be in range." && v1596);
                                    } else {
                                    }
                                    int v1599;
                                    v1599 = v1338[v1592];
                                    bool v1601;
                                    v1601 = v1343 == v1592;
                                    int v1602;
                                    if (v1601){
                                        v1602 = v1589;
                                    } else {
                                        v1602 = v1599;
                                    }
                                    v1590[v1592] = v1602;
                                    v1592 += 1 ;
                                }
                                static_array<int,2> v1603;
                                int v1605;
                                v1605 = 0;
                                while (while_method_0(v1605)){
                                    bool v1607;
                                    v1607 = 0 <= v1605;
                                    bool v1609;
                                    if (v1607){
                                        bool v1608;
                                        v1608 = v1605 < 2;
                                        v1609 = v1608;
                                    } else {
                                        v1609 = false;
                                    }
                                    bool v1610;
                                    v1610 = v1609 == false;
                                    if (v1610){
                                        assert("Index must be in range." && v1609);
                                    } else {
                                    }
                                    int v1612;
                                    v1612 = v1549[v1605];
                                    bool v1615;
                                    if (v1607){
                                        bool v1614;
                                        v1614 = v1605 < 2;
                                        v1615 = v1614;
                                    } else {
                                        v1615 = false;
                                    }
                                    bool v1616;
                                    v1616 = v1615 == false;
                                    if (v1616){
                                        assert("Index must be in range." && v1615);
                                    } else {
                                    }
                                    int v1618;
                                    v1618 = v1590[v1605];
                                    int v1620;
                                    v1620 = v1612 - v1618;
                                    v1603[v1605] = v1620;
                                    v1605 += 1 ;
                                }
                                bool v1622;
                                if (v1581){
                                    bool v1621;
                                    v1621 = v1343 < 2;
                                    v1622 = v1621;
                                } else {
                                    v1622 = false;
                                }
                                bool v1623;
                                v1623 = v1622 == false;
                                if (v1623){
                                    assert("Index must be in range." && v1622);
                                } else {
                                }
                                int v1625;
                                v1625 = v1603[v1343];
                                int v1627;
                                v1627 = v1570 + v1625;
                                bool v1629;
                                if (v1581){
                                    bool v1628;
                                    v1628 = v1343 < 2;
                                    v1629 = v1628;
                                } else {
                                    v1629 = false;
                                }
                                bool v1630;
                                v1630 = v1629 == false;
                                if (v1630){
                                    assert("Index must be in range." && v1629);
                                } else {
                                }
                                int v1632;
                                v1632 = v1549[v1343];
                                bool v1634;
                                v1634 = v1627 < v1632;
                                int v1635;
                                if (v1634){
                                    v1635 = v1627;
                                } else {
                                    v1635 = v1632;
                                }
                                static_array<int,2> v1636;
                                int v1638;
                                v1638 = 0;
                                while (while_method_0(v1638)){
                                    bool v1640;
                                    v1640 = 0 <= v1638;
                                    bool v1642;
                                    if (v1640){
                                        bool v1641;
                                        v1641 = v1638 < 2;
                                        v1642 = v1641;
                                    } else {
                                        v1642 = false;
                                    }
                                    bool v1643;
                                    v1643 = v1642 == false;
                                    if (v1643){
                                        assert("Index must be in range." && v1642);
                                    } else {
                                    }
                                    int v1645;
                                    v1645 = v1338[v1638];
                                    bool v1647;
                                    v1647 = v1343 == v1638;
                                    int v1648;
                                    if (v1647){
                                        v1648 = v1635;
                                    } else {
                                        v1648 = v1645;
                                    }
                                    v1636[v1638] = v1648;
                                    v1638 += 1 ;
                                }
                                static_array<int,2> v1649;
                                int v1651;
                                v1651 = 0;
                                while (while_method_0(v1651)){
                                    bool v1653;
                                    v1653 = 0 <= v1651;
                                    bool v1655;
                                    if (v1653){
                                        bool v1654;
                                        v1654 = v1651 < 2;
                                        v1655 = v1654;
                                    } else {
                                        v1655 = false;
                                    }
                                    bool v1656;
                                    v1656 = v1655 == false;
                                    if (v1656){
                                        assert("Index must be in range." && v1655);
                                    } else {
                                    }
                                    int v1658;
                                    v1658 = v1549[v1651];
                                    bool v1661;
                                    if (v1653){
                                        bool v1660;
                                        v1660 = v1651 < 2;
                                        v1661 = v1660;
                                    } else {
                                        v1661 = false;
                                    }
                                    bool v1662;
                                    v1662 = v1661 == false;
                                    if (v1662){
                                        assert("Index must be in range." && v1661);
                                    } else {
                                    }
                                    int v1664;
                                    v1664 = v1636[v1651];
                                    int v1666;
                                    v1666 = v1658 - v1664;
                                    v1649[v1651] = v1666;
                                    v1651 += 1 ;
                                }
                                bool v1667;
                                v1667 = v1625 >= v1336;
                                int v1668;
                                if (v1667){
                                    v1668 = v1625;
                                } else {
                                    v1668 = v1336;
                                }
                                int v1669;
                                v1669 = v1339 + 1;
                                v1674 = try_round_36(v1668, v1337, v1636, v1669, v1649, v1341);
                                break;
                            }
                            case 1: { // A_Call
                                static_array<int,2> v1345;
                                int v1347;
                                v1347 = 0;
                                while (while_method_0(v1347)){
                                    bool v1349;
                                    v1349 = 0 <= v1347;
                                    bool v1351;
                                    if (v1349){
                                        bool v1350;
                                        v1350 = v1347 < 2;
                                        v1351 = v1350;
                                    } else {
                                        v1351 = false;
                                    }
                                    bool v1352;
                                    v1352 = v1351 == false;
                                    if (v1352){
                                        assert("Index must be in range." && v1351);
                                    } else {
                                    }
                                    int v1354;
                                    v1354 = v1340[v1347];
                                    bool v1357;
                                    if (v1349){
                                        bool v1356;
                                        v1356 = v1347 < 2;
                                        v1357 = v1356;
                                    } else {
                                        v1357 = false;
                                    }
                                    bool v1358;
                                    v1358 = v1357 == false;
                                    if (v1358){
                                        assert("Index must be in range." && v1357);
                                    } else {
                                    }
                                    int v1360;
                                    v1360 = v1338[v1347];
                                    int v1362;
                                    v1362 = v1354 + v1360;
                                    v1345[v1347] = v1362;
                                    v1347 += 1 ;
                                }
                                int v1363;
                                v1363 = v1338[0];
                                int v1365; int v1366;
                                Tuple4 tmp156 = Tuple4{1, v1363};
                                v1365 = tmp156.v0; v1366 = tmp156.v1;
                                while (while_method_0(v1365)){
                                    bool v1368;
                                    v1368 = 0 <= v1365;
                                    bool v1370;
                                    if (v1368){
                                        bool v1369;
                                        v1369 = v1365 < 2;
                                        v1370 = v1369;
                                    } else {
                                        v1370 = false;
                                    }
                                    bool v1371;
                                    v1371 = v1370 == false;
                                    if (v1371){
                                        assert("Index must be in range." && v1370);
                                    } else {
                                    }
                                    int v1373;
                                    v1373 = v1338[v1365];
                                    bool v1375;
                                    v1375 = v1366 >= v1373;
                                    int v1376;
                                    if (v1375){
                                        v1376 = v1366;
                                    } else {
                                        v1376 = v1373;
                                    }
                                    v1366 = v1376;
                                    v1365 += 1 ;
                                }
                                bool v1377;
                                v1377 = 0 <= v1343;
                                bool v1379;
                                if (v1377){
                                    bool v1378;
                                    v1378 = v1343 < 2;
                                    v1379 = v1378;
                                } else {
                                    v1379 = false;
                                }
                                bool v1380;
                                v1380 = v1379 == false;
                                if (v1380){
                                    assert("Index must be in range." && v1379);
                                } else {
                                }
                                int v1382;
                                v1382 = v1345[v1343];
                                bool v1384;
                                v1384 = v1366 < v1382;
                                int v1385;
                                if (v1384){
                                    v1385 = v1366;
                                } else {
                                    v1385 = v1382;
                                }
                                static_array<int,2> v1386;
                                int v1388;
                                v1388 = 0;
                                while (while_method_0(v1388)){
                                    bool v1390;
                                    v1390 = 0 <= v1388;
                                    bool v1392;
                                    if (v1390){
                                        bool v1391;
                                        v1391 = v1388 < 2;
                                        v1392 = v1391;
                                    } else {
                                        v1392 = false;
                                    }
                                    bool v1393;
                                    v1393 = v1392 == false;
                                    if (v1393){
                                        assert("Index must be in range." && v1392);
                                    } else {
                                    }
                                    int v1395;
                                    v1395 = v1338[v1388];
                                    bool v1397;
                                    v1397 = v1343 == v1388;
                                    int v1398;
                                    if (v1397){
                                        v1398 = v1385;
                                    } else {
                                        v1398 = v1395;
                                    }
                                    v1386[v1388] = v1398;
                                    v1388 += 1 ;
                                }
                                static_array<int,2> v1399;
                                int v1401;
                                v1401 = 0;
                                while (while_method_0(v1401)){
                                    bool v1403;
                                    v1403 = 0 <= v1401;
                                    bool v1405;
                                    if (v1403){
                                        bool v1404;
                                        v1404 = v1401 < 2;
                                        v1405 = v1404;
                                    } else {
                                        v1405 = false;
                                    }
                                    bool v1406;
                                    v1406 = v1405 == false;
                                    if (v1406){
                                        assert("Index must be in range." && v1405);
                                    } else {
                                    }
                                    int v1408;
                                    v1408 = v1345[v1401];
                                    bool v1411;
                                    if (v1403){
                                        bool v1410;
                                        v1410 = v1401 < 2;
                                        v1411 = v1410;
                                    } else {
                                        v1411 = false;
                                    }
                                    bool v1412;
                                    v1412 = v1411 == false;
                                    if (v1412){
                                        assert("Index must be in range." && v1411);
                                    } else {
                                    }
                                    int v1414;
                                    v1414 = v1386[v1401];
                                    int v1416;
                                    v1416 = v1408 - v1414;
                                    v1399[v1401] = v1416;
                                    v1401 += 1 ;
                                }
                                bool v1417;
                                v1417 = v1343 < 2;
                                if (v1417){
                                    int v1418;
                                    v1418 = v1339 + 1;
                                    v1674 = try_round_36(v1336, v1337, v1386, v1418, v1399, v1341);
                                } else {
                                    v1674 = go_next_street_38(v1336, v1337, v1386, v1339, v1399, v1341);
                                }
                                break;
                            }
                            case 2: { // A_Fold
                                v1674 = Union4{Union4_1{v1336, v1337, v1338, v1339, v1340, v1341}};
                                break;
                            }
                            case 3: { // A_Raise
                                int v1422 = v1342.case3.v0;
                                bool v1423;
                                v1423 = v1336 <= v1422;
                                bool v1424;
                                v1424 = v1423 == false;
                                if (v1424){
                                    assert("The raise amount must match the minimum." && v1423);
                                } else {
                                }
                                static_array<int,2> v1426;
                                int v1428;
                                v1428 = 0;
                                while (while_method_0(v1428)){
                                    bool v1430;
                                    v1430 = 0 <= v1428;
                                    bool v1432;
                                    if (v1430){
                                        bool v1431;
                                        v1431 = v1428 < 2;
                                        v1432 = v1431;
                                    } else {
                                        v1432 = false;
                                    }
                                    bool v1433;
                                    v1433 = v1432 == false;
                                    if (v1433){
                                        assert("Index must be in range." && v1432);
                                    } else {
                                    }
                                    int v1435;
                                    v1435 = v1340[v1428];
                                    bool v1438;
                                    if (v1430){
                                        bool v1437;
                                        v1437 = v1428 < 2;
                                        v1438 = v1437;
                                    } else {
                                        v1438 = false;
                                    }
                                    bool v1439;
                                    v1439 = v1438 == false;
                                    if (v1439){
                                        assert("Index must be in range." && v1438);
                                    } else {
                                    }
                                    int v1441;
                                    v1441 = v1338[v1428];
                                    int v1443;
                                    v1443 = v1435 + v1441;
                                    v1426[v1428] = v1443;
                                    v1428 += 1 ;
                                }
                                int v1444;
                                v1444 = v1338[0];
                                int v1446; int v1447;
                                Tuple4 tmp157 = Tuple4{1, v1444};
                                v1446 = tmp157.v0; v1447 = tmp157.v1;
                                while (while_method_0(v1446)){
                                    bool v1449;
                                    v1449 = 0 <= v1446;
                                    bool v1451;
                                    if (v1449){
                                        bool v1450;
                                        v1450 = v1446 < 2;
                                        v1451 = v1450;
                                    } else {
                                        v1451 = false;
                                    }
                                    bool v1452;
                                    v1452 = v1451 == false;
                                    if (v1452){
                                        assert("Index must be in range." && v1451);
                                    } else {
                                    }
                                    int v1454;
                                    v1454 = v1338[v1446];
                                    bool v1456;
                                    v1456 = v1447 >= v1454;
                                    int v1457;
                                    if (v1456){
                                        v1457 = v1447;
                                    } else {
                                        v1457 = v1454;
                                    }
                                    v1447 = v1457;
                                    v1446 += 1 ;
                                }
                                bool v1458;
                                v1458 = 0 <= v1343;
                                bool v1460;
                                if (v1458){
                                    bool v1459;
                                    v1459 = v1343 < 2;
                                    v1460 = v1459;
                                } else {
                                    v1460 = false;
                                }
                                bool v1461;
                                v1461 = v1460 == false;
                                if (v1461){
                                    assert("Index must be in range." && v1460);
                                } else {
                                }
                                int v1463;
                                v1463 = v1426[v1343];
                                bool v1465;
                                v1465 = v1447 < v1463;
                                int v1466;
                                if (v1465){
                                    v1466 = v1447;
                                } else {
                                    v1466 = v1463;
                                }
                                static_array<int,2> v1467;
                                int v1469;
                                v1469 = 0;
                                while (while_method_0(v1469)){
                                    bool v1471;
                                    v1471 = 0 <= v1469;
                                    bool v1473;
                                    if (v1471){
                                        bool v1472;
                                        v1472 = v1469 < 2;
                                        v1473 = v1472;
                                    } else {
                                        v1473 = false;
                                    }
                                    bool v1474;
                                    v1474 = v1473 == false;
                                    if (v1474){
                                        assert("Index must be in range." && v1473);
                                    } else {
                                    }
                                    int v1476;
                                    v1476 = v1338[v1469];
                                    bool v1478;
                                    v1478 = v1343 == v1469;
                                    int v1479;
                                    if (v1478){
                                        v1479 = v1466;
                                    } else {
                                        v1479 = v1476;
                                    }
                                    v1467[v1469] = v1479;
                                    v1469 += 1 ;
                                }
                                static_array<int,2> v1480;
                                int v1482;
                                v1482 = 0;
                                while (while_method_0(v1482)){
                                    bool v1484;
                                    v1484 = 0 <= v1482;
                                    bool v1486;
                                    if (v1484){
                                        bool v1485;
                                        v1485 = v1482 < 2;
                                        v1486 = v1485;
                                    } else {
                                        v1486 = false;
                                    }
                                    bool v1487;
                                    v1487 = v1486 == false;
                                    if (v1487){
                                        assert("Index must be in range." && v1486);
                                    } else {
                                    }
                                    int v1489;
                                    v1489 = v1426[v1482];
                                    bool v1492;
                                    if (v1484){
                                        bool v1491;
                                        v1491 = v1482 < 2;
                                        v1492 = v1491;
                                    } else {
                                        v1492 = false;
                                    }
                                    bool v1493;
                                    v1493 = v1492 == false;
                                    if (v1493){
                                        assert("Index must be in range." && v1492);
                                    } else {
                                    }
                                    int v1495;
                                    v1495 = v1467[v1482];
                                    int v1497;
                                    v1497 = v1489 - v1495;
                                    v1480[v1482] = v1497;
                                    v1482 += 1 ;
                                }
                                bool v1499;
                                if (v1458){
                                    bool v1498;
                                    v1498 = v1343 < 2;
                                    v1499 = v1498;
                                } else {
                                    v1499 = false;
                                }
                                bool v1500;
                                v1500 = v1499 == false;
                                if (v1500){
                                    assert("Index must be in range." && v1499);
                                } else {
                                }
                                int v1502;
                                v1502 = v1480[v1343];
                                bool v1504;
                                v1504 = v1422 < v1502;
                                bool v1505;
                                v1505 = v1504 == false;
                                if (v1505){
                                    assert("The raise amount must be less than the stack size after calling." && v1504);
                                } else {
                                }
                                int v1507;
                                v1507 = v1447 + v1422;
                                bool v1509;
                                if (v1458){
                                    bool v1508;
                                    v1508 = v1343 < 2;
                                    v1509 = v1508;
                                } else {
                                    v1509 = false;
                                }
                                bool v1510;
                                v1510 = v1509 == false;
                                if (v1510){
                                    assert("Index must be in range." && v1509);
                                } else {
                                }
                                int v1512;
                                v1512 = v1426[v1343];
                                bool v1514;
                                v1514 = v1507 < v1512;
                                int v1515;
                                if (v1514){
                                    v1515 = v1507;
                                } else {
                                    v1515 = v1512;
                                }
                                static_array<int,2> v1516;
                                int v1518;
                                v1518 = 0;
                                while (while_method_0(v1518)){
                                    bool v1520;
                                    v1520 = 0 <= v1518;
                                    bool v1522;
                                    if (v1520){
                                        bool v1521;
                                        v1521 = v1518 < 2;
                                        v1522 = v1521;
                                    } else {
                                        v1522 = false;
                                    }
                                    bool v1523;
                                    v1523 = v1522 == false;
                                    if (v1523){
                                        assert("Index must be in range." && v1522);
                                    } else {
                                    }
                                    int v1525;
                                    v1525 = v1338[v1518];
                                    bool v1527;
                                    v1527 = v1343 == v1518;
                                    int v1528;
                                    if (v1527){
                                        v1528 = v1515;
                                    } else {
                                        v1528 = v1525;
                                    }
                                    v1516[v1518] = v1528;
                                    v1518 += 1 ;
                                }
                                static_array<int,2> v1529;
                                int v1531;
                                v1531 = 0;
                                while (while_method_0(v1531)){
                                    bool v1533;
                                    v1533 = 0 <= v1531;
                                    bool v1535;
                                    if (v1533){
                                        bool v1534;
                                        v1534 = v1531 < 2;
                                        v1535 = v1534;
                                    } else {
                                        v1535 = false;
                                    }
                                    bool v1536;
                                    v1536 = v1535 == false;
                                    if (v1536){
                                        assert("Index must be in range." && v1535);
                                    } else {
                                    }
                                    int v1538;
                                    v1538 = v1426[v1531];
                                    bool v1541;
                                    if (v1533){
                                        bool v1540;
                                        v1540 = v1531 < 2;
                                        v1541 = v1540;
                                    } else {
                                        v1541 = false;
                                    }
                                    bool v1542;
                                    v1542 = v1541 == false;
                                    if (v1542){
                                        assert("Index must be in range." && v1541);
                                    } else {
                                    }
                                    int v1544;
                                    v1544 = v1516[v1531];
                                    int v1546;
                                    v1546 = v1538 - v1544;
                                    v1529[v1531] = v1546;
                                    v1531 += 1 ;
                                }
                                int v1547;
                                v1547 = v1339 + 1;
                                v1674 = try_round_36(v1422, v1337, v1516, v1547, v1529, v1341);
                                break;
                            }
                            default: {
                                assert("Invalid tag." && false); __trap();
                            }
                        }
                        v1681 = Union3{Union3_1{v1674}};
                        break;
                    }
                    case 2: { // T_some
                        Union4 v1334 = v1332.case2.v0;
                        v1681 = Union3{Union3_1{v1334}};
                        break;
                    }
                    default: {
                        assert("Invalid tag." && false); __trap();
                    }
                }
                break;
            }
            default: {
                assert("Invalid tag." && false); __trap();
            }
        }
        v17 = v1681;
    }
    return ;
}
extern "C" __global__ void entry0(unsigned char * v0, unsigned char * v1, unsigned char * v2, unsigned char * v3, unsigned char * v4) {
    Union0 v5;
    v5 = f_0(v1);
    unsigned long long v6; Union3 v7; static_array_list<Union6,128> v8; static_array<Union2,2> v9; Union7 v10;
    Tuple1 tmp15 = f_6(v0);
    v6 = tmp15.v0; v7 = tmp15.v1; v8 = tmp15.v2; v9 = tmp15.v3; v10 = tmp15.v4;
    unsigned long long v11;
    v11 = clock64();
    int v12;
    v12 = threadIdx.x;
    int v13;
    v13 = blockIdx.x;
    int v14;
    v14 = v13 * 256;
    int v15;
    v15 = v12 + v14;
    unsigned long long v16;
    v16 = (unsigned long long)v15;
    curandStatePhilox4_32_10_t v17;
    curand_init(v11,v16,0ull,&v17);
    curandStatePhilox4_32_10_t & v18 = v17;
    StackMut0 v19{v6, v7, v8, v9, v18, v10};
    Union3 v56;
    switch (v5.tag) {
        case 0: { // ActionSelected
            Union1 v34 = v5.case0.v0;
            Union3 & v35 = v19.v1;
            switch (v35.tag) {
                case 0: { // None
                    printf("%s\n", "The game hasn't been started in ActionSelected.");
                    __trap();
                    break;
                }
                case 1: { // Some
                    Union4 v36 = v35.case1.v0;
                    switch (v36.tag) {
                        case 4: { // G_Round
                            int v37 = v36.case4.v0; static_array<static_array<unsigned char,2>,2> v38 = v36.case4.v1; static_array<int,2> v39 = v36.case4.v2; int v40 = v36.case4.v3; static_array<int,2> v41 = v36.case4.v4; Union5 v42 = v36.case4.v5;
                            Union4 v43;
                            v43 = Union4{Union4_5{v37, v38, v39, v40, v41, v42, v34}};
                            v56 = Union3{Union3_1{v43}};
                            break;
                        }
                        default: {
                            printf("%s\n", "Unexpected game node in ActionSelected.");
                            __trap();
                        }
                    }
                    break;
                }
                default: {
                    assert("Invalid tag." && false); __trap();
                }
            }
            break;
        }
        case 1: { // PlayerChanged
            static_array<Union2,2> v32 = v5.case1.v0;
            v19.v3 = v32;
            v56 = Union3{Union3_0{}};
            break;
        }
        case 2: { // StartGame
            static_array<Union2,2> v20;
            Union2 v22;
            v22 = Union2{Union2_1{}};
            v20[0] = v22;
            Union2 v24;
            v24 = Union2{Union2_2{}};
            v20[1] = v24;
            static_array_list<Union6,128> v26;
            v26 = static_array_list<Union6,128>{};
            Union7 v28;
            v28 = Union7{Union7_0{}};
            v19.v5 = v28;
            Union3 v29;
            v29 = Union3{Union3_0{}};
            v19.v1 = v29;
            v19.v0 = 4503599627370495ull;
            v19.v2 = v26;
            Union4 v30;
            v30 = Union4{Union4_2{}};
            v56 = Union3{Union3_1{v30}};
            break;
        }
        case 3: { // StartTrainingVsCallingMachine
            printf("%s\n", "Training is not supported in the `event_loop_play` function.");
            __trap();
            break;
        }
        case 4: { // StartTrainingVsSelf
            printf("%s\n", "Training is not supported in the `event_loop_play` function.");
            __trap();
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
    switch (v56.tag) {
        case 0: { // None
            break;
        }
        case 1: { // Some
            Union4 v57 = v56.case1.v0;
            play_loop_31(v2, v3, v4, v19, v57);
            break;
        }
        default: {
            assert("Invalid tag." && false); __trap();
        }
    }
    int v58;
    v58 = threadIdx.x;
    int v59;
    v59 = blockIdx.x;
    int v60;
    v60 = v59 * 256;
    int v61;
    v61 = v58 + v60;
    bool v62;
    v62 = v61 == 0;
    if (v62){
        Union7 & v63 = v19.v5;
        static_array<Union2,2> & v64 = v19.v3;
        static_array_list<Union6,128> & v65 = v19.v2;
        Union3 & v66 = v19.v1;
        unsigned long long & v67 = v19.v0;
        return f_52(v0, v67, v66, v65, v64, v63);
    } else {
        return ;
    }
}
extern "C" __global__ void entry1(unsigned char * v0, unsigned char * v1, unsigned char * v2, float * v3, float * v4, float * v5) {
    auto v6 = cooperative_groups::this_grid();
    unsigned long long v7;
    v7 = clock64();
    int v8;
    v8 = threadIdx.x;
    int v9;
    v9 = blockIdx.x;
    int v10;
    v10 = v9 * 256;
    int v11;
    v11 = v8 + v10;
    unsigned long long v12;
    v12 = (unsigned long long)v11;
    curandStatePhilox4_32_10_t v13;
    curand_init(v7,v12,0ull,&v13);
    static_array<Union2,2> v14;
    Union2 v16;
    v16 = Union2{Union2_3{}};
    v14[0] = v16;
    Union2 v18;
    v18 = Union2{Union2_3{}};
    v14[1] = v18;
    static_array_list<Union6,128> v20;
    v20 = static_array_list<Union6,128>{};
    static_array<float,2> v22;
    v22[0] = 0.0f;
    v22[1] = 0.0f;
    cooperative_groups::grid_group & v24 = v6;
    curandStatePhilox4_32_10_t & v25 = v13;
    StackMut1 v26{4503599627370495ull, v24, v20, v14, v22, v25};
    int v27;
    v27 = 0;
    while (while_method_20(v27)){
        int v29;
        v29 = 0;
        while (while_method_21(v29)){
            int v31;
            v31 = 0;
            while (while_method_0(v31)){
                Union4 v33;
                v33 = Union4{Union4_2{}};
                method_80(v0, v1, v2, v26, v31, v33);
                static_array<float,2> & v34 = v26.v4;
                bool v35;
                v35 = 0 <= v31;
                bool v37;
                if (v35){
                    bool v36;
                    v36 = v31 < 2;
                    v37 = v36;
                } else {
                    v37 = false;
                }
                bool v38;
                v38 = v37 == false;
                if (v38){
                    assert("Index must be in range." && v37);
                } else {
                }
                float v40;
                v40 = v34[v31];
                double * v42;
                v42 = reinterpret_cast<double *>(&v1[58195968ull]);
                double * v44;
                v44 = reinterpret_cast<double *>(&v1[58589184ull]);
                int v46;
                v46 = threadIdx.x;
                int v47;
                v47 = blockIdx.x;
                int v48;
                v48 = v47 * 256;
                int v49;
                v49 = v46 + v48;
                assert("Tensor range check" && 0 <= v49 && v49 < 6144);
                int v50;
                v50 = 2 * v49;
                int * v51;
                v51 = reinterpret_cast<int *>(&v0[2097152ull]);
                bool * v53;
                v53 = reinterpret_cast<bool *>(&v0[2097168ull]);
                float * v55;
                v55 = reinterpret_cast<float *>(&v0[2097184ull]);
                float * v57;
                v57 = reinterpret_cast<float *>(&v0[2097200ull]);
                double v59[2];
                int v60;
                v60 = 0;
                while (while_method_0(v60)){
                    int v62; double v63;
                    Tuple23 tmp106 = Tuple23{0, 0.0};
                    v62 = tmp106.v0; v63 = tmp106.v1;
                    while (while_method_3(v62)){
                        assert("Tensor range check" && 0 <= v62 && v62 < 4);
                        bool v65;
                        v65 = v53[v62];
                        bool v66;
                        v66 = v65 == false;
                        double v74;
                        if (v66){
                            v74 = 0.0;
                        } else {
                            assert("Tensor range check" && 0 <= v62 && v62 < 4);
                            assert("Tensor range check" && 0 <= v60 && v60 < 2);
                            int v67;
                            v67 = v60 + v50;
                            int v68;
                            v68 = 12288 * v62;
                            int v69;
                            v69 = v68 + v67;
                            double v70;
                            v70 = v42[v69];
                            double v71;
                            v71 = v44[v69];
                            double v72;
                            v72 = v70 - v71;
                            double v73;
                            v73 = exp(v72);
                            v74 = v73;
                        }
                        double v75;
                        v75 = v63 + v74;
                        v63 = v75;
                        v62 += 1 ;
                    }
                    assert("Tensor range check" && 0 <= v60 && v60 < 2);
                    v59[v60] = v63;
                    v60 += 1 ;
                }
                double v76;
                v76 = 1.0;
                int v77;
                v77 = 0;
                while (while_method_0(v77)){
                    assert("Tensor range check" && 0 <= v77 && v77 < 2);
                    double v79;
                    v79 = v59[v77];
                    double v80;
                    v80 = v76 * v79;
                    v76 = v80;
                    v77 += 1 ;
                }
                double v81[8];
                int v82;
                v82 = 0;
                while (while_method_3(v82)){
                    int v84;
                    v84 = 0;
                    while (while_method_0(v84)){
                        bool v86;
                        v86 = v76 == 0.0;
                        bool v87;
                        v87 = v86 != true;
                        double v98;
                        if (v87){
                            assert("Tensor range check" && 0 <= v84 && v84 < 2);
                            double v88;
                            v88 = v59[v84];
                            double v89;
                            v89 = v76 / v88;
                            assert("Tensor range check" && 0 <= v82 && v82 < 4);
                            assert("Tensor range check" && 0 <= v84 && v84 < 2);
                            int v90;
                            v90 = v84 + v50;
                            int v91;
                            v91 = 12288 * v82;
                            int v92;
                            v92 = v91 + v90;
                            double v93;
                            v93 = v42[v92];
                            double v94;
                            v94 = v44[v92];
                            double v95;
                            v95 = v93 - v94;
                            double v96;
                            v96 = exp(v95);
                            double v97;
                            v97 = v89 * v96;
                            v98 = v97;
                        } else {
                            v98 = 0.0;
                        }
                        bool v99;
                        v99 = isnan(v98);
                        bool v100;
                        v100 = v99 == false;
                        bool v101;
                        v101 = v100 == false;
                        if (v101){
                            assert("The path probability after integration should not be a nan in integrate_rewards_." && v100);
                        } else {
                        }
                        assert("Tensor range check" && 0 <= v82 && v82 < 4);
                        assert("Tensor range check" && 0 <= v84 && v84 < 2);
                        int v103;
                        v103 = 2 * v82;
                        int v104;
                        v104 = v103 + v84;
                        v81[v104] = v98;
                        v84 += 1 ;
                    }
                    v82 += 1 ;
                }
                int v105;
                v105 = 0;
                while (while_method_3(v105)){
                    assert("Tensor range check" && 0 <= v105 && v105 < 4);
                    assert("Tensor range check" && 0 <= v31 && v31 < 2);
                    int v107;
                    v107 = 2 * v105;
                    int v108;
                    v108 = v107 + v31;
                    double v109;
                    v109 = v81[v108];
                    float v110;
                    v110 = (float)v109;
                    float v111;
                    v111 = v40 * v110;
                    assert("Tensor range check" && 0 <= v105 && v105 < 4);
                    assert("Tensor range check" && 0 <= v27 && v27 < 1024);
                    int v112;
                    v112 = 1024 * v105;
                    int v113;
                    v113 = v112 + v27;
                    float * v114;
                    v114 = v3+v113;
                    float * v116;
                    v116 = v4+v113;
                    float v118;
                    v118 = atomicAdd(v114,v111);
                    float v119;
                    v119 = atomicAdd(v116,v110);
                    v105 += 1 ;
                }
                static_array<float,2> & v120 = v26.v4;
                float * v121;
                v121 = reinterpret_cast<float *>(&v1[51904512ull]);
                int * v123;
                v123 = reinterpret_cast<int *>(&v0[2097152ull]);
                bool * v125;
                v125 = reinterpret_cast<bool *>(&v0[2097168ull]);
                float * v127;
                v127 = reinterpret_cast<float *>(&v0[2097184ull]);
                float * v129;
                v129 = reinterpret_cast<float *>(&v0[2097200ull]);
                double * v131;
                v131 = reinterpret_cast<double *>(&v1[58195968ull]);
                double * v133;
                v133 = reinterpret_cast<double *>(&v1[58589184ull]);
                int v135;
                v135 = threadIdx.x;
                int v136;
                v136 = blockIdx.x;
                int v137;
                v137 = v136 * 256;
                int v138;
                v138 = v135 + v137;
                assert("Tensor range check" && 0 <= v138 && v138 < 6144);
                int v139;
                v139 = 2 * v138;
                double * v140;
                v140 = v131+v139;
                double * v142;
                v142 = v133+v139;
                float v144[2];
                int v145;
                v145 = 0;
                while (while_method_0(v145)){
                    bool v147;
                    v147 = 0 <= v145;
                    bool v149;
                    if (v147){
                        bool v148;
                        v148 = v145 < 2;
                        v149 = v148;
                    } else {
                        v149 = false;
                    }
                    bool v150;
                    v150 = v149 == false;
                    if (v150){
                        assert("Index must be in range." && v149);
                    } else {
                    }
                    float v152;
                    v152 = v120[v145];
                    assert("Tensor range check" && 0 <= v145 && v145 < 2);
                    v144[v145] = v152;
                    v145 += 1 ;
                }
                double v154[2];
                int v155;
                v155 = 0;
                while (while_method_0(v155)){
                    int v157; double v158;
                    Tuple23 tmp107 = Tuple23{0, 0.0};
                    v157 = tmp107.v0; v158 = tmp107.v1;
                    while (while_method_3(v157)){
                        assert("Tensor range check" && 0 <= v157 && v157 < 4);
                        bool v160;
                        v160 = v125[v157];
                        bool v161;
                        v161 = v160 == false;
                        double v168;
                        if (v161){
                            v168 = 0.0;
                        } else {
                            assert("Tensor range check" && 0 <= v157 && v157 < 4);
                            assert("Tensor range check" && 0 <= v155 && v155 < 2);
                            int v162;
                            v162 = 12288 * v157;
                            int v163;
                            v163 = v162 + v155;
                            double v164;
                            v164 = v140[v163];
                            double v165;
                            v165 = v142[v163];
                            double v166;
                            v166 = v164 - v165;
                            double v167;
                            v167 = exp(v166);
                            v168 = v167;
                        }
                        double v169;
                        v169 = v158 + v168;
                        v158 = v169;
                        v157 += 1 ;
                    }
                    assert("Tensor range check" && 0 <= v155 && v155 < 2);
                    v154[v155] = v158;
                    v155 += 1 ;
                }
                double v170;
                v170 = 1.0;
                int v171;
                v171 = 0;
                while (while_method_0(v171)){
                    assert("Tensor range check" && 0 <= v171 && v171 < 2);
                    double v173;
                    v173 = v154[v171];
                    double v174;
                    v174 = v170 * v173;
                    v170 = v174;
                    v171 += 1 ;
                }
                double v175[8];
                int v176;
                v176 = 0;
                while (while_method_3(v176)){
                    int v178;
                    v178 = 0;
                    while (while_method_0(v178)){
                        bool v180;
                        v180 = v170 == 0.0;
                        bool v181;
                        v181 = v180 != true;
                        double v191;
                        if (v181){
                            assert("Tensor range check" && 0 <= v178 && v178 < 2);
                            double v182;
                            v182 = v154[v178];
                            double v183;
                            v183 = v170 / v182;
                            assert("Tensor range check" && 0 <= v176 && v176 < 4);
                            assert("Tensor range check" && 0 <= v178 && v178 < 2);
                            int v184;
                            v184 = 12288 * v176;
                            int v185;
                            v185 = v184 + v178;
                            double v186;
                            v186 = v140[v185];
                            double v187;
                            v187 = v142[v185];
                            double v188;
                            v188 = v186 - v187;
                            double v189;
                            v189 = exp(v188);
                            double v190;
                            v190 = v183 * v189;
                            v191 = v190;
                        } else {
                            v191 = 0.0;
                        }
                        bool v192;
                        v192 = isnan(v191);
                        bool v193;
                        v193 = v192 == false;
                        bool v194;
                        v194 = v193 == false;
                        if (v194){
                            assert("The path probability after integration should not be a nan in integrate_rewards_." && v193);
                        } else {
                        }
                        assert("Tensor range check" && 0 <= v176 && v176 < 4);
                        assert("Tensor range check" && 0 <= v178 && v178 < 2);
                        int v196;
                        v196 = 2 * v176;
                        int v197;
                        v197 = v196 + v178;
                        v175[v197] = v191;
                        v178 += 1 ;
                    }
                    v176 += 1 ;
                }
                float v198[4];
                float v199[4];
                int v200;
                v200 = 0;
                while (while_method_3(v200)){
                    int v202; float v203; double v204;
                    Tuple24 tmp108 = Tuple24{0, 0.0f, 0.0};
                    v202 = tmp108.v0; v203 = tmp108.v1; v204 = tmp108.v2;
                    while (while_method_0(v202)){
                        assert("Tensor range check" && 0 <= v200 && v200 < 4);
                        assert("Tensor range check" && 0 <= v202 && v202 < 2);
                        int v206;
                        v206 = 2 * v200;
                        int v207;
                        v207 = v206 + v202;
                        double v208;
                        v208 = v175[v207];
                        assert("Tensor range check" && 0 <= v202 && v202 < 2);
                        float v209;
                        v209 = v144[v202];
                        float v210;
                        v210 = (float)v208;
                        float v211;
                        v211 = v210 * v209;
                        float v212;
                        v212 = v203 + v211;
                        double v213;
                        v213 = v204 + v208;
                        v203 = v212;
                        v204 = v213;
                        v202 += 1 ;
                    }
                    float v214;
                    v214 = (float)v204;
                    assert("Tensor range check" && 0 <= v200 && v200 < 4);
                    v198[v200] = v203;
                    v199[v200] = v214;
                    v200 += 1 ;
                }
                int v215;
                v215 = 0;
                while (while_method_3(v215)){
                    assert("Tensor range check" && 0 <= v215 && v215 < 4);
                    float v217;
                    v217 = v198[v215];
                    float v218;
                    v218 = v199[v215];
                    bool v219;
                    v219 = isnan(v218);
                    bool v220;
                    v220 = v219 == false;
                    bool v221;
                    v221 = v220 == false;
                    if (v221){
                        assert("The path probability after integration should not be a nan in calculate updates." && v220);
                    } else {
                    }
                    float v223;
                    v223 = v217 * v218;
                    assert("Tensor range check" && 0 <= v215 && v215 < 4);
                    float * v224;
                    v224 = v127+v215;
                    float * v226;
                    v226 = v129+v215;
                    float v228;
                    v228 = atomicAdd(v224,v223);
                    float v229;
                    v229 = atomicAdd(v226,v218);
                    v215 += 1 ;
                }
                int v230;
                v230 = threadIdx.x;
                int v231;
                v231 = blockIdx.x;
                int v232;
                v232 = v231 * 256;
                int v233;
                v233 = v230 + v232;
                int v234;
                v234 = 0;
                while (while_method_3(v234)){
                    assert("Tensor range check" && 0 <= v234 && v234 < 4);
                    int v236;
                    v236 = 12288 * v234;
                    assert("Tensor range check" && 0 <= v233 && v233 < 6144);
                    int v237;
                    v237 = 2 * v233;
                    int v238;
                    v238 = v237 + v236;
                    double * v239;
                    v239 = v131+v238;
                    double * v241;
                    v241 = v133+v238;
                    double * v243;
                    v243 = v131+v238;
                    double * v245;
                    v245 = v133+v238;
                    int v247;
                    v247 = sizeof(double *);
                    unsigned long long v248;
                    v248 = (unsigned long long)v247;
                    unsigned long long v249;
                    v249 = 256ull * v248;
                    unsigned long long v250;
                    v250 = v249 + 16ull;
                    unsigned long long v251;
                    v251 = v250 - 1ull;
                    unsigned long long v252;
                    v252 = v251 % 16ull;
                    unsigned long long v253;
                    v253 = v251 - v252;
                    unsigned long long v254;
                    v254 = v253 + v249;
                    unsigned long long v255;
                    v255 = v254 + 16ull;
                    unsigned long long v256;
                    v256 = v255 - 1ull;
                    unsigned long long v257;
                    v257 = v256 % 16ull;
                    unsigned long long v258;
                    v258 = v256 - v257;
                    unsigned long long v259;
                    v259 = v258 + v249;
                    unsigned long long v260;
                    v260 = v259 + 16ull;
                    unsigned long long v261;
                    v261 = v260 - 1ull;
                    unsigned long long v262;
                    v262 = v261 % 16ull;
                    unsigned long long v263;
                    v263 = v261 - v262;
                    unsigned long long v264;
                    v264 = v263 + v249;
                    bool v265;
                    v265 = v264 <= 98304ull;
                    bool v266;
                    v266 = v265 == false;
                    if (v266){
                        assert("The dynamic shared memory is insufficient to allocate the tensor." && v265);
                    } else {
                    }
                    extern __shared__ unsigned char v268[];
                    bool v269;
                    v269 = v264 <= v264;
                    bool v270;
                    v270 = v269 == false;
                    if (v270){
                        assert("The length of the partition has to be less than or equal to the length of the base array." && v269);
                    } else {
                    }
                    double * * v272;
                    v272 = reinterpret_cast<double * *>(&v268[0ull]);
                    double * * v274;
                    v274 = reinterpret_cast<double * *>(&v268[v253]);
                    double * * v276;
                    v276 = reinterpret_cast<double * *>(&v268[v258]);
                    double * * v278;
                    v278 = reinterpret_cast<double * *>(&v268[v263]);
                    int v280;
                    v280 = threadIdx.x;
                    assert("Tensor range check" && 0 <= v280 && v280 < 256);
                    v272[v280] = v239;
                    v274[v280] = v241;
                    v276[v280] = v243;
                    v278[v280] = v245;
                    __syncthreads();
                    bool v281;
                    v281 = 0 <= v280;
                    bool v282;
                    v282 = v281 == false;
                    if (v282){
                        assert("The index needs to be zero or positive." && v281);
                    } else {
                    }
                    int v284;
                    v284 = v280 % 1;
                    bool v285;
                    v285 = v280 < 256;
                    bool v286;
                    v286 = v285 == false;
                    if (v286){
                        assert("The last element of the projection dimensions needs to be greater than the index remainder." && v285);
                    } else {
                    }
                    assert("Tensor range check" && 0 <= v280 && v280 < 256);
                    int v288;
                    v288 = 0;
                    while (while_method_6(v288)){
                        bool v290;
                        v290 = v281 && v285;
                        bool v291;
                        v291 = v290 == false;
                        if (v291){
                            assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v290);
                        } else {
                        }
                        bool v293;
                        v293 = 0 <= v288;
                        bool v295;
                        if (v293){
                            bool v294;
                            v294 = v288 < 1;
                            v295 = v294;
                        } else {
                            v295 = false;
                        }
                        bool v296;
                        v296 = v295 == false;
                        if (v296){
                            assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v295);
                        } else {
                        }
                        int v298;
                        v298 = v288 * 256;
                        int v299;
                        v299 = v298 + v280;
                        assert("Tensor range check" && 0 <= v288 && v288 < 1);
                        int v300;
                        v300 = 256 * v288;
                        int v301;
                        v301 = v300 + v280;
                        double * v302;
                        v302 = v272[v301];
                        double * v303;
                        v303 = v274[v301];
                        double * v304;
                        v304 = v276[v301];
                        double * v305;
                        v305 = v278[v301];
                        int v306;
                        v306 = blockIdx.x;
                        int v307;
                        v307 = v306 * 256;
                        int v308;
                        v308 = v307 + v299;
                        assert("Tensor range check" && 0 <= v284 && v284 < 1);
                        int v309;
                        v309 = 2 * v284;
                        double v310[2];
                        double v311[2];
                        int v312[2];
                        int v313;
                        v313 = 0;
                        while (while_method_6(v313)){
                            assert("Tensor range check" && 0 <= v313 && v313 < 1);
                            int v315;
                            v315 = 2 * v313;
                            assert("Tensor range check" && 0 <= v313 && v313 < 1);
                            int v316;
                            v316 = v315 + v309;
                            int4* v317;
                            v317 = reinterpret_cast<int4*>(v302 + v316);
                            int4* v318;
                            v318 = reinterpret_cast<int4*>(v310 + v315);
                            assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v317) % 16 == 0 && reinterpret_cast<unsigned long long>(v318) % 16 == 0);
                            *v318 = *v317;
                            int4* v319;
                            v319 = reinterpret_cast<int4*>(v303 + v316);
                            int4* v320;
                            v320 = reinterpret_cast<int4*>(v311 + v315);
                            assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v319) % 16 == 0 && reinterpret_cast<unsigned long long>(v320) % 16 == 0);
                            *v320 = *v319;
                            v313 += 1 ;
                        }
                        int v321;
                        v321 = 0;
                        while (while_method_6(v321)){
                            int v323;
                            v323 = 0;
                            while (while_method_0(v323)){
                                bool v325;
                                v325 = 0 <= v323;
                                bool v327;
                                if (v325){
                                    bool v326;
                                    v326 = v323 < 2;
                                    v327 = v326;
                                } else {
                                    v327 = false;
                                }
                                bool v328;
                                v328 = v327 == false;
                                if (v328){
                                    assert("The indices should be inside the range of the dimension." && v327);
                                } else {
                                }
                                bool v330;
                                v330 = 0 <= v284;
                                bool v332;
                                if (v330){
                                    bool v331;
                                    v331 = v284 < 1;
                                    v332 = v331;
                                } else {
                                    v332 = false;
                                }
                                bool v333;
                                v333 = v332 == false;
                                if (v333){
                                    assert("The indices should be inside the range of the dimension." && v332);
                                } else {
                                }
                                int v335;
                                v335 = v284 * 2;
                                int v336;
                                v336 = v323 + v335;
                                bool v337;
                                v337 = 0 <= v321;
                                bool v339;
                                if (v337){
                                    bool v338;
                                    v338 = v321 < 1;
                                    v339 = v338;
                                } else {
                                    v339 = false;
                                }
                                bool v340;
                                v340 = v339 == false;
                                if (v340){
                                    assert("The indices should be inside the range of the dimension." && v339);
                                } else {
                                }
                                int v342;
                                v342 = v321 * 2;
                                int v343;
                                v343 = v336 + v342;
                                assert("Tensor range check" && 0 <= v321 && v321 < 1);
                                assert("Tensor range check" && 0 <= v323 && v323 < 2);
                                int v344;
                                v344 = 2 * v321;
                                int v345;
                                v345 = v344 + v323;
                                v312[v345] = v343;
                                v323 += 1 ;
                            }
                            v321 += 1 ;
                        }
                        double v346[2];
                        double v347[2];
                        int v348;
                        v348 = 0;
                        while (while_method_6(v348)){
                            int v350;
                            v350 = 0;
                            while (while_method_0(v350)){
                                assert("Tensor range check" && 0 <= v348 && v348 < 1);
                                assert("Tensor range check" && 0 <= v350 && v350 < 2);
                                int v352;
                                v352 = 2 * v348;
                                int v353;
                                v353 = v352 + v350;
                                double v354;
                                v354 = v310[v353];
                                double v355;
                                v355 = v311[v353];
                                assert("Tensor range check" && 0 <= v348 && v348 < 1);
                                assert("Tensor range check" && 0 <= v350 && v350 < 2);
                                v346[v353] = 0.0;
                                v347[v353] = 0.0;
                                v350 += 1 ;
                            }
                            v348 += 1 ;
                        }
                        int v356;
                        v356 = 0;
                        while (while_method_6(v356)){
                            assert("Tensor range check" && 0 <= v356 && v356 < 1);
                            int v358;
                            v358 = 2 * v356;
                            int v359;
                            v359 = v358 + v309;
                            assert("Tensor range check" && 0 <= v356 && v356 < 1);
                            int4* v360;
                            v360 = reinterpret_cast<int4*>(v346 + v358);
                            int4* v361;
                            v361 = reinterpret_cast<int4*>(v304 + v359);
                            assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v360) % 16 == 0 && reinterpret_cast<unsigned long long>(v361) % 16 == 0);
                            *v361 = *v360;
                            int4* v362;
                            v362 = reinterpret_cast<int4*>(v347 + v358);
                            int4* v363;
                            v363 = reinterpret_cast<int4*>(v305 + v359);
                            assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v362) % 16 == 0 && reinterpret_cast<unsigned long long>(v363) % 16 == 0);
                            *v363 = *v362;
                            v356 += 1 ;
                        }
                        assert("Tensor range check" && 0 <= v299 && v299 < 256);
                        v288 += 1 ;
                    }
                    __syncthreads();
                    assert("Tensor range check" && 0 <= v280 && v280 < 256);
                    __syncthreads();
                    v234 += 1 ;
                }
                v31 += 1 ;
            }
            v29 += 1 ;
        }
        cooperative_groups::grid_group & v364 = v26.v1;
        cooperative_groups::grid_group & v365 = v364;
        curandStatePhilox4_32_10_t & v366 = v26.v5;
        curandStatePhilox4_32_10_t & v367 = v366;
        float * v368;
        v368 = reinterpret_cast<float *>(&v0[0ull]);
        float * v370;
        v370 = reinterpret_cast<float *>(&v2[0ull]);
        float * v372;
        v372 = reinterpret_cast<float *>(&v1[51904512ull]);
        int * v374;
        v374 = reinterpret_cast<int *>(&v0[2097152ull]);
        bool * v376;
        v376 = reinterpret_cast<bool *>(&v0[2097168ull]);
        float * v378;
        v378 = reinterpret_cast<float *>(&v0[2097184ull]);
        float * v380;
        v380 = reinterpret_cast<float *>(&v0[2097200ull]);
        double * v382;
        v382 = reinterpret_cast<double *>(&v1[58195968ull]);
        double * v384;
        v384 = reinterpret_cast<double *>(&v1[58589184ull]);
        v365.sync() ;
        int v386;
        v386 = threadIdx.x;
        int v387;
        v387 = blockIdx.x;
        int v388;
        v388 = v387 * 256;
        int v389;
        v389 = v386 + v388;
        bool v390;
        v390 = v389 == 0;
        if (v390){
            int v391;
            v391 = 0;
            int v392;
            v392 = 4;
            int v393;
            v393 = int_range_44(v392, v391, v367);
            v374[0] = v393;
        } else {
        }
        __syncwarp();
        float v394[4];
        int v395;
        v395 = 0;
        while (while_method_3(v395)){
            assert("Tensor range check" && 0 <= v395 && v395 < 4);
            float v397;
            v397 = v378[v395];
            float v398;
            v398 = v380[v395];
            bool v399;
            v399 = v398 == 0.0f;
            bool v400;
            v400 = v399 != true;
            float v402;
            if (v400){
                float v401;
                v401 = v397 / v398;
                v402 = v401;
            } else {
                v402 = 0.0f;
            }
            assert("Tensor range check" && 0 <= v395 && v395 < 4);
            v394[v395] = v402;
            v395 += 1 ;
        }
        float v403;
        v403 = 0.0f;
        int v404;
        v404 = 0;
        while (while_method_3(v404)){
            assert("Tensor range check" && 0 <= v404 && v404 < 4);
            float v406;
            v406 = v394[v404];
            float v407;
            v407 = v403 + v406;
            v403 = v407;
            v404 += 1 ;
        }
        float v408;
        v408 = v403 / 4.0f;
        int v409;
        v409 = 0;
        while (while_method_3(v409)){
            assert("Tensor range check" && 0 <= v409 && v409 < 4);
            v378[v409] = 0.0f;
            v380[v409] = 0.0f;
            v409 += 1 ;
        }
        bool v411[4];
        int v412;
        v412 = 0;
        while (while_method_3(v412)){
            assert("Tensor range check" && 0 <= v412 && v412 < 4);
            float v414;
            v414 = v394[v412];
            bool v415;
            v415 = v414 >= v408;
            assert("Tensor range check" && 0 <= v412 && v412 < 4);
            v411[v412] = v415;
            v412 += 1 ;
        }
        int v416;
        v416 = 0;
        while (while_method_3(v416)){
            assert("Tensor range check" && 0 <= v416 && v416 < 4);
            bool v418;
            v418 = v411[v416];
            assert("Tensor range check" && 0 <= v416 && v416 < 4);
            v376[v416] = v418;
            v416 += 1 ;
        }
        extern __shared__ unsigned char v419[];
        float * v420;
        v420 = reinterpret_cast<float *>(&v419[0ull]);
        int v422;
        v422 = blockIdx.x;
        int v423;
        v423 = v422;
        while (while_method_23(v423)){
            bool v425;
            v425 = 0 <= v423;
            bool v426;
            v426 = v425 == false;
            if (v426){
                assert("The index needs to be zero or positive." && v425);
            } else {
            }
            int v428;
            v428 = v423 % 256;
            int v429;
            v429 = v423 / 256;
            bool v430;
            v430 = v429 < 1;
            bool v431;
            v431 = v430 == false;
            if (v431){
                assert("The last element of the projection dimensions needs to be greater than the index remainder." && v430);
            } else {
            }
            assert("Tensor range check" && 0 <= v429 && v429 < 1);
            assert("Tensor range check" && 0 <= v428 && v428 < 256);
            int v433;
            v433 = 512 * v428;
            int v434;
            v434 = 524288 * v429;
            int v435;
            v435 = v434 + v433;
            int v436;
            v436 = 2048 * v428;
            int v437;
            v437 = 4 * v429;
            int v438;
            v438 = v437 + v436;
            int v439;
            v439 = threadIdx.x;
            int v440;
            v440 = v439;
            while (while_method_24(v440)){
                bool v442;
                v442 = 0 <= v440;
                bool v443;
                v443 = v442 == false;
                if (v443){
                    assert("The index needs to be zero or positive." && v442);
                } else {
                }
                int v445;
                v445 = v440 % 512;
                int v446;
                v446 = v440 / 512;
                bool v447;
                v447 = v446 < 4;
                bool v448;
                v448 = v447 == false;
                if (v448){
                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v447);
                } else {
                }
                assert("Tensor range check" && 0 <= v446 && v446 < 4);
                assert("Tensor range check" && 0 <= v445 && v445 < 512);
                int v450;
                v450 = v445 + v435;
                int v451;
                v451 = 131072 * v446;
                int v452;
                v452 = v451 + v450;
                float v453;
                v453 = v368[v452];
                assert("Tensor range check" && 0 <= v446 && v446 < 4);
                assert("Tensor range check" && 0 <= v445 && v445 < 512);
                int v454;
                v454 = 513 * v446;
                int v455;
                v455 = v454 + v445;
                v420[v455] = v453;
                v440 += 256 ;
            }
            __syncthreads();
            int v456;
            v456 = threadIdx.x;
            int v457;
            v457 = v456;
            while (while_method_24(v457)){
                bool v459;
                v459 = 0 <= v457;
                bool v460;
                v460 = v459 == false;
                if (v460){
                    assert("The index needs to be zero or positive." && v459);
                } else {
                }
                int v462;
                v462 = v457 % 4;
                int v463;
                v463 = v457 / 4;
                bool v464;
                v464 = v463 < 512;
                bool v465;
                v465 = v464 == false;
                if (v465){
                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v464);
                } else {
                }
                assert("Tensor range check" && 0 <= v463 && v463 < 512);
                assert("Tensor range check" && 0 <= v462 && v462 < 4);
                int v467;
                v467 = 513 * v462;
                int v468;
                v468 = v463 + v467;
                float v469;
                v469 = v420[v468];
                assert("Tensor range check" && 0 <= v463 && v463 < 512);
                assert("Tensor range check" && 0 <= v462 && v462 < 4);
                int v470;
                v470 = v462 + v438;
                int v471;
                v471 = 4 * v463;
                int v472;
                v472 = v471 + v470;
                v370[v472] = v469;
                v457 += 256 ;
            }
            __syncthreads();
            v423 += 24 ;
        }
        v365.sync() ;
        int v473;
        v473 = threadIdx.x;
        bool v474;
        v474 = 0 <= v473;
        bool v475;
        v475 = v474 == false;
        if (v475){
            assert("The index needs to be zero or positive." && v474);
        } else {
        }
        int v477;
        v477 = v473 % 1;
        int v478;
        v478 = v473 % 256;
        int v479;
        v479 = v473 / 256;
        bool v480;
        v480 = v479 < 1;
        bool v481;
        v481 = v480 == false;
        if (v481){
            assert("The last element of the projection dimensions needs to be greater than the index remainder." && v480);
        } else {
        }
        assert("Tensor range check" && 0 <= v479 && v479 < 1);
        assert("Tensor range check" && 0 <= v478 && v478 < 256);
        assert("Tensor range check" && 0 <= v477 && v477 < 1);
        int v483;
        v483 = 4 * v477;
        int v484;
        v484 = 4 * v478;
        int v485;
        v485 = v484 + v483;
        int v486;
        v486 = 8192 * v479;
        int v487;
        v487 = v486 + v485;
        assert("Tensor range check" && 0 <= v479 && v479 < 1);
        assert("Tensor range check" && 0 <= v478 && v478 < 256);
        assert("Tensor range check" && 0 <= v477 && v477 < 1);
        int v488;
        v488 = blockIdx.x;
        int v489;
        v489 = v488;
        while (while_method_25(v489)){
            bool v491;
            v491 = 0 <= v489;
            bool v492;
            v492 = v491 == false;
            if (v492){
                assert("The index needs to be zero or positive." && v491);
            } else {
            }
            int v494;
            v494 = v489 % 8;
            int v495;
            v495 = v489 / 8;
            bool v496;
            v496 = v495 < 64;
            bool v497;
            v497 = v496 == false;
            if (v497){
                assert("The last element of the projection dimensions needs to be greater than the index remainder." && v496);
            } else {
            }
            assert("Tensor range check" && 0 <= v495 && v495 < 64);
            assert("Tensor range check" && 0 <= v494 && v494 < 8);
            int v499;
            v499 = 1024 * v494;
            int v500;
            v500 = v499 + v487;
            int v501;
            v501 = 8192 * v495;
            int v502;
            v502 = v501 + v500;
            float v503[4];
            int v504[4];
            int v505;
            v505 = 0;
            while (while_method_6(v505)){
                assert("Tensor range check" && 0 <= v505 && v505 < 1);
                int v507;
                v507 = 4 * v505;
                assert("Tensor range check" && 0 <= v505 && v505 < 1);
                int v508;
                v508 = v507 + v502;
                int4* v509;
                v509 = reinterpret_cast<int4*>(v370 + v508);
                int4* v510;
                v510 = reinterpret_cast<int4*>(v503 + v507);
                assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v509) % 16 == 0 && reinterpret_cast<unsigned long long>(v510) % 16 == 0);
                *v510 = *v509;
                v505 += 1 ;
            }
            int v511;
            v511 = 0;
            while (while_method_6(v511)){
                int v513;
                v513 = 0;
                while (while_method_3(v513)){
                    bool v515;
                    v515 = 0 <= v513;
                    bool v517;
                    if (v515){
                        bool v516;
                        v516 = v513 < 4;
                        v517 = v516;
                    } else {
                        v517 = false;
                    }
                    bool v518;
                    v518 = v517 == false;
                    if (v518){
                        assert("The indices should be inside the range of the dimension." && v517);
                    } else {
                    }
                    bool v520;
                    v520 = 0 <= v477;
                    bool v522;
                    if (v520){
                        bool v521;
                        v521 = v477 < 1;
                        v522 = v521;
                    } else {
                        v522 = false;
                    }
                    bool v523;
                    v523 = v522 == false;
                    if (v523){
                        assert("The indices should be inside the range of the dimension." && v522);
                    } else {
                    }
                    int v525;
                    v525 = v477 * 4;
                    int v526;
                    v526 = v513 + v525;
                    bool v527;
                    v527 = 0 <= v511;
                    bool v529;
                    if (v527){
                        bool v528;
                        v528 = v511 < 1;
                        v529 = v528;
                    } else {
                        v529 = false;
                    }
                    bool v530;
                    v530 = v529 == false;
                    if (v530){
                        assert("The indices should be inside the range of the dimension." && v529);
                    } else {
                    }
                    int v532;
                    v532 = v511 * 4;
                    int v533;
                    v533 = v526 + v532;
                    assert("Tensor range check" && 0 <= v511 && v511 < 1);
                    assert("Tensor range check" && 0 <= v513 && v513 < 4);
                    int v534;
                    v534 = 4 * v511;
                    int v535;
                    v535 = v534 + v513;
                    v504[v535] = v533;
                    v513 += 1 ;
                }
                v511 += 1 ;
            }
            bool v536;
            v536 = 0 <= v479;
            bool v537;
            v537 = v536 && v480;
            bool v538;
            v538 = v537 == false;
            if (v538){
                assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v537);
            } else {
            }
            bool v540;
            v540 = 0 <= v478;
            bool v542;
            if (v540){
                bool v541;
                v541 = v478 < 256;
                v542 = v541;
            } else {
                v542 = false;
            }
            bool v543;
            v543 = v542 == false;
            if (v543){
                assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v542);
            } else {
            }
            bool v545;
            v545 = 0 <= v495;
            bool v546;
            v546 = v545 && v496;
            bool v547;
            v547 = v546 == false;
            if (v547){
                assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v546);
            } else {
            }
            bool v549;
            v549 = 0 <= v494;
            bool v551;
            if (v549){
                bool v550;
                v550 = v494 < 8;
                v551 = v550;
            } else {
                v551 = false;
            }
            bool v552;
            v552 = v551 == false;
            if (v552){
                assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v551);
            } else {
            }
            int v554;
            v554 = v494 * 256;
            int v555;
            v555 = v495 + v479;
            int v556;
            v556 = v554 + v478;
            bool v557[4];
            int v558;
            v558 = 0;
            while (while_method_6(v558)){
                int v560;
                v560 = 0;
                while (while_method_3(v560)){
                    assert("Tensor range check" && 0 <= v558 && v558 < 1);
                    assert("Tensor range check" && 0 <= v560 && v560 < 4);
                    int v562;
                    v562 = 4 * v558;
                    int v563;
                    v563 = v562 + v560;
                    int v564;
                    v564 = v504[v563];
                    assert("Tensor range check" && 0 <= v564 && v564 < 4);
                    bool v565;
                    v565 = v376[v564];
                    assert("Tensor range check" && 0 <= v558 && v558 < 1);
                    assert("Tensor range check" && 0 <= v560 && v560 < 4);
                    v557[v563] = v565;
                    v560 += 1 ;
                }
                v558 += 1 ;
            }
            int v566[4];
            int v567;
            v567 = 0;
            while (while_method_6(v567)){
                int v569;
                v569 = 0;
                while (while_method_3(v569)){
                    assert("Tensor range check" && 0 <= v567 && v567 < 1);
                    assert("Tensor range check" && 0 <= v569 && v569 < 4);
                    int v571;
                    v571 = 4 * v567;
                    int v572;
                    v572 = v571 + v569;
                    bool v573;
                    v573 = v557[v572];
                    int v574;
                    if (v573){
                        v574 = 1;
                    } else {
                        v574 = 0;
                    }
                    assert("Tensor range check" && 0 <= v567 && v567 < 1);
                    assert("Tensor range check" && 0 <= v569 && v569 < 4);
                    v566[v572] = v574;
                    v569 += 1 ;
                }
                v567 += 1 ;
            }
            int v575;
            v575 = 0;
            int v576;
            v576 = 0;
            while (while_method_6(v576)){
                int v578;
                v578 = 0;
                while (while_method_3(v578)){
                    assert("Tensor range check" && 0 <= v576 && v576 < 1);
                    assert("Tensor range check" && 0 <= v578 && v578 < 4);
                    int v580;
                    v580 = 4 * v576;
                    int v581;
                    v581 = v580 + v578;
                    int v582;
                    v582 = v566[v581];
                    int v583;
                    v583 = v575 + v582;
                    v575 = v583;
                    v578 += 1 ;
                }
                v576 += 1 ;
            }
            auto v584 = cooperative_groups::coalesced_threads();
            int v585;
            v585 = threadIdx.x;
            auto v586 = cooperative_groups::labeled_partition(v584,v585);
            Closure1 v587{};
            int v588;
            v588 = cooperative_groups::reduce(v586, v575, v587);
            float v589;
            v589 = (float)v588;
            float v590[4];
            int v591;
            v591 = 0;
            while (while_method_6(v591)){
                int v593;
                v593 = 0;
                while (while_method_3(v593)){
                    assert("Tensor range check" && 0 <= v591 && v591 < 1);
                    assert("Tensor range check" && 0 <= v593 && v593 < 4);
                    int v595;
                    v595 = 4 * v591;
                    int v596;
                    v596 = v595 + v593;
                    float v597;
                    v597 = v503[v596];
                    bool v598;
                    v598 = v557[v596];
                    float v599;
                    if (v598){
                        v599 = v597;
                    } else {
                        v599 = 0.0f;
                    }
                    assert("Tensor range check" && 0 <= v591 && v591 < 1);
                    assert("Tensor range check" && 0 <= v593 && v593 < 4);
                    v590[v596] = v599;
                    v593 += 1 ;
                }
                v591 += 1 ;
            }
            float v600;
            v600 = 0.0f;
            int v601;
            v601 = 0;
            while (while_method_6(v601)){
                int v603;
                v603 = 0;
                while (while_method_3(v603)){
                    assert("Tensor range check" && 0 <= v601 && v601 < 1);
                    assert("Tensor range check" && 0 <= v603 && v603 < 4);
                    int v605;
                    v605 = 4 * v601;
                    int v606;
                    v606 = v605 + v603;
                    float v607;
                    v607 = v590[v606];
                    float v608;
                    v608 = v600 + v607;
                    v600 = v608;
                    v603 += 1 ;
                }
                v601 += 1 ;
            }
            auto v609 = cooperative_groups::coalesced_threads();
            int v610;
            v610 = threadIdx.x;
            auto v611 = cooperative_groups::labeled_partition(v609,v610);
            Closure0 v612{};
            float v613;
            v613 = cooperative_groups::reduce(v611, v600, v612);
            float v614;
            v614 = v613 / v589;
            float v615[4];
            int v616;
            v616 = 0;
            while (while_method_6(v616)){
                int v618;
                v618 = 0;
                while (while_method_3(v618)){
                    assert("Tensor range check" && 0 <= v616 && v616 < 1);
                    assert("Tensor range check" && 0 <= v618 && v618 < 4);
                    int v620;
                    v620 = 4 * v616;
                    int v621;
                    v621 = v620 + v618;
                    float v622;
                    v622 = v503[v621];
                    float v623;
                    v623 = v622 - v614;
                    float v624;
                    v624 = v623 * v623;
                    assert("Tensor range check" && 0 <= v616 && v616 < 1);
                    assert("Tensor range check" && 0 <= v618 && v618 < 4);
                    v615[v621] = v624;
                    v618 += 1 ;
                }
                v616 += 1 ;
            }
            float v625[4];
            int v626;
            v626 = 0;
            while (while_method_6(v626)){
                int v628;
                v628 = 0;
                while (while_method_3(v628)){
                    assert("Tensor range check" && 0 <= v626 && v626 < 1);
                    assert("Tensor range check" && 0 <= v628 && v628 < 4);
                    int v630;
                    v630 = 4 * v626;
                    int v631;
                    v631 = v630 + v628;
                    float v632;
                    v632 = v615[v631];
                    bool v633;
                    v633 = v557[v631];
                    float v634;
                    if (v633){
                        v634 = v632;
                    } else {
                        v634 = 0.0f;
                    }
                    assert("Tensor range check" && 0 <= v626 && v626 < 1);
                    assert("Tensor range check" && 0 <= v628 && v628 < 4);
                    v625[v631] = v634;
                    v628 += 1 ;
                }
                v626 += 1 ;
            }
            float v635;
            v635 = 0.0f;
            int v636;
            v636 = 0;
            while (while_method_6(v636)){
                int v638;
                v638 = 0;
                while (while_method_3(v638)){
                    assert("Tensor range check" && 0 <= v636 && v636 < 1);
                    assert("Tensor range check" && 0 <= v638 && v638 < 4);
                    int v640;
                    v640 = 4 * v636;
                    int v641;
                    v641 = v640 + v638;
                    float v642;
                    v642 = v625[v641];
                    float v643;
                    v643 = v635 + v642;
                    v635 = v643;
                    v638 += 1 ;
                }
                v636 += 1 ;
            }
            auto v644 = cooperative_groups::coalesced_threads();
            int v645;
            v645 = threadIdx.x;
            auto v646 = cooperative_groups::labeled_partition(v644,v645);
            float v647;
            v647 = cooperative_groups::reduce(v646, v635, v612);
            float v648;
            v648 = v647 / v589;
            float v649;
            v649 = sqrt(v648);
            bool v650;
            v650 = v589 > 1.0f;
            float v654;
            if (v650){
                float v651;
                v651 = v649 * v589;
                float v652;
                v652 = v589 - 1.0f;
                float v653;
                v653 = v651 / v652;
                v654 = v653;
            } else {
                v654 = 0.0f;
            }
            float v655[4];
            int v656;
            v656 = 0;
            while (while_method_6(v656)){
                int v658;
                v658 = 0;
                while (while_method_3(v658)){
                    assert("Tensor range check" && 0 <= v656 && v656 < 1);
                    assert("Tensor range check" && 0 <= v658 && v658 < 4);
                    int v660;
                    v660 = 4 * v656;
                    int v661;
                    v661 = v660 + v658;
                    float v662;
                    v662 = v503[v661];
                    bool v663;
                    v663 = v557[v661];
                    float v664;
                    v664 = curand_normal(&v367);
                    bool v665;
                    v665 = v654 >= 0.1f;
                    float v666;
                    if (v665){
                        v666 = v654;
                    } else {
                        v666 = 0.1f;
                    }
                    float v667;
                    v667 = v664 * v666;
                    float v668;
                    v668 = v667 + v614;
                    float v669;
                    if (v663){
                        v669 = v662;
                    } else {
                        v669 = v668;
                    }
                    assert("Tensor range check" && 0 <= v656 && v656 < 1);
                    assert("Tensor range check" && 0 <= v658 && v658 < 4);
                    v655[v661] = v669;
                    v658 += 1 ;
                }
                v656 += 1 ;
            }
            assert("Tensor range check" && 0 <= v495 && v495 < 64);
            assert("Tensor range check" && 0 <= v494 && v494 < 8);
            int v670;
            v670 = 0;
            while (while_method_6(v670)){
                assert("Tensor range check" && 0 <= v670 && v670 < 1);
                int v672;
                v672 = 4 * v670;
                int v673;
                v673 = v672 + v502;
                assert("Tensor range check" && 0 <= v670 && v670 < 1);
                int4* v674;
                v674 = reinterpret_cast<int4*>(v655 + v672);
                int4* v675;
                v675 = reinterpret_cast<int4*>(v370 + v673);
                assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v674) % 16 == 0 && reinterpret_cast<unsigned long long>(v675) % 16 == 0);
                *v675 = *v674;
                v670 += 1 ;
            }
            v489 += 24 ;
        }
        v365.sync() ;
        static float v676[131072];
        int v677;
        v677 = threadIdx.x;
        int v678;
        v678 = blockIdx.x;
        int v679;
        v679 = v678 * 256;
        int v680;
        v680 = v677 + v679;
        int v681;
        v681 = v680 / 32;
        int v682;
        v682 = v681;
        while (while_method_26(v682)){
            bool v684;
            v684 = 0 <= v682;
            bool v685;
            v685 = v684 == false;
            if (v685){
                assert("The index needs to be zero or positive." && v684);
            } else {
            }
            int v687;
            v687 = v682 % 2048;
            int v688;
            v688 = v682 / 2048;
            bool v689;
            v689 = v688 < 64;
            bool v690;
            v690 = v689 == false;
            if (v690){
                assert("The last element of the projection dimensions needs to be greater than the index remainder." && v689);
            } else {
            }
            assert("Tensor range check" && 0 <= v688 && v688 < 64);
            assert("Tensor range check" && 0 <= v687 && v687 < 2048);
            int v692;
            v692 = 4 * v687;
            int v693;
            v693 = 8192 * v688;
            int v694;
            v694 = v693 + v692;
            float v695;
            v695 = 0.0f;
            int v696;
            v696 = threadIdx.x;
            int v697;
            v697 = v696 % 32;
            int v698;
            v698 = v697;
            while (while_method_6(v698)){
                bool v700;
                v700 = 0 <= v698;
                bool v701;
                v701 = v700 == false;
                if (v701){
                    assert("The index needs to be zero or positive." && v700);
                } else {
                }
                bool v703;
                v703 = v698 < 1;
                bool v704;
                v704 = v703 == false;
                if (v704){
                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v703);
                } else {
                }
                assert("Tensor range check" && 0 <= v698 && v698 < 1);
                int v706;
                v706 = 4 * v698;
                int v707;
                v707 = v706 + v694;
                float v708[4];
                int4* v709;
                v709 = reinterpret_cast<int4*>(v370 + v707);
                int4* v710;
                v710 = reinterpret_cast<int4*>(v708 + 0);
                assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v709) % 16 == 0 && reinterpret_cast<unsigned long long>(v710) % 16 == 0);
                *v710 = *v709;
                int v711;
                v711 = 0;
                while (while_method_3(v711)){
                    assert("Tensor range check" && 0 <= v711 && v711 < 4);
                    float v713;
                    v713 = v708[v711];
                    float v714;
                    v714 = v713 * v713;
                    float v715;
                    v715 = v695 + v714;
                    v695 = v715;
                    v711 += 1 ;
                }
                v698 += 32 ;
            }
            __syncwarp();
            auto v716 = cooperative_groups::coalesced_threads();
            Closure0 v717{};
            float v718;
            v718 = cooperative_groups::reduce(v716, v695, v717);
            float v719;
            v719 = sqrt(v718);
            assert("Tensor range check" && 0 <= v688 && v688 < 64);
            assert("Tensor range check" && 0 <= v687 && v687 < 2048);
            int v720;
            v720 = 2048 * v688;
            int v721;
            v721 = v720 + v687;
            v676[v721] = v719;
            v682 += 192 ;
        }
        __syncthreads();
        v365.sync() ;
        float v722;
        v722 = 0.0f;
        int v723;
        v723 = threadIdx.x;
        int v724;
        v724 = blockIdx.x;
        int v725;
        v725 = v724 * 256;
        int v726;
        v726 = v723 + v725;
        int v727;
        v727 = v726;
        while (while_method_27(v727)){
            bool v729;
            v729 = 0 <= v727;
            bool v730;
            v730 = v729 == false;
            if (v730){
                assert("The index needs to be zero or positive." && v729);
            } else {
            }
            int v732;
            v732 = v727 % 512;
            int v733;
            v733 = v727 / 512;
            bool v734;
            v734 = v733 < 64;
            bool v735;
            v735 = v734 == false;
            if (v735){
                assert("The last element of the projection dimensions needs to be greater than the index remainder." && v734);
            } else {
            }
            assert("Tensor range check" && 0 <= v733 && v733 < 64);
            assert("Tensor range check" && 0 <= v732 && v732 < 512);
            int v737;
            v737 = 4 * v732;
            int v738;
            v738 = 2048 * v733;
            int v739;
            v739 = v738 + v737;
            float v740[4];
            int4* v741;
            v741 = reinterpret_cast<int4*>(v676 + v739);
            int4* v742;
            v742 = reinterpret_cast<int4*>(v740 + 0);
            assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v741) % 16 == 0 && reinterpret_cast<unsigned long long>(v742) % 16 == 0);
            *v742 = *v741;
            int v743; float v744;
            Tuple25 tmp109 = Tuple25{0, v722};
            v743 = tmp109.v0; v744 = tmp109.v1;
            while (while_method_3(v743)){
                assert("Tensor range check" && 0 <= v743 && v743 < 4);
                float v746;
                v746 = v740[v743];
                bool v747;
                v747 = v744 >= v746;
                float v748;
                if (v747){
                    v748 = v744;
                } else {
                    v748 = v746;
                }
                v744 = v748;
                v743 += 1 ;
            }
            v722 = v744;
            v727 += 6144 ;
        }
        __syncwarp();
        auto v749 = cooperative_groups::coalesced_threads();
        Closure7 v750{};
        float v751;
        v751 = cooperative_groups::reduce(v749, v722, v750);
        int v752;
        v752 = threadIdx.x;
        int v753;
        v753 = v752 / 32;
        extern __shared__ unsigned char v754[];
        float * v755;
        v755 = reinterpret_cast<float *>(&v754[0ull]);
        assert("Tensor range check" && 0 <= v753 && v753 < 8);
        v755[v753] = v751;
        __syncthreads();
        int v757;
        v757 = threadIdx.x;
        int v758;
        v758 = v757 % 32;
        bool v759;
        v759 = v758 < 8;
        float v761;
        if (v759){
            assert("Tensor range check" && 0 <= v758 && v758 < 8);
            float v760;
            v760 = v755[v758];
            v761 = v760;
        } else {
            v761 = 0.0f;
        }
        __syncthreads();
        auto v762 = cooperative_groups::coalesced_threads();
        float v763;
        v763 = cooperative_groups::reduce(v762, v761, v750);
        int v764;
        v764 = blockIdx.x;
        static float v765[24];
        assert("Tensor range check" && 0 <= v764 && v764 < 24);
        v765[v764] = v763;
        v365.sync() ;
        float v766;
        v766 = 0.0f;
        int v767;
        v767 = threadIdx.x;
        int v768;
        v768 = v767 % 32;
        int v769;
        v769 = v768;
        while (while_method_28(v769)){
            bool v771;
            v771 = 0 <= v769;
            bool v772;
            v772 = v771 == false;
            if (v772){
                assert("The index needs to be zero or positive." && v771);
            } else {
            }
            bool v774;
            v774 = v769 < 24;
            bool v775;
            v775 = v774 == false;
            if (v775){
                assert("The last element of the projection dimensions needs to be greater than the index remainder." && v774);
            } else {
            }
            assert("Tensor range check" && 0 <= v769 && v769 < 24);
            float v777;
            v777 = v765[v769];
            bool v778;
            v778 = v766 >= v777;
            float v779;
            if (v778){
                v779 = v766;
            } else {
                v779 = v777;
            }
            v766 = v779;
            v769 += 32 ;
        }
        __syncwarp();
        auto v780 = cooperative_groups::coalesced_threads();
        float v781;
        v781 = cooperative_groups::reduce(v780, v766, v750);
        int v782;
        v782 = threadIdx.x;
        int v783;
        v783 = blockIdx.x;
        int v784;
        v784 = v783 * 256;
        int v785;
        v785 = v782 + v784;
        bool v786;
        v786 = v785 == 0;
        if (v786){
            cuda::counting_semaphore<cuda::thread_scope_system, 1> & v787 = console_lock;
            auto v788 = cooperative_groups::coalesced_threads();
            v787.acquire();
            printf("{%s = %f}\n","max_norm", v781);
            v787.release();
            v788.sync() ;
        } else {
        }
        __syncwarp();
        extern __shared__ unsigned char v791[];
        float * v792;
        v792 = reinterpret_cast<float *>(&v791[0ull]);
        int v794;
        v794 = blockIdx.x;
        int v795;
        v795 = v794;
        while (while_method_23(v795)){
            bool v797;
            v797 = 0 <= v795;
            bool v798;
            v798 = v797 == false;
            if (v798){
                assert("The index needs to be zero or positive." && v797);
            } else {
            }
            int v800;
            v800 = v795 % 1;
            bool v801;
            v801 = v795 < 256;
            bool v802;
            v802 = v801 == false;
            if (v802){
                assert("The last element of the projection dimensions needs to be greater than the index remainder." && v801);
            } else {
            }
            assert("Tensor range check" && 0 <= v795 && v795 < 256);
            assert("Tensor range check" && 0 <= v800 && v800 < 1);
            int v804;
            v804 = 4 * v800;
            int v805;
            v805 = 2048 * v795;
            int v806;
            v806 = v805 + v804;
            int v807;
            v807 = 524288 * v800;
            int v808;
            v808 = 512 * v795;
            int v809;
            v809 = v808 + v807;
            int v810;
            v810 = threadIdx.x;
            int v811;
            v811 = v810;
            while (while_method_24(v811)){
                bool v813;
                v813 = 0 <= v811;
                bool v814;
                v814 = v813 == false;
                if (v814){
                    assert("The index needs to be zero or positive." && v813);
                } else {
                }
                int v816;
                v816 = v811 % 4;
                int v817;
                v817 = v811 / 4;
                bool v818;
                v818 = v817 < 512;
                bool v819;
                v819 = v818 == false;
                if (v819){
                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v818);
                } else {
                }
                assert("Tensor range check" && 0 <= v817 && v817 < 512);
                assert("Tensor range check" && 0 <= v816 && v816 < 4);
                int v821;
                v821 = v816 + v806;
                int v822;
                v822 = 4 * v817;
                int v823;
                v823 = v822 + v821;
                float v824;
                v824 = v370[v823];
                assert("Tensor range check" && 0 <= v817 && v817 < 512);
                assert("Tensor range check" && 0 <= v816 && v816 < 4);
                int v825;
                v825 = 33 * v817;
                int v826;
                v826 = v825 + v816;
                v792[v826] = v824;
                v811 += 256 ;
            }
            __syncthreads();
            int v827;
            v827 = threadIdx.x;
            int v828;
            v828 = v827;
            while (while_method_24(v828)){
                bool v830;
                v830 = 0 <= v828;
                bool v831;
                v831 = v830 == false;
                if (v831){
                    assert("The index needs to be zero or positive." && v830);
                } else {
                }
                int v833;
                v833 = v828 % 512;
                int v834;
                v834 = v828 / 512;
                bool v835;
                v835 = v834 < 4;
                bool v836;
                v836 = v835 == false;
                if (v836){
                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v835);
                } else {
                }
                assert("Tensor range check" && 0 <= v834 && v834 < 4);
                assert("Tensor range check" && 0 <= v833 && v833 < 512);
                int v838;
                v838 = 33 * v833;
                int v839;
                v839 = v834 + v838;
                float v840;
                v840 = v792[v839];
                assert("Tensor range check" && 0 <= v834 && v834 < 4);
                assert("Tensor range check" && 0 <= v833 && v833 < 512);
                int v841;
                v841 = v833 + v809;
                int v842;
                v842 = 131072 * v834;
                int v843;
                v843 = v842 + v841;
                v368[v843] = v840;
                v828 += 256 ;
            }
            __syncthreads();
            v795 += 24 ;
        }
        v365.sync() ;
        v27 += 1 ;
    }
    cooperative_groups::grid_group & v844 = v26.v1;
    cooperative_groups::grid_group & v845 = v844;
    int v846;
    v846 = threadIdx.x;
    int v847;
    v847 = blockIdx.x;
    int v848;
    v848 = v847 * 256;
    int v849;
    v849 = v846 + v848;
    int v850;
    v850 = v849;
    while (while_method_20(v850)){
        bool v852;
        v852 = 0 <= v850;
        bool v853;
        v853 = v852 == false;
        if (v853){
            assert("The index needs to be zero or positive." && v852);
        } else {
        }
        int v855;
        v855 = v850 % 256;
        int v856;
        v856 = v850 / 256;
        bool v857;
        v857 = v856 < 4;
        bool v858;
        v858 = v857 == false;
        if (v858){
            assert("The last element of the projection dimensions needs to be greater than the index remainder." && v857);
        } else {
        }
        assert("Tensor range check" && 0 <= v856 && v856 < 4);
        assert("Tensor range check" && 0 <= v855 && v855 < 256);
        int v860;
        v860 = 4 * v855;
        int v861;
        v861 = 1024 * v856;
        int v862;
        v862 = v861 + v860;
        assert("Tensor range check" && 0 <= v856 && v856 < 4);
        assert("Tensor range check" && 0 <= v855 && v855 < 256);
        float v863[4];
        float v864[4];
        float v865[4];
        int4* v866;
        v866 = reinterpret_cast<int4*>(v3 + v862);
        int4* v867;
        v867 = reinterpret_cast<int4*>(v863 + 0);
        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v866) % 16 == 0 && reinterpret_cast<unsigned long long>(v867) % 16 == 0);
        *v867 = *v866;
        int4* v868;
        v868 = reinterpret_cast<int4*>(v4 + v862);
        int4* v869;
        v869 = reinterpret_cast<int4*>(v864 + 0);
        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v868) % 16 == 0 && reinterpret_cast<unsigned long long>(v869) % 16 == 0);
        *v869 = *v868;
        // Pushing the loop unrolling to: 0
        int v870;
        v870 = 0;
        #pragma unroll
        while (while_method_3(v870)){
            assert("Tensor range check" && 0 <= v870 && v870 < 4);
            float v872;
            v872 = v863[v870];
            float v873;
            v873 = v864[v870];
            bool v874;
            v874 = v873 == 0.0f;
            bool v875;
            v875 = v874 != true;
            float v877;
            if (v875){
                float v876;
                v876 = v872 / v873;
                v877 = v876;
            } else {
                v877 = 0.0f;
            }
            assert("Tensor range check" && 0 <= v870 && v870 < 4);
            v865[v870] = v877;
            v870 += 1 ;
        }
        // Poping the loop unrolling to: 0
        int4* v878;
        v878 = reinterpret_cast<int4*>(v865 + 0);
        int4* v879;
        v879 = reinterpret_cast<int4*>(v5 + v862);
        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v878) % 16 == 0 && reinterpret_cast<unsigned long long>(v879) % 16 == 0);
        *v879 = *v878;
        v850 += 6144 ;
    }
    v845.sync() ;
    return ;
}
extern "C" __global__ void entry2(unsigned char * v0, unsigned char * v1, unsigned char * v2, float * v3, float * v4, float * v5) {
    auto v6 = cooperative_groups::this_grid();
    unsigned long long v7;
    v7 = clock64();
    int v8;
    v8 = threadIdx.x;
    int v9;
    v9 = blockIdx.x;
    int v10;
    v10 = v9 * 256;
    int v11;
    v11 = v8 + v10;
    unsigned long long v12;
    v12 = (unsigned long long)v11;
    curandStatePhilox4_32_10_t v13;
    curand_init(v7,v12,0ull,&v13);
    static_array<Union2,2> v14;
    Union2 v16;
    v16 = Union2{Union2_3{}};
    v14[0] = v16;
    Union2 v18;
    v18 = Union2{Union2_3{}};
    v14[1] = v18;
    static_array_list<Union6,128> v20;
    v20 = static_array_list<Union6,128>{};
    static_array<float,2> v22;
    v22[0] = 0.0f;
    v22[1] = 0.0f;
    cooperative_groups::grid_group & v24 = v6;
    curandStatePhilox4_32_10_t & v25 = v13;
    StackMut1 v26{4503599627370495ull, v24, v20, v14, v22, v25};
    int v27;
    v27 = 0;
    while (while_method_20(v27)){
        int v29;
        v29 = 0;
        while (while_method_21(v29)){
            Union4 v31;
            v31 = Union4{Union4_2{}};
            method_83(v0, v1, v2, v26, v31);
            static_array<float,2> & v32 = v26.v4;
            float * v33;
            v33 = reinterpret_cast<float *>(&v1[51904512ull]);
            int * v35;
            v35 = reinterpret_cast<int *>(&v0[2097152ull]);
            bool * v37;
            v37 = reinterpret_cast<bool *>(&v0[2097168ull]);
            float * v39;
            v39 = reinterpret_cast<float *>(&v0[2097184ull]);
            float * v41;
            v41 = reinterpret_cast<float *>(&v0[2097200ull]);
            double * v43;
            v43 = reinterpret_cast<double *>(&v1[58195968ull]);
            double * v45;
            v45 = reinterpret_cast<double *>(&v1[58589184ull]);
            int v47;
            v47 = threadIdx.x;
            int v48;
            v48 = blockIdx.x;
            int v49;
            v49 = v48 * 256;
            int v50;
            v50 = v47 + v49;
            assert("Tensor range check" && 0 <= v50 && v50 < 6144);
            int v51;
            v51 = 2 * v50;
            double * v52;
            v52 = v43+v51;
            double * v54;
            v54 = v45+v51;
            float v56[2];
            int v57;
            v57 = 0;
            while (while_method_0(v57)){
                bool v59;
                v59 = 0 <= v57;
                bool v61;
                if (v59){
                    bool v60;
                    v60 = v57 < 2;
                    v61 = v60;
                } else {
                    v61 = false;
                }
                bool v62;
                v62 = v61 == false;
                if (v62){
                    assert("Index must be in range." && v61);
                } else {
                }
                float v64;
                v64 = v32[v57];
                assert("Tensor range check" && 0 <= v57 && v57 < 2);
                v56[v57] = v64;
                v57 += 1 ;
            }
            double v66[2];
            int v67;
            v67 = 0;
            while (while_method_0(v67)){
                int v69; double v70;
                Tuple23 tmp133 = Tuple23{0, 0.0};
                v69 = tmp133.v0; v70 = tmp133.v1;
                while (while_method_3(v69)){
                    assert("Tensor range check" && 0 <= v69 && v69 < 4);
                    bool v72;
                    v72 = v37[v69];
                    bool v73;
                    v73 = v72 == false;
                    double v80;
                    if (v73){
                        v80 = 0.0;
                    } else {
                        assert("Tensor range check" && 0 <= v69 && v69 < 4);
                        assert("Tensor range check" && 0 <= v67 && v67 < 2);
                        int v74;
                        v74 = 12288 * v69;
                        int v75;
                        v75 = v74 + v67;
                        double v76;
                        v76 = v52[v75];
                        double v77;
                        v77 = v54[v75];
                        double v78;
                        v78 = v76 - v77;
                        double v79;
                        v79 = exp(v78);
                        v80 = v79;
                    }
                    double v81;
                    v81 = v70 + v80;
                    v70 = v81;
                    v69 += 1 ;
                }
                assert("Tensor range check" && 0 <= v67 && v67 < 2);
                v66[v67] = v70;
                v67 += 1 ;
            }
            double v82;
            v82 = 1.0;
            int v83;
            v83 = 0;
            while (while_method_0(v83)){
                assert("Tensor range check" && 0 <= v83 && v83 < 2);
                double v85;
                v85 = v66[v83];
                double v86;
                v86 = v82 * v85;
                v82 = v86;
                v83 += 1 ;
            }
            double v87[8];
            int v88;
            v88 = 0;
            while (while_method_3(v88)){
                int v90;
                v90 = 0;
                while (while_method_0(v90)){
                    bool v92;
                    v92 = v82 == 0.0;
                    bool v93;
                    v93 = v92 != true;
                    double v103;
                    if (v93){
                        assert("Tensor range check" && 0 <= v90 && v90 < 2);
                        double v94;
                        v94 = v66[v90];
                        double v95;
                        v95 = v82 / v94;
                        assert("Tensor range check" && 0 <= v88 && v88 < 4);
                        assert("Tensor range check" && 0 <= v90 && v90 < 2);
                        int v96;
                        v96 = 12288 * v88;
                        int v97;
                        v97 = v96 + v90;
                        double v98;
                        v98 = v52[v97];
                        double v99;
                        v99 = v54[v97];
                        double v100;
                        v100 = v98 - v99;
                        double v101;
                        v101 = exp(v100);
                        double v102;
                        v102 = v95 * v101;
                        v103 = v102;
                    } else {
                        v103 = 0.0;
                    }
                    bool v104;
                    v104 = isnan(v103);
                    bool v105;
                    v105 = v104 == false;
                    bool v106;
                    v106 = v105 == false;
                    if (v106){
                        assert("The path probability after integration should not be a nan in integrate_rewards_." && v105);
                    } else {
                    }
                    assert("Tensor range check" && 0 <= v88 && v88 < 4);
                    assert("Tensor range check" && 0 <= v90 && v90 < 2);
                    int v108;
                    v108 = 2 * v88;
                    int v109;
                    v109 = v108 + v90;
                    v87[v109] = v103;
                    v90 += 1 ;
                }
                v88 += 1 ;
            }
            float v110[4];
            float v111[4];
            int v112;
            v112 = 0;
            while (while_method_3(v112)){
                int v114; float v115; double v116;
                Tuple24 tmp134 = Tuple24{0, 0.0f, 0.0};
                v114 = tmp134.v0; v115 = tmp134.v1; v116 = tmp134.v2;
                while (while_method_0(v114)){
                    assert("Tensor range check" && 0 <= v112 && v112 < 4);
                    assert("Tensor range check" && 0 <= v114 && v114 < 2);
                    int v118;
                    v118 = 2 * v112;
                    int v119;
                    v119 = v118 + v114;
                    double v120;
                    v120 = v87[v119];
                    assert("Tensor range check" && 0 <= v114 && v114 < 2);
                    float v121;
                    v121 = v56[v114];
                    float v122;
                    v122 = (float)v120;
                    float v123;
                    v123 = v122 * v121;
                    float v124;
                    v124 = v115 + v123;
                    double v125;
                    v125 = v116 + v120;
                    v115 = v124;
                    v116 = v125;
                    v114 += 1 ;
                }
                float v126;
                v126 = (float)v116;
                assert("Tensor range check" && 0 <= v112 && v112 < 4);
                v110[v112] = v115;
                v111[v112] = v126;
                v112 += 1 ;
            }
            int v127;
            v127 = 0;
            while (while_method_3(v127)){
                assert("Tensor range check" && 0 <= v127 && v127 < 4);
                float v129;
                v129 = v110[v127];
                float v130;
                v130 = v111[v127];
                bool v131;
                v131 = isnan(v130);
                bool v132;
                v132 = v131 == false;
                bool v133;
                v133 = v132 == false;
                if (v133){
                    assert("The path probability after integration should not be a nan in calculate updates." && v132);
                } else {
                }
                float v135;
                v135 = v129 * v130;
                assert("Tensor range check" && 0 <= v127 && v127 < 4);
                float * v136;
                v136 = v39+v127;
                float * v138;
                v138 = v41+v127;
                float v140;
                v140 = atomicAdd(v136,v135);
                float v141;
                v141 = atomicAdd(v138,v130);
                v127 += 1 ;
            }
            int v142;
            v142 = threadIdx.x;
            int v143;
            v143 = blockIdx.x;
            int v144;
            v144 = v143 * 256;
            int v145;
            v145 = v142 + v144;
            int v146;
            v146 = 0;
            while (while_method_3(v146)){
                assert("Tensor range check" && 0 <= v146 && v146 < 4);
                int v148;
                v148 = 12288 * v146;
                assert("Tensor range check" && 0 <= v145 && v145 < 6144);
                int v149;
                v149 = 2 * v145;
                int v150;
                v150 = v149 + v148;
                double * v151;
                v151 = v43+v150;
                double * v153;
                v153 = v45+v150;
                double * v155;
                v155 = v43+v150;
                double * v157;
                v157 = v45+v150;
                int v159;
                v159 = sizeof(double *);
                unsigned long long v160;
                v160 = (unsigned long long)v159;
                unsigned long long v161;
                v161 = 256ull * v160;
                unsigned long long v162;
                v162 = v161 + 16ull;
                unsigned long long v163;
                v163 = v162 - 1ull;
                unsigned long long v164;
                v164 = v163 % 16ull;
                unsigned long long v165;
                v165 = v163 - v164;
                unsigned long long v166;
                v166 = v165 + v161;
                unsigned long long v167;
                v167 = v166 + 16ull;
                unsigned long long v168;
                v168 = v167 - 1ull;
                unsigned long long v169;
                v169 = v168 % 16ull;
                unsigned long long v170;
                v170 = v168 - v169;
                unsigned long long v171;
                v171 = v170 + v161;
                unsigned long long v172;
                v172 = v171 + 16ull;
                unsigned long long v173;
                v173 = v172 - 1ull;
                unsigned long long v174;
                v174 = v173 % 16ull;
                unsigned long long v175;
                v175 = v173 - v174;
                unsigned long long v176;
                v176 = v175 + v161;
                bool v177;
                v177 = v176 <= 98304ull;
                bool v178;
                v178 = v177 == false;
                if (v178){
                    assert("The dynamic shared memory is insufficient to allocate the tensor." && v177);
                } else {
                }
                extern __shared__ unsigned char v180[];
                bool v181;
                v181 = v176 <= v176;
                bool v182;
                v182 = v181 == false;
                if (v182){
                    assert("The length of the partition has to be less than or equal to the length of the base array." && v181);
                } else {
                }
                double * * v184;
                v184 = reinterpret_cast<double * *>(&v180[0ull]);
                double * * v186;
                v186 = reinterpret_cast<double * *>(&v180[v165]);
                double * * v188;
                v188 = reinterpret_cast<double * *>(&v180[v170]);
                double * * v190;
                v190 = reinterpret_cast<double * *>(&v180[v175]);
                int v192;
                v192 = threadIdx.x;
                assert("Tensor range check" && 0 <= v192 && v192 < 256);
                v184[v192] = v151;
                v186[v192] = v153;
                v188[v192] = v155;
                v190[v192] = v157;
                __syncthreads();
                bool v193;
                v193 = 0 <= v192;
                bool v194;
                v194 = v193 == false;
                if (v194){
                    assert("The index needs to be zero or positive." && v193);
                } else {
                }
                int v196;
                v196 = v192 % 1;
                bool v197;
                v197 = v192 < 256;
                bool v198;
                v198 = v197 == false;
                if (v198){
                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v197);
                } else {
                }
                assert("Tensor range check" && 0 <= v192 && v192 < 256);
                int v200;
                v200 = 0;
                while (while_method_6(v200)){
                    bool v202;
                    v202 = v193 && v197;
                    bool v203;
                    v203 = v202 == false;
                    if (v203){
                        assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v202);
                    } else {
                    }
                    bool v205;
                    v205 = 0 <= v200;
                    bool v207;
                    if (v205){
                        bool v206;
                        v206 = v200 < 1;
                        v207 = v206;
                    } else {
                        v207 = false;
                    }
                    bool v208;
                    v208 = v207 == false;
                    if (v208){
                        assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v207);
                    } else {
                    }
                    int v210;
                    v210 = v200 * 256;
                    int v211;
                    v211 = v210 + v192;
                    assert("Tensor range check" && 0 <= v200 && v200 < 1);
                    int v212;
                    v212 = 256 * v200;
                    int v213;
                    v213 = v212 + v192;
                    double * v214;
                    v214 = v184[v213];
                    double * v215;
                    v215 = v186[v213];
                    double * v216;
                    v216 = v188[v213];
                    double * v217;
                    v217 = v190[v213];
                    int v218;
                    v218 = blockIdx.x;
                    int v219;
                    v219 = v218 * 256;
                    int v220;
                    v220 = v219 + v211;
                    assert("Tensor range check" && 0 <= v196 && v196 < 1);
                    int v221;
                    v221 = 2 * v196;
                    double v222[2];
                    double v223[2];
                    int v224[2];
                    int v225;
                    v225 = 0;
                    while (while_method_6(v225)){
                        assert("Tensor range check" && 0 <= v225 && v225 < 1);
                        int v227;
                        v227 = 2 * v225;
                        assert("Tensor range check" && 0 <= v225 && v225 < 1);
                        int v228;
                        v228 = v227 + v221;
                        int4* v229;
                        v229 = reinterpret_cast<int4*>(v214 + v228);
                        int4* v230;
                        v230 = reinterpret_cast<int4*>(v222 + v227);
                        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v229) % 16 == 0 && reinterpret_cast<unsigned long long>(v230) % 16 == 0);
                        *v230 = *v229;
                        int4* v231;
                        v231 = reinterpret_cast<int4*>(v215 + v228);
                        int4* v232;
                        v232 = reinterpret_cast<int4*>(v223 + v227);
                        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v231) % 16 == 0 && reinterpret_cast<unsigned long long>(v232) % 16 == 0);
                        *v232 = *v231;
                        v225 += 1 ;
                    }
                    int v233;
                    v233 = 0;
                    while (while_method_6(v233)){
                        int v235;
                        v235 = 0;
                        while (while_method_0(v235)){
                            bool v237;
                            v237 = 0 <= v235;
                            bool v239;
                            if (v237){
                                bool v238;
                                v238 = v235 < 2;
                                v239 = v238;
                            } else {
                                v239 = false;
                            }
                            bool v240;
                            v240 = v239 == false;
                            if (v240){
                                assert("The indices should be inside the range of the dimension." && v239);
                            } else {
                            }
                            bool v242;
                            v242 = 0 <= v196;
                            bool v244;
                            if (v242){
                                bool v243;
                                v243 = v196 < 1;
                                v244 = v243;
                            } else {
                                v244 = false;
                            }
                            bool v245;
                            v245 = v244 == false;
                            if (v245){
                                assert("The indices should be inside the range of the dimension." && v244);
                            } else {
                            }
                            int v247;
                            v247 = v196 * 2;
                            int v248;
                            v248 = v235 + v247;
                            bool v249;
                            v249 = 0 <= v233;
                            bool v251;
                            if (v249){
                                bool v250;
                                v250 = v233 < 1;
                                v251 = v250;
                            } else {
                                v251 = false;
                            }
                            bool v252;
                            v252 = v251 == false;
                            if (v252){
                                assert("The indices should be inside the range of the dimension." && v251);
                            } else {
                            }
                            int v254;
                            v254 = v233 * 2;
                            int v255;
                            v255 = v248 + v254;
                            assert("Tensor range check" && 0 <= v233 && v233 < 1);
                            assert("Tensor range check" && 0 <= v235 && v235 < 2);
                            int v256;
                            v256 = 2 * v233;
                            int v257;
                            v257 = v256 + v235;
                            v224[v257] = v255;
                            v235 += 1 ;
                        }
                        v233 += 1 ;
                    }
                    double v258[2];
                    double v259[2];
                    int v260;
                    v260 = 0;
                    while (while_method_6(v260)){
                        int v262;
                        v262 = 0;
                        while (while_method_0(v262)){
                            assert("Tensor range check" && 0 <= v260 && v260 < 1);
                            assert("Tensor range check" && 0 <= v262 && v262 < 2);
                            int v264;
                            v264 = 2 * v260;
                            int v265;
                            v265 = v264 + v262;
                            double v266;
                            v266 = v222[v265];
                            double v267;
                            v267 = v223[v265];
                            assert("Tensor range check" && 0 <= v260 && v260 < 1);
                            assert("Tensor range check" && 0 <= v262 && v262 < 2);
                            v258[v265] = 0.0;
                            v259[v265] = 0.0;
                            v262 += 1 ;
                        }
                        v260 += 1 ;
                    }
                    int v268;
                    v268 = 0;
                    while (while_method_6(v268)){
                        assert("Tensor range check" && 0 <= v268 && v268 < 1);
                        int v270;
                        v270 = 2 * v268;
                        int v271;
                        v271 = v270 + v221;
                        assert("Tensor range check" && 0 <= v268 && v268 < 1);
                        int4* v272;
                        v272 = reinterpret_cast<int4*>(v258 + v270);
                        int4* v273;
                        v273 = reinterpret_cast<int4*>(v216 + v271);
                        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v272) % 16 == 0 && reinterpret_cast<unsigned long long>(v273) % 16 == 0);
                        *v273 = *v272;
                        int4* v274;
                        v274 = reinterpret_cast<int4*>(v259 + v270);
                        int4* v275;
                        v275 = reinterpret_cast<int4*>(v217 + v271);
                        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v274) % 16 == 0 && reinterpret_cast<unsigned long long>(v275) % 16 == 0);
                        *v275 = *v274;
                        v268 += 1 ;
                    }
                    assert("Tensor range check" && 0 <= v211 && v211 < 256);
                    v200 += 1 ;
                }
                __syncthreads();
                assert("Tensor range check" && 0 <= v192 && v192 < 256);
                __syncthreads();
                v146 += 1 ;
            }
            Union4 v276;
            v276 = Union4{Union4_2{}};
            method_84(v0, v1, v2, v26, v276);
            double * v277;
            v277 = reinterpret_cast<double *>(&v1[58195968ull]);
            double * v279;
            v279 = reinterpret_cast<double *>(&v1[58589184ull]);
            int v281;
            v281 = threadIdx.x;
            int v282;
            v282 = blockIdx.x;
            int v283;
            v283 = v282 * 256;
            int v284;
            v284 = v281 + v283;
            assert("Tensor range check" && 0 <= v284 && v284 < 6144);
            int v285;
            v285 = 2 * v284;
            static_array<float,2> & v286 = v26.v4;
            float v287[2];
            int v288;
            v288 = 0;
            while (while_method_0(v288)){
                bool v290;
                v290 = 0 <= v288;
                bool v292;
                if (v290){
                    bool v291;
                    v291 = v288 < 2;
                    v292 = v291;
                } else {
                    v292 = false;
                }
                bool v293;
                v293 = v292 == false;
                if (v293){
                    assert("Index must be in range." && v292);
                } else {
                }
                float v295;
                v295 = v286[v288];
                assert("Tensor range check" && 0 <= v288 && v288 < 2);
                v287[v288] = v295;
                v288 += 1 ;
            }
            int * v297;
            v297 = reinterpret_cast<int *>(&v0[2097152ull]);
            bool * v299;
            v299 = reinterpret_cast<bool *>(&v0[2097168ull]);
            float * v301;
            v301 = reinterpret_cast<float *>(&v0[2097184ull]);
            float * v303;
            v303 = reinterpret_cast<float *>(&v0[2097200ull]);
            double v305[2];
            int v306;
            v306 = 0;
            while (while_method_0(v306)){
                int v308; double v309;
                Tuple23 tmp158 = Tuple23{0, 0.0};
                v308 = tmp158.v0; v309 = tmp158.v1;
                while (while_method_3(v308)){
                    assert("Tensor range check" && 0 <= v308 && v308 < 4);
                    bool v311;
                    v311 = v299[v308];
                    bool v312;
                    v312 = v311 == false;
                    double v320;
                    if (v312){
                        v320 = 0.0;
                    } else {
                        assert("Tensor range check" && 0 <= v308 && v308 < 4);
                        assert("Tensor range check" && 0 <= v306 && v306 < 2);
                        int v313;
                        v313 = v306 + v285;
                        int v314;
                        v314 = 12288 * v308;
                        int v315;
                        v315 = v314 + v313;
                        double v316;
                        v316 = v277[v315];
                        double v317;
                        v317 = v279[v315];
                        double v318;
                        v318 = v316 - v317;
                        double v319;
                        v319 = exp(v318);
                        v320 = v319;
                    }
                    double v321;
                    v321 = v309 + v320;
                    v309 = v321;
                    v308 += 1 ;
                }
                assert("Tensor range check" && 0 <= v306 && v306 < 2);
                v305[v306] = v309;
                v306 += 1 ;
            }
            double v322;
            v322 = 1.0;
            int v323;
            v323 = 0;
            while (while_method_0(v323)){
                assert("Tensor range check" && 0 <= v323 && v323 < 2);
                double v325;
                v325 = v305[v323];
                double v326;
                v326 = v322 * v325;
                v322 = v326;
                v323 += 1 ;
            }
            double v327[8];
            int v328;
            v328 = 0;
            while (while_method_3(v328)){
                int v330;
                v330 = 0;
                while (while_method_0(v330)){
                    bool v332;
                    v332 = v322 == 0.0;
                    bool v333;
                    v333 = v332 != true;
                    double v344;
                    if (v333){
                        assert("Tensor range check" && 0 <= v330 && v330 < 2);
                        double v334;
                        v334 = v305[v330];
                        double v335;
                        v335 = v322 / v334;
                        assert("Tensor range check" && 0 <= v328 && v328 < 4);
                        assert("Tensor range check" && 0 <= v330 && v330 < 2);
                        int v336;
                        v336 = v330 + v285;
                        int v337;
                        v337 = 12288 * v328;
                        int v338;
                        v338 = v337 + v336;
                        double v339;
                        v339 = v277[v338];
                        double v340;
                        v340 = v279[v338];
                        double v341;
                        v341 = v339 - v340;
                        double v342;
                        v342 = exp(v341);
                        double v343;
                        v343 = v335 * v342;
                        v344 = v343;
                    } else {
                        v344 = 0.0;
                    }
                    bool v345;
                    v345 = isnan(v344);
                    bool v346;
                    v346 = v345 == false;
                    bool v347;
                    v347 = v346 == false;
                    if (v347){
                        assert("The path probability after integration should not be a nan in integrate_rewards_." && v346);
                    } else {
                    }
                    assert("Tensor range check" && 0 <= v328 && v328 < 4);
                    assert("Tensor range check" && 0 <= v330 && v330 < 2);
                    int v349;
                    v349 = 2 * v328;
                    int v350;
                    v350 = v349 + v330;
                    v327[v350] = v344;
                    v330 += 1 ;
                }
                v328 += 1 ;
            }
            float v351[4];
            float v352[4];
            int v353;
            v353 = 0;
            while (while_method_3(v353)){
                int v355; float v356; double v357;
                Tuple24 tmp159 = Tuple24{0, 0.0f, 0.0};
                v355 = tmp159.v0; v356 = tmp159.v1; v357 = tmp159.v2;
                while (while_method_0(v355)){
                    assert("Tensor range check" && 0 <= v353 && v353 < 4);
                    assert("Tensor range check" && 0 <= v355 && v355 < 2);
                    int v359;
                    v359 = 2 * v353;
                    int v360;
                    v360 = v359 + v355;
                    double v361;
                    v361 = v327[v360];
                    assert("Tensor range check" && 0 <= v355 && v355 < 2);
                    float v362;
                    v362 = v287[v355];
                    float v363;
                    v363 = (float)v361;
                    float v364;
                    v364 = v363 * v362;
                    float v365;
                    v365 = v356 + v364;
                    double v366;
                    v366 = v357 + v361;
                    v356 = v365;
                    v357 = v366;
                    v355 += 1 ;
                }
                float v367;
                v367 = (float)v357;
                assert("Tensor range check" && 0 <= v353 && v353 < 4);
                v351[v353] = v356;
                v352[v353] = v367;
                v353 += 1 ;
            }
            int v368;
            v368 = 0;
            while (while_method_3(v368)){
                assert("Tensor range check" && 0 <= v368 && v368 < 4);
                float v370;
                v370 = v351[v368];
                float v371;
                v371 = v352[v368];
                assert("Tensor range check" && 0 <= v368 && v368 < 4);
                assert("Tensor range check" && 0 <= v27 && v27 < 1024);
                int v372;
                v372 = 1024 * v368;
                int v373;
                v373 = v372 + v27;
                float * v374;
                v374 = v3+v373;
                float * v376;
                v376 = v4+v373;
                float v378;
                v378 = atomicAdd(v374,v370);
                float v379;
                v379 = atomicAdd(v376,v371);
                v368 += 1 ;
            }
            double * v380;
            v380 = reinterpret_cast<double *>(&v1[58195968ull]);
            double * v382;
            v382 = reinterpret_cast<double *>(&v1[58589184ull]);
            int v384;
            v384 = threadIdx.x;
            int v385;
            v385 = blockIdx.x;
            int v386;
            v386 = v385 * 256;
            int v387;
            v387 = v384 + v386;
            int v388;
            v388 = 0;
            while (while_method_3(v388)){
                assert("Tensor range check" && 0 <= v388 && v388 < 4);
                int v390;
                v390 = 12288 * v388;
                assert("Tensor range check" && 0 <= v387 && v387 < 6144);
                int v391;
                v391 = 2 * v387;
                int v392;
                v392 = v391 + v390;
                double * v393;
                v393 = v380+v392;
                double * v395;
                v395 = v382+v392;
                double * v397;
                v397 = v380+v392;
                double * v399;
                v399 = v382+v392;
                int v401;
                v401 = sizeof(double *);
                unsigned long long v402;
                v402 = (unsigned long long)v401;
                unsigned long long v403;
                v403 = 256ull * v402;
                unsigned long long v404;
                v404 = v403 + 16ull;
                unsigned long long v405;
                v405 = v404 - 1ull;
                unsigned long long v406;
                v406 = v405 % 16ull;
                unsigned long long v407;
                v407 = v405 - v406;
                unsigned long long v408;
                v408 = v407 + v403;
                unsigned long long v409;
                v409 = v408 + 16ull;
                unsigned long long v410;
                v410 = v409 - 1ull;
                unsigned long long v411;
                v411 = v410 % 16ull;
                unsigned long long v412;
                v412 = v410 - v411;
                unsigned long long v413;
                v413 = v412 + v403;
                unsigned long long v414;
                v414 = v413 + 16ull;
                unsigned long long v415;
                v415 = v414 - 1ull;
                unsigned long long v416;
                v416 = v415 % 16ull;
                unsigned long long v417;
                v417 = v415 - v416;
                unsigned long long v418;
                v418 = v417 + v403;
                bool v419;
                v419 = v418 <= 98304ull;
                bool v420;
                v420 = v419 == false;
                if (v420){
                    assert("The dynamic shared memory is insufficient to allocate the tensor." && v419);
                } else {
                }
                extern __shared__ unsigned char v422[];
                bool v423;
                v423 = v418 <= v418;
                bool v424;
                v424 = v423 == false;
                if (v424){
                    assert("The length of the partition has to be less than or equal to the length of the base array." && v423);
                } else {
                }
                double * * v426;
                v426 = reinterpret_cast<double * *>(&v422[0ull]);
                double * * v428;
                v428 = reinterpret_cast<double * *>(&v422[v407]);
                double * * v430;
                v430 = reinterpret_cast<double * *>(&v422[v412]);
                double * * v432;
                v432 = reinterpret_cast<double * *>(&v422[v417]);
                int v434;
                v434 = threadIdx.x;
                assert("Tensor range check" && 0 <= v434 && v434 < 256);
                v426[v434] = v393;
                v428[v434] = v395;
                v430[v434] = v397;
                v432[v434] = v399;
                __syncthreads();
                bool v435;
                v435 = 0 <= v434;
                bool v436;
                v436 = v435 == false;
                if (v436){
                    assert("The index needs to be zero or positive." && v435);
                } else {
                }
                int v438;
                v438 = v434 % 1;
                bool v439;
                v439 = v434 < 256;
                bool v440;
                v440 = v439 == false;
                if (v440){
                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v439);
                } else {
                }
                assert("Tensor range check" && 0 <= v434 && v434 < 256);
                int v442;
                v442 = 0;
                while (while_method_6(v442)){
                    bool v444;
                    v444 = v435 && v439;
                    bool v445;
                    v445 = v444 == false;
                    if (v445){
                        assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v444);
                    } else {
                    }
                    bool v447;
                    v447 = 0 <= v442;
                    bool v449;
                    if (v447){
                        bool v448;
                        v448 = v442 < 1;
                        v449 = v448;
                    } else {
                        v449 = false;
                    }
                    bool v450;
                    v450 = v449 == false;
                    if (v450){
                        assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v449);
                    } else {
                    }
                    int v452;
                    v452 = v442 * 256;
                    int v453;
                    v453 = v452 + v434;
                    assert("Tensor range check" && 0 <= v442 && v442 < 1);
                    int v454;
                    v454 = 256 * v442;
                    int v455;
                    v455 = v454 + v434;
                    double * v456;
                    v456 = v426[v455];
                    double * v457;
                    v457 = v428[v455];
                    double * v458;
                    v458 = v430[v455];
                    double * v459;
                    v459 = v432[v455];
                    int v460;
                    v460 = blockIdx.x;
                    int v461;
                    v461 = v460 * 256;
                    int v462;
                    v462 = v461 + v453;
                    assert("Tensor range check" && 0 <= v438 && v438 < 1);
                    int v463;
                    v463 = 2 * v438;
                    double v464[2];
                    double v465[2];
                    int v466[2];
                    int v467;
                    v467 = 0;
                    while (while_method_6(v467)){
                        assert("Tensor range check" && 0 <= v467 && v467 < 1);
                        int v469;
                        v469 = 2 * v467;
                        assert("Tensor range check" && 0 <= v467 && v467 < 1);
                        int v470;
                        v470 = v469 + v463;
                        int4* v471;
                        v471 = reinterpret_cast<int4*>(v456 + v470);
                        int4* v472;
                        v472 = reinterpret_cast<int4*>(v464 + v469);
                        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v471) % 16 == 0 && reinterpret_cast<unsigned long long>(v472) % 16 == 0);
                        *v472 = *v471;
                        int4* v473;
                        v473 = reinterpret_cast<int4*>(v457 + v470);
                        int4* v474;
                        v474 = reinterpret_cast<int4*>(v465 + v469);
                        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v473) % 16 == 0 && reinterpret_cast<unsigned long long>(v474) % 16 == 0);
                        *v474 = *v473;
                        v467 += 1 ;
                    }
                    int v475;
                    v475 = 0;
                    while (while_method_6(v475)){
                        int v477;
                        v477 = 0;
                        while (while_method_0(v477)){
                            bool v479;
                            v479 = 0 <= v477;
                            bool v481;
                            if (v479){
                                bool v480;
                                v480 = v477 < 2;
                                v481 = v480;
                            } else {
                                v481 = false;
                            }
                            bool v482;
                            v482 = v481 == false;
                            if (v482){
                                assert("The indices should be inside the range of the dimension." && v481);
                            } else {
                            }
                            bool v484;
                            v484 = 0 <= v438;
                            bool v486;
                            if (v484){
                                bool v485;
                                v485 = v438 < 1;
                                v486 = v485;
                            } else {
                                v486 = false;
                            }
                            bool v487;
                            v487 = v486 == false;
                            if (v487){
                                assert("The indices should be inside the range of the dimension." && v486);
                            } else {
                            }
                            int v489;
                            v489 = v438 * 2;
                            int v490;
                            v490 = v477 + v489;
                            bool v491;
                            v491 = 0 <= v475;
                            bool v493;
                            if (v491){
                                bool v492;
                                v492 = v475 < 1;
                                v493 = v492;
                            } else {
                                v493 = false;
                            }
                            bool v494;
                            v494 = v493 == false;
                            if (v494){
                                assert("The indices should be inside the range of the dimension." && v493);
                            } else {
                            }
                            int v496;
                            v496 = v475 * 2;
                            int v497;
                            v497 = v490 + v496;
                            assert("Tensor range check" && 0 <= v475 && v475 < 1);
                            assert("Tensor range check" && 0 <= v477 && v477 < 2);
                            int v498;
                            v498 = 2 * v475;
                            int v499;
                            v499 = v498 + v477;
                            v466[v499] = v497;
                            v477 += 1 ;
                        }
                        v475 += 1 ;
                    }
                    double v500[2];
                    double v501[2];
                    int v502;
                    v502 = 0;
                    while (while_method_6(v502)){
                        int v504;
                        v504 = 0;
                        while (while_method_0(v504)){
                            assert("Tensor range check" && 0 <= v502 && v502 < 1);
                            assert("Tensor range check" && 0 <= v504 && v504 < 2);
                            int v506;
                            v506 = 2 * v502;
                            int v507;
                            v507 = v506 + v504;
                            double v508;
                            v508 = v464[v507];
                            double v509;
                            v509 = v465[v507];
                            assert("Tensor range check" && 0 <= v502 && v502 < 1);
                            assert("Tensor range check" && 0 <= v504 && v504 < 2);
                            v500[v507] = 0.0;
                            v501[v507] = 0.0;
                            v504 += 1 ;
                        }
                        v502 += 1 ;
                    }
                    int v510;
                    v510 = 0;
                    while (while_method_6(v510)){
                        assert("Tensor range check" && 0 <= v510 && v510 < 1);
                        int v512;
                        v512 = 2 * v510;
                        int v513;
                        v513 = v512 + v463;
                        assert("Tensor range check" && 0 <= v510 && v510 < 1);
                        int4* v514;
                        v514 = reinterpret_cast<int4*>(v500 + v512);
                        int4* v515;
                        v515 = reinterpret_cast<int4*>(v458 + v513);
                        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v514) % 16 == 0 && reinterpret_cast<unsigned long long>(v515) % 16 == 0);
                        *v515 = *v514;
                        int4* v516;
                        v516 = reinterpret_cast<int4*>(v501 + v512);
                        int4* v517;
                        v517 = reinterpret_cast<int4*>(v459 + v513);
                        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v516) % 16 == 0 && reinterpret_cast<unsigned long long>(v517) % 16 == 0);
                        *v517 = *v516;
                        v510 += 1 ;
                    }
                    assert("Tensor range check" && 0 <= v453 && v453 < 256);
                    v442 += 1 ;
                }
                __syncthreads();
                assert("Tensor range check" && 0 <= v434 && v434 < 256);
                __syncthreads();
                v388 += 1 ;
            }
            v29 += 1 ;
        }
        cooperative_groups::grid_group & v518 = v26.v1;
        cooperative_groups::grid_group & v519 = v518;
        curandStatePhilox4_32_10_t & v520 = v26.v5;
        curandStatePhilox4_32_10_t & v521 = v520;
        float * v522;
        v522 = reinterpret_cast<float *>(&v0[0ull]);
        float * v524;
        v524 = reinterpret_cast<float *>(&v2[0ull]);
        float * v526;
        v526 = reinterpret_cast<float *>(&v1[51904512ull]);
        int * v528;
        v528 = reinterpret_cast<int *>(&v0[2097152ull]);
        bool * v530;
        v530 = reinterpret_cast<bool *>(&v0[2097168ull]);
        float * v532;
        v532 = reinterpret_cast<float *>(&v0[2097184ull]);
        float * v534;
        v534 = reinterpret_cast<float *>(&v0[2097200ull]);
        double * v536;
        v536 = reinterpret_cast<double *>(&v1[58195968ull]);
        double * v538;
        v538 = reinterpret_cast<double *>(&v1[58589184ull]);
        v519.sync() ;
        int v540;
        v540 = threadIdx.x;
        int v541;
        v541 = blockIdx.x;
        int v542;
        v542 = v541 * 256;
        int v543;
        v543 = v540 + v542;
        bool v544;
        v544 = v543 == 0;
        if (v544){
            int v545;
            v545 = 0;
            int v546;
            v546 = 4;
            int v547;
            v547 = int_range_44(v546, v545, v521);
            v528[0] = v547;
        } else {
        }
        __syncwarp();
        float v548[4];
        int v549;
        v549 = 0;
        while (while_method_3(v549)){
            assert("Tensor range check" && 0 <= v549 && v549 < 4);
            float v551;
            v551 = v532[v549];
            float v552;
            v552 = v534[v549];
            bool v553;
            v553 = v552 == 0.0f;
            bool v554;
            v554 = v553 != true;
            float v556;
            if (v554){
                float v555;
                v555 = v551 / v552;
                v556 = v555;
            } else {
                v556 = 0.0f;
            }
            assert("Tensor range check" && 0 <= v549 && v549 < 4);
            v548[v549] = v556;
            v549 += 1 ;
        }
        float v557;
        v557 = 0.0f;
        int v558;
        v558 = 0;
        while (while_method_3(v558)){
            assert("Tensor range check" && 0 <= v558 && v558 < 4);
            float v560;
            v560 = v548[v558];
            float v561;
            v561 = v557 + v560;
            v557 = v561;
            v558 += 1 ;
        }
        float v562;
        v562 = v557 / 4.0f;
        int v563;
        v563 = 0;
        while (while_method_3(v563)){
            assert("Tensor range check" && 0 <= v563 && v563 < 4);
            v532[v563] = 0.0f;
            v534[v563] = 0.0f;
            v563 += 1 ;
        }
        bool v565[4];
        int v566;
        v566 = 0;
        while (while_method_3(v566)){
            assert("Tensor range check" && 0 <= v566 && v566 < 4);
            float v568;
            v568 = v548[v566];
            bool v569;
            v569 = v568 >= v562;
            assert("Tensor range check" && 0 <= v566 && v566 < 4);
            v565[v566] = v569;
            v566 += 1 ;
        }
        int v570;
        v570 = 0;
        while (while_method_3(v570)){
            assert("Tensor range check" && 0 <= v570 && v570 < 4);
            bool v572;
            v572 = v565[v570];
            assert("Tensor range check" && 0 <= v570 && v570 < 4);
            v530[v570] = v572;
            v570 += 1 ;
        }
        extern __shared__ unsigned char v573[];
        float * v574;
        v574 = reinterpret_cast<float *>(&v573[0ull]);
        int v576;
        v576 = blockIdx.x;
        int v577;
        v577 = v576;
        while (while_method_23(v577)){
            bool v579;
            v579 = 0 <= v577;
            bool v580;
            v580 = v579 == false;
            if (v580){
                assert("The index needs to be zero or positive." && v579);
            } else {
            }
            int v582;
            v582 = v577 % 256;
            int v583;
            v583 = v577 / 256;
            bool v584;
            v584 = v583 < 1;
            bool v585;
            v585 = v584 == false;
            if (v585){
                assert("The last element of the projection dimensions needs to be greater than the index remainder." && v584);
            } else {
            }
            assert("Tensor range check" && 0 <= v583 && v583 < 1);
            assert("Tensor range check" && 0 <= v582 && v582 < 256);
            int v587;
            v587 = 512 * v582;
            int v588;
            v588 = 524288 * v583;
            int v589;
            v589 = v588 + v587;
            int v590;
            v590 = 2048 * v582;
            int v591;
            v591 = 4 * v583;
            int v592;
            v592 = v591 + v590;
            int v593;
            v593 = threadIdx.x;
            int v594;
            v594 = v593;
            while (while_method_24(v594)){
                bool v596;
                v596 = 0 <= v594;
                bool v597;
                v597 = v596 == false;
                if (v597){
                    assert("The index needs to be zero or positive." && v596);
                } else {
                }
                int v599;
                v599 = v594 % 512;
                int v600;
                v600 = v594 / 512;
                bool v601;
                v601 = v600 < 4;
                bool v602;
                v602 = v601 == false;
                if (v602){
                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v601);
                } else {
                }
                assert("Tensor range check" && 0 <= v600 && v600 < 4);
                assert("Tensor range check" && 0 <= v599 && v599 < 512);
                int v604;
                v604 = v599 + v589;
                int v605;
                v605 = 131072 * v600;
                int v606;
                v606 = v605 + v604;
                float v607;
                v607 = v522[v606];
                assert("Tensor range check" && 0 <= v600 && v600 < 4);
                assert("Tensor range check" && 0 <= v599 && v599 < 512);
                int v608;
                v608 = 513 * v600;
                int v609;
                v609 = v608 + v599;
                v574[v609] = v607;
                v594 += 256 ;
            }
            __syncthreads();
            int v610;
            v610 = threadIdx.x;
            int v611;
            v611 = v610;
            while (while_method_24(v611)){
                bool v613;
                v613 = 0 <= v611;
                bool v614;
                v614 = v613 == false;
                if (v614){
                    assert("The index needs to be zero or positive." && v613);
                } else {
                }
                int v616;
                v616 = v611 % 4;
                int v617;
                v617 = v611 / 4;
                bool v618;
                v618 = v617 < 512;
                bool v619;
                v619 = v618 == false;
                if (v619){
                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v618);
                } else {
                }
                assert("Tensor range check" && 0 <= v617 && v617 < 512);
                assert("Tensor range check" && 0 <= v616 && v616 < 4);
                int v621;
                v621 = 513 * v616;
                int v622;
                v622 = v617 + v621;
                float v623;
                v623 = v574[v622];
                assert("Tensor range check" && 0 <= v617 && v617 < 512);
                assert("Tensor range check" && 0 <= v616 && v616 < 4);
                int v624;
                v624 = v616 + v592;
                int v625;
                v625 = 4 * v617;
                int v626;
                v626 = v625 + v624;
                v524[v626] = v623;
                v611 += 256 ;
            }
            __syncthreads();
            v577 += 24 ;
        }
        v519.sync() ;
        int v627;
        v627 = threadIdx.x;
        bool v628;
        v628 = 0 <= v627;
        bool v629;
        v629 = v628 == false;
        if (v629){
            assert("The index needs to be zero or positive." && v628);
        } else {
        }
        int v631;
        v631 = v627 % 1;
        int v632;
        v632 = v627 % 256;
        int v633;
        v633 = v627 / 256;
        bool v634;
        v634 = v633 < 1;
        bool v635;
        v635 = v634 == false;
        if (v635){
            assert("The last element of the projection dimensions needs to be greater than the index remainder." && v634);
        } else {
        }
        assert("Tensor range check" && 0 <= v633 && v633 < 1);
        assert("Tensor range check" && 0 <= v632 && v632 < 256);
        assert("Tensor range check" && 0 <= v631 && v631 < 1);
        int v637;
        v637 = 4 * v631;
        int v638;
        v638 = 4 * v632;
        int v639;
        v639 = v638 + v637;
        int v640;
        v640 = 8192 * v633;
        int v641;
        v641 = v640 + v639;
        assert("Tensor range check" && 0 <= v633 && v633 < 1);
        assert("Tensor range check" && 0 <= v632 && v632 < 256);
        assert("Tensor range check" && 0 <= v631 && v631 < 1);
        int v642;
        v642 = blockIdx.x;
        int v643;
        v643 = v642;
        while (while_method_25(v643)){
            bool v645;
            v645 = 0 <= v643;
            bool v646;
            v646 = v645 == false;
            if (v646){
                assert("The index needs to be zero or positive." && v645);
            } else {
            }
            int v648;
            v648 = v643 % 8;
            int v649;
            v649 = v643 / 8;
            bool v650;
            v650 = v649 < 64;
            bool v651;
            v651 = v650 == false;
            if (v651){
                assert("The last element of the projection dimensions needs to be greater than the index remainder." && v650);
            } else {
            }
            assert("Tensor range check" && 0 <= v649 && v649 < 64);
            assert("Tensor range check" && 0 <= v648 && v648 < 8);
            int v653;
            v653 = 1024 * v648;
            int v654;
            v654 = v653 + v641;
            int v655;
            v655 = 8192 * v649;
            int v656;
            v656 = v655 + v654;
            float v657[4];
            int v658[4];
            int v659;
            v659 = 0;
            while (while_method_6(v659)){
                assert("Tensor range check" && 0 <= v659 && v659 < 1);
                int v661;
                v661 = 4 * v659;
                assert("Tensor range check" && 0 <= v659 && v659 < 1);
                int v662;
                v662 = v661 + v656;
                int4* v663;
                v663 = reinterpret_cast<int4*>(v524 + v662);
                int4* v664;
                v664 = reinterpret_cast<int4*>(v657 + v661);
                assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v663) % 16 == 0 && reinterpret_cast<unsigned long long>(v664) % 16 == 0);
                *v664 = *v663;
                v659 += 1 ;
            }
            int v665;
            v665 = 0;
            while (while_method_6(v665)){
                int v667;
                v667 = 0;
                while (while_method_3(v667)){
                    bool v669;
                    v669 = 0 <= v667;
                    bool v671;
                    if (v669){
                        bool v670;
                        v670 = v667 < 4;
                        v671 = v670;
                    } else {
                        v671 = false;
                    }
                    bool v672;
                    v672 = v671 == false;
                    if (v672){
                        assert("The indices should be inside the range of the dimension." && v671);
                    } else {
                    }
                    bool v674;
                    v674 = 0 <= v631;
                    bool v676;
                    if (v674){
                        bool v675;
                        v675 = v631 < 1;
                        v676 = v675;
                    } else {
                        v676 = false;
                    }
                    bool v677;
                    v677 = v676 == false;
                    if (v677){
                        assert("The indices should be inside the range of the dimension." && v676);
                    } else {
                    }
                    int v679;
                    v679 = v631 * 4;
                    int v680;
                    v680 = v667 + v679;
                    bool v681;
                    v681 = 0 <= v665;
                    bool v683;
                    if (v681){
                        bool v682;
                        v682 = v665 < 1;
                        v683 = v682;
                    } else {
                        v683 = false;
                    }
                    bool v684;
                    v684 = v683 == false;
                    if (v684){
                        assert("The indices should be inside the range of the dimension." && v683);
                    } else {
                    }
                    int v686;
                    v686 = v665 * 4;
                    int v687;
                    v687 = v680 + v686;
                    assert("Tensor range check" && 0 <= v665 && v665 < 1);
                    assert("Tensor range check" && 0 <= v667 && v667 < 4);
                    int v688;
                    v688 = 4 * v665;
                    int v689;
                    v689 = v688 + v667;
                    v658[v689] = v687;
                    v667 += 1 ;
                }
                v665 += 1 ;
            }
            bool v690;
            v690 = 0 <= v633;
            bool v691;
            v691 = v690 && v634;
            bool v692;
            v692 = v691 == false;
            if (v692){
                assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v691);
            } else {
            }
            bool v694;
            v694 = 0 <= v632;
            bool v696;
            if (v694){
                bool v695;
                v695 = v632 < 256;
                v696 = v695;
            } else {
                v696 = false;
            }
            bool v697;
            v697 = v696 == false;
            if (v697){
                assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v696);
            } else {
            }
            bool v699;
            v699 = 0 <= v649;
            bool v700;
            v700 = v699 && v650;
            bool v701;
            v701 = v700 == false;
            if (v701){
                assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v700);
            } else {
            }
            bool v703;
            v703 = 0 <= v648;
            bool v705;
            if (v703){
                bool v704;
                v704 = v648 < 8;
                v705 = v704;
            } else {
                v705 = false;
            }
            bool v706;
            v706 = v705 == false;
            if (v706){
                assert("The rigid merge indices have to be greater than or equal to 0 and less than the dimensions." && v705);
            } else {
            }
            int v708;
            v708 = v648 * 256;
            int v709;
            v709 = v649 + v633;
            int v710;
            v710 = v708 + v632;
            bool v711[4];
            int v712;
            v712 = 0;
            while (while_method_6(v712)){
                int v714;
                v714 = 0;
                while (while_method_3(v714)){
                    assert("Tensor range check" && 0 <= v712 && v712 < 1);
                    assert("Tensor range check" && 0 <= v714 && v714 < 4);
                    int v716;
                    v716 = 4 * v712;
                    int v717;
                    v717 = v716 + v714;
                    int v718;
                    v718 = v658[v717];
                    assert("Tensor range check" && 0 <= v718 && v718 < 4);
                    bool v719;
                    v719 = v530[v718];
                    assert("Tensor range check" && 0 <= v712 && v712 < 1);
                    assert("Tensor range check" && 0 <= v714 && v714 < 4);
                    v711[v717] = v719;
                    v714 += 1 ;
                }
                v712 += 1 ;
            }
            int v720[4];
            int v721;
            v721 = 0;
            while (while_method_6(v721)){
                int v723;
                v723 = 0;
                while (while_method_3(v723)){
                    assert("Tensor range check" && 0 <= v721 && v721 < 1);
                    assert("Tensor range check" && 0 <= v723 && v723 < 4);
                    int v725;
                    v725 = 4 * v721;
                    int v726;
                    v726 = v725 + v723;
                    bool v727;
                    v727 = v711[v726];
                    int v728;
                    if (v727){
                        v728 = 1;
                    } else {
                        v728 = 0;
                    }
                    assert("Tensor range check" && 0 <= v721 && v721 < 1);
                    assert("Tensor range check" && 0 <= v723 && v723 < 4);
                    v720[v726] = v728;
                    v723 += 1 ;
                }
                v721 += 1 ;
            }
            int v729;
            v729 = 0;
            int v730;
            v730 = 0;
            while (while_method_6(v730)){
                int v732;
                v732 = 0;
                while (while_method_3(v732)){
                    assert("Tensor range check" && 0 <= v730 && v730 < 1);
                    assert("Tensor range check" && 0 <= v732 && v732 < 4);
                    int v734;
                    v734 = 4 * v730;
                    int v735;
                    v735 = v734 + v732;
                    int v736;
                    v736 = v720[v735];
                    int v737;
                    v737 = v729 + v736;
                    v729 = v737;
                    v732 += 1 ;
                }
                v730 += 1 ;
            }
            auto v738 = cooperative_groups::coalesced_threads();
            int v739;
            v739 = threadIdx.x;
            auto v740 = cooperative_groups::labeled_partition(v738,v739);
            Closure1 v741{};
            int v742;
            v742 = cooperative_groups::reduce(v740, v729, v741);
            float v743;
            v743 = (float)v742;
            float v744[4];
            int v745;
            v745 = 0;
            while (while_method_6(v745)){
                int v747;
                v747 = 0;
                while (while_method_3(v747)){
                    assert("Tensor range check" && 0 <= v745 && v745 < 1);
                    assert("Tensor range check" && 0 <= v747 && v747 < 4);
                    int v749;
                    v749 = 4 * v745;
                    int v750;
                    v750 = v749 + v747;
                    float v751;
                    v751 = v657[v750];
                    bool v752;
                    v752 = v711[v750];
                    float v753;
                    if (v752){
                        v753 = v751;
                    } else {
                        v753 = 0.0f;
                    }
                    assert("Tensor range check" && 0 <= v745 && v745 < 1);
                    assert("Tensor range check" && 0 <= v747 && v747 < 4);
                    v744[v750] = v753;
                    v747 += 1 ;
                }
                v745 += 1 ;
            }
            float v754;
            v754 = 0.0f;
            int v755;
            v755 = 0;
            while (while_method_6(v755)){
                int v757;
                v757 = 0;
                while (while_method_3(v757)){
                    assert("Tensor range check" && 0 <= v755 && v755 < 1);
                    assert("Tensor range check" && 0 <= v757 && v757 < 4);
                    int v759;
                    v759 = 4 * v755;
                    int v760;
                    v760 = v759 + v757;
                    float v761;
                    v761 = v744[v760];
                    float v762;
                    v762 = v754 + v761;
                    v754 = v762;
                    v757 += 1 ;
                }
                v755 += 1 ;
            }
            auto v763 = cooperative_groups::coalesced_threads();
            int v764;
            v764 = threadIdx.x;
            auto v765 = cooperative_groups::labeled_partition(v763,v764);
            Closure0 v766{};
            float v767;
            v767 = cooperative_groups::reduce(v765, v754, v766);
            float v768;
            v768 = v767 / v743;
            float v769[4];
            int v770;
            v770 = 0;
            while (while_method_6(v770)){
                int v772;
                v772 = 0;
                while (while_method_3(v772)){
                    assert("Tensor range check" && 0 <= v770 && v770 < 1);
                    assert("Tensor range check" && 0 <= v772 && v772 < 4);
                    int v774;
                    v774 = 4 * v770;
                    int v775;
                    v775 = v774 + v772;
                    float v776;
                    v776 = v657[v775];
                    float v777;
                    v777 = v776 - v768;
                    float v778;
                    v778 = v777 * v777;
                    assert("Tensor range check" && 0 <= v770 && v770 < 1);
                    assert("Tensor range check" && 0 <= v772 && v772 < 4);
                    v769[v775] = v778;
                    v772 += 1 ;
                }
                v770 += 1 ;
            }
            float v779[4];
            int v780;
            v780 = 0;
            while (while_method_6(v780)){
                int v782;
                v782 = 0;
                while (while_method_3(v782)){
                    assert("Tensor range check" && 0 <= v780 && v780 < 1);
                    assert("Tensor range check" && 0 <= v782 && v782 < 4);
                    int v784;
                    v784 = 4 * v780;
                    int v785;
                    v785 = v784 + v782;
                    float v786;
                    v786 = v769[v785];
                    bool v787;
                    v787 = v711[v785];
                    float v788;
                    if (v787){
                        v788 = v786;
                    } else {
                        v788 = 0.0f;
                    }
                    assert("Tensor range check" && 0 <= v780 && v780 < 1);
                    assert("Tensor range check" && 0 <= v782 && v782 < 4);
                    v779[v785] = v788;
                    v782 += 1 ;
                }
                v780 += 1 ;
            }
            float v789;
            v789 = 0.0f;
            int v790;
            v790 = 0;
            while (while_method_6(v790)){
                int v792;
                v792 = 0;
                while (while_method_3(v792)){
                    assert("Tensor range check" && 0 <= v790 && v790 < 1);
                    assert("Tensor range check" && 0 <= v792 && v792 < 4);
                    int v794;
                    v794 = 4 * v790;
                    int v795;
                    v795 = v794 + v792;
                    float v796;
                    v796 = v779[v795];
                    float v797;
                    v797 = v789 + v796;
                    v789 = v797;
                    v792 += 1 ;
                }
                v790 += 1 ;
            }
            auto v798 = cooperative_groups::coalesced_threads();
            int v799;
            v799 = threadIdx.x;
            auto v800 = cooperative_groups::labeled_partition(v798,v799);
            float v801;
            v801 = cooperative_groups::reduce(v800, v789, v766);
            float v802;
            v802 = v801 / v743;
            float v803;
            v803 = sqrt(v802);
            bool v804;
            v804 = v743 > 1.0f;
            float v808;
            if (v804){
                float v805;
                v805 = v803 * v743;
                float v806;
                v806 = v743 - 1.0f;
                float v807;
                v807 = v805 / v806;
                v808 = v807;
            } else {
                v808 = 0.0f;
            }
            float v809[4];
            int v810;
            v810 = 0;
            while (while_method_6(v810)){
                int v812;
                v812 = 0;
                while (while_method_3(v812)){
                    assert("Tensor range check" && 0 <= v810 && v810 < 1);
                    assert("Tensor range check" && 0 <= v812 && v812 < 4);
                    int v814;
                    v814 = 4 * v810;
                    int v815;
                    v815 = v814 + v812;
                    float v816;
                    v816 = v657[v815];
                    bool v817;
                    v817 = v711[v815];
                    float v818;
                    v818 = curand_normal(&v521);
                    bool v819;
                    v819 = v808 >= 0.1f;
                    float v820;
                    if (v819){
                        v820 = v808;
                    } else {
                        v820 = 0.1f;
                    }
                    float v821;
                    v821 = v818 * v820;
                    float v822;
                    v822 = v821 + v768;
                    float v823;
                    if (v817){
                        v823 = v816;
                    } else {
                        v823 = v822;
                    }
                    assert("Tensor range check" && 0 <= v810 && v810 < 1);
                    assert("Tensor range check" && 0 <= v812 && v812 < 4);
                    v809[v815] = v823;
                    v812 += 1 ;
                }
                v810 += 1 ;
            }
            assert("Tensor range check" && 0 <= v649 && v649 < 64);
            assert("Tensor range check" && 0 <= v648 && v648 < 8);
            int v824;
            v824 = 0;
            while (while_method_6(v824)){
                assert("Tensor range check" && 0 <= v824 && v824 < 1);
                int v826;
                v826 = 4 * v824;
                int v827;
                v827 = v826 + v656;
                assert("Tensor range check" && 0 <= v824 && v824 < 1);
                int4* v828;
                v828 = reinterpret_cast<int4*>(v809 + v826);
                int4* v829;
                v829 = reinterpret_cast<int4*>(v524 + v827);
                assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v828) % 16 == 0 && reinterpret_cast<unsigned long long>(v829) % 16 == 0);
                *v829 = *v828;
                v824 += 1 ;
            }
            v643 += 24 ;
        }
        v519.sync() ;
        static float v830[131072];
        int v831;
        v831 = threadIdx.x;
        int v832;
        v832 = blockIdx.x;
        int v833;
        v833 = v832 * 256;
        int v834;
        v834 = v831 + v833;
        int v835;
        v835 = v834 / 32;
        int v836;
        v836 = v835;
        while (while_method_26(v836)){
            bool v838;
            v838 = 0 <= v836;
            bool v839;
            v839 = v838 == false;
            if (v839){
                assert("The index needs to be zero or positive." && v838);
            } else {
            }
            int v841;
            v841 = v836 % 2048;
            int v842;
            v842 = v836 / 2048;
            bool v843;
            v843 = v842 < 64;
            bool v844;
            v844 = v843 == false;
            if (v844){
                assert("The last element of the projection dimensions needs to be greater than the index remainder." && v843);
            } else {
            }
            assert("Tensor range check" && 0 <= v842 && v842 < 64);
            assert("Tensor range check" && 0 <= v841 && v841 < 2048);
            int v846;
            v846 = 4 * v841;
            int v847;
            v847 = 8192 * v842;
            int v848;
            v848 = v847 + v846;
            float v849;
            v849 = 0.0f;
            int v850;
            v850 = threadIdx.x;
            int v851;
            v851 = v850 % 32;
            int v852;
            v852 = v851;
            while (while_method_6(v852)){
                bool v854;
                v854 = 0 <= v852;
                bool v855;
                v855 = v854 == false;
                if (v855){
                    assert("The index needs to be zero or positive." && v854);
                } else {
                }
                bool v857;
                v857 = v852 < 1;
                bool v858;
                v858 = v857 == false;
                if (v858){
                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v857);
                } else {
                }
                assert("Tensor range check" && 0 <= v852 && v852 < 1);
                int v860;
                v860 = 4 * v852;
                int v861;
                v861 = v860 + v848;
                float v862[4];
                int4* v863;
                v863 = reinterpret_cast<int4*>(v524 + v861);
                int4* v864;
                v864 = reinterpret_cast<int4*>(v862 + 0);
                assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v863) % 16 == 0 && reinterpret_cast<unsigned long long>(v864) % 16 == 0);
                *v864 = *v863;
                int v865;
                v865 = 0;
                while (while_method_3(v865)){
                    assert("Tensor range check" && 0 <= v865 && v865 < 4);
                    float v867;
                    v867 = v862[v865];
                    float v868;
                    v868 = v867 * v867;
                    float v869;
                    v869 = v849 + v868;
                    v849 = v869;
                    v865 += 1 ;
                }
                v852 += 32 ;
            }
            __syncwarp();
            auto v870 = cooperative_groups::coalesced_threads();
            Closure0 v871{};
            float v872;
            v872 = cooperative_groups::reduce(v870, v849, v871);
            float v873;
            v873 = sqrt(v872);
            assert("Tensor range check" && 0 <= v842 && v842 < 64);
            assert("Tensor range check" && 0 <= v841 && v841 < 2048);
            int v874;
            v874 = 2048 * v842;
            int v875;
            v875 = v874 + v841;
            v830[v875] = v873;
            v836 += 192 ;
        }
        __syncthreads();
        v519.sync() ;
        float v876;
        v876 = 0.0f;
        int v877;
        v877 = threadIdx.x;
        int v878;
        v878 = blockIdx.x;
        int v879;
        v879 = v878 * 256;
        int v880;
        v880 = v877 + v879;
        int v881;
        v881 = v880;
        while (while_method_27(v881)){
            bool v883;
            v883 = 0 <= v881;
            bool v884;
            v884 = v883 == false;
            if (v884){
                assert("The index needs to be zero or positive." && v883);
            } else {
            }
            int v886;
            v886 = v881 % 512;
            int v887;
            v887 = v881 / 512;
            bool v888;
            v888 = v887 < 64;
            bool v889;
            v889 = v888 == false;
            if (v889){
                assert("The last element of the projection dimensions needs to be greater than the index remainder." && v888);
            } else {
            }
            assert("Tensor range check" && 0 <= v887 && v887 < 64);
            assert("Tensor range check" && 0 <= v886 && v886 < 512);
            int v891;
            v891 = 4 * v886;
            int v892;
            v892 = 2048 * v887;
            int v893;
            v893 = v892 + v891;
            float v894[4];
            int4* v895;
            v895 = reinterpret_cast<int4*>(v830 + v893);
            int4* v896;
            v896 = reinterpret_cast<int4*>(v894 + 0);
            assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v895) % 16 == 0 && reinterpret_cast<unsigned long long>(v896) % 16 == 0);
            *v896 = *v895;
            int v897; float v898;
            Tuple25 tmp160 = Tuple25{0, v876};
            v897 = tmp160.v0; v898 = tmp160.v1;
            while (while_method_3(v897)){
                assert("Tensor range check" && 0 <= v897 && v897 < 4);
                float v900;
                v900 = v894[v897];
                bool v901;
                v901 = v898 >= v900;
                float v902;
                if (v901){
                    v902 = v898;
                } else {
                    v902 = v900;
                }
                v898 = v902;
                v897 += 1 ;
            }
            v876 = v898;
            v881 += 6144 ;
        }
        __syncwarp();
        auto v903 = cooperative_groups::coalesced_threads();
        Closure7 v904{};
        float v905;
        v905 = cooperative_groups::reduce(v903, v876, v904);
        int v906;
        v906 = threadIdx.x;
        int v907;
        v907 = v906 / 32;
        extern __shared__ unsigned char v908[];
        float * v909;
        v909 = reinterpret_cast<float *>(&v908[0ull]);
        assert("Tensor range check" && 0 <= v907 && v907 < 8);
        v909[v907] = v905;
        __syncthreads();
        int v911;
        v911 = threadIdx.x;
        int v912;
        v912 = v911 % 32;
        bool v913;
        v913 = v912 < 8;
        float v915;
        if (v913){
            assert("Tensor range check" && 0 <= v912 && v912 < 8);
            float v914;
            v914 = v909[v912];
            v915 = v914;
        } else {
            v915 = 0.0f;
        }
        __syncthreads();
        auto v916 = cooperative_groups::coalesced_threads();
        float v917;
        v917 = cooperative_groups::reduce(v916, v915, v904);
        int v918;
        v918 = blockIdx.x;
        static float v919[24];
        assert("Tensor range check" && 0 <= v918 && v918 < 24);
        v919[v918] = v917;
        v519.sync() ;
        float v920;
        v920 = 0.0f;
        int v921;
        v921 = threadIdx.x;
        int v922;
        v922 = v921 % 32;
        int v923;
        v923 = v922;
        while (while_method_28(v923)){
            bool v925;
            v925 = 0 <= v923;
            bool v926;
            v926 = v925 == false;
            if (v926){
                assert("The index needs to be zero or positive." && v925);
            } else {
            }
            bool v928;
            v928 = v923 < 24;
            bool v929;
            v929 = v928 == false;
            if (v929){
                assert("The last element of the projection dimensions needs to be greater than the index remainder." && v928);
            } else {
            }
            assert("Tensor range check" && 0 <= v923 && v923 < 24);
            float v931;
            v931 = v919[v923];
            bool v932;
            v932 = v920 >= v931;
            float v933;
            if (v932){
                v933 = v920;
            } else {
                v933 = v931;
            }
            v920 = v933;
            v923 += 32 ;
        }
        __syncwarp();
        auto v934 = cooperative_groups::coalesced_threads();
        float v935;
        v935 = cooperative_groups::reduce(v934, v920, v904);
        int v936;
        v936 = threadIdx.x;
        int v937;
        v937 = blockIdx.x;
        int v938;
        v938 = v937 * 256;
        int v939;
        v939 = v936 + v938;
        bool v940;
        v940 = v939 == 0;
        if (v940){
            cuda::counting_semaphore<cuda::thread_scope_system, 1> & v941 = console_lock;
            auto v942 = cooperative_groups::coalesced_threads();
            v941.acquire();
            printf("{%s = %f}\n","max_norm", v935);
            v941.release();
            v942.sync() ;
        } else {
        }
        __syncwarp();
        extern __shared__ unsigned char v945[];
        float * v946;
        v946 = reinterpret_cast<float *>(&v945[0ull]);
        int v948;
        v948 = blockIdx.x;
        int v949;
        v949 = v948;
        while (while_method_23(v949)){
            bool v951;
            v951 = 0 <= v949;
            bool v952;
            v952 = v951 == false;
            if (v952){
                assert("The index needs to be zero or positive." && v951);
            } else {
            }
            int v954;
            v954 = v949 % 1;
            bool v955;
            v955 = v949 < 256;
            bool v956;
            v956 = v955 == false;
            if (v956){
                assert("The last element of the projection dimensions needs to be greater than the index remainder." && v955);
            } else {
            }
            assert("Tensor range check" && 0 <= v949 && v949 < 256);
            assert("Tensor range check" && 0 <= v954 && v954 < 1);
            int v958;
            v958 = 4 * v954;
            int v959;
            v959 = 2048 * v949;
            int v960;
            v960 = v959 + v958;
            int v961;
            v961 = 524288 * v954;
            int v962;
            v962 = 512 * v949;
            int v963;
            v963 = v962 + v961;
            int v964;
            v964 = threadIdx.x;
            int v965;
            v965 = v964;
            while (while_method_24(v965)){
                bool v967;
                v967 = 0 <= v965;
                bool v968;
                v968 = v967 == false;
                if (v968){
                    assert("The index needs to be zero or positive." && v967);
                } else {
                }
                int v970;
                v970 = v965 % 4;
                int v971;
                v971 = v965 / 4;
                bool v972;
                v972 = v971 < 512;
                bool v973;
                v973 = v972 == false;
                if (v973){
                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v972);
                } else {
                }
                assert("Tensor range check" && 0 <= v971 && v971 < 512);
                assert("Tensor range check" && 0 <= v970 && v970 < 4);
                int v975;
                v975 = v970 + v960;
                int v976;
                v976 = 4 * v971;
                int v977;
                v977 = v976 + v975;
                float v978;
                v978 = v524[v977];
                assert("Tensor range check" && 0 <= v971 && v971 < 512);
                assert("Tensor range check" && 0 <= v970 && v970 < 4);
                int v979;
                v979 = 33 * v971;
                int v980;
                v980 = v979 + v970;
                v946[v980] = v978;
                v965 += 256 ;
            }
            __syncthreads();
            int v981;
            v981 = threadIdx.x;
            int v982;
            v982 = v981;
            while (while_method_24(v982)){
                bool v984;
                v984 = 0 <= v982;
                bool v985;
                v985 = v984 == false;
                if (v985){
                    assert("The index needs to be zero or positive." && v984);
                } else {
                }
                int v987;
                v987 = v982 % 512;
                int v988;
                v988 = v982 / 512;
                bool v989;
                v989 = v988 < 4;
                bool v990;
                v990 = v989 == false;
                if (v990){
                    assert("The last element of the projection dimensions needs to be greater than the index remainder." && v989);
                } else {
                }
                assert("Tensor range check" && 0 <= v988 && v988 < 4);
                assert("Tensor range check" && 0 <= v987 && v987 < 512);
                int v992;
                v992 = 33 * v987;
                int v993;
                v993 = v988 + v992;
                float v994;
                v994 = v946[v993];
                assert("Tensor range check" && 0 <= v988 && v988 < 4);
                assert("Tensor range check" && 0 <= v987 && v987 < 512);
                int v995;
                v995 = v987 + v963;
                int v996;
                v996 = 131072 * v988;
                int v997;
                v997 = v996 + v995;
                v522[v997] = v994;
                v982 += 256 ;
            }
            __syncthreads();
            v949 += 24 ;
        }
        v519.sync() ;
        v27 += 1 ;
    }
    cooperative_groups::grid_group & v998 = v26.v1;
    cooperative_groups::grid_group & v999 = v998;
    int v1000;
    v1000 = threadIdx.x;
    int v1001;
    v1001 = blockIdx.x;
    int v1002;
    v1002 = v1001 * 256;
    int v1003;
    v1003 = v1000 + v1002;
    int v1004;
    v1004 = v1003;
    while (while_method_20(v1004)){
        bool v1006;
        v1006 = 0 <= v1004;
        bool v1007;
        v1007 = v1006 == false;
        if (v1007){
            assert("The index needs to be zero or positive." && v1006);
        } else {
        }
        int v1009;
        v1009 = v1004 % 256;
        int v1010;
        v1010 = v1004 / 256;
        bool v1011;
        v1011 = v1010 < 4;
        bool v1012;
        v1012 = v1011 == false;
        if (v1012){
            assert("The last element of the projection dimensions needs to be greater than the index remainder." && v1011);
        } else {
        }
        assert("Tensor range check" && 0 <= v1010 && v1010 < 4);
        assert("Tensor range check" && 0 <= v1009 && v1009 < 256);
        int v1014;
        v1014 = 4 * v1009;
        int v1015;
        v1015 = 1024 * v1010;
        int v1016;
        v1016 = v1015 + v1014;
        assert("Tensor range check" && 0 <= v1010 && v1010 < 4);
        assert("Tensor range check" && 0 <= v1009 && v1009 < 256);
        float v1017[4];
        float v1018[4];
        float v1019[4];
        int4* v1020;
        v1020 = reinterpret_cast<int4*>(v3 + v1016);
        int4* v1021;
        v1021 = reinterpret_cast<int4*>(v1017 + 0);
        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v1020) % 16 == 0 && reinterpret_cast<unsigned long long>(v1021) % 16 == 0);
        *v1021 = *v1020;
        int4* v1022;
        v1022 = reinterpret_cast<int4*>(v4 + v1016);
        int4* v1023;
        v1023 = reinterpret_cast<int4*>(v1018 + 0);
        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v1022) % 16 == 0 && reinterpret_cast<unsigned long long>(v1023) % 16 == 0);
        *v1023 = *v1022;
        // Pushing the loop unrolling to: 0
        int v1024;
        v1024 = 0;
        #pragma unroll
        while (while_method_3(v1024)){
            assert("Tensor range check" && 0 <= v1024 && v1024 < 4);
            float v1026;
            v1026 = v1017[v1024];
            float v1027;
            v1027 = v1018[v1024];
            bool v1028;
            v1028 = v1027 == 0.0f;
            bool v1029;
            v1029 = v1028 != true;
            float v1031;
            if (v1029){
                float v1030;
                v1030 = v1026 / v1027;
                v1031 = v1030;
            } else {
                v1031 = 0.0f;
            }
            assert("Tensor range check" && 0 <= v1024 && v1024 < 4);
            v1019[v1024] = v1031;
            v1024 += 1 ;
        }
        // Poping the loop unrolling to: 0
        int4* v1032;
        v1032 = reinterpret_cast<int4*>(v1019 + 0);
        int4* v1033;
        v1033 = reinterpret_cast<int4*>(v5 + v1016);
        assert("Pointer alignment check" && reinterpret_cast<unsigned long long>(v1032) % 16 == 0 && reinterpret_cast<unsigned long long>(v1033) % 16 == 0);
        *v1033 = *v1032;
        v1004 += 6144 ;
    }
    v999.sync() ;
    return ;
}
"""
class static_array():
    def __init__(self, length):
        self.ptr = []
        for _ in range(length):
            self.ptr.append(None)

    def __getitem__(self, index):
        assert 0 <= index < len(self.ptr), "The get index needs to be in range."
        return self.ptr[index]
    
    def __setitem__(self, index, value):
        assert 0 <= index < len(self.ptr), "The set index needs to be in range."
        self.ptr[index] = value

class static_array_list(static_array):
    def __init__(self, length):
        super().__init__(length)
        self.length = 0

    def __getitem__(self, index):
        assert 0 <= index < self.length, "The get index needs to be in range."
        return self.ptr[index]
    
    def __setitem__(self, index, value):
        assert 0 <= index < self.length, "The set index needs to be in range."
        self.ptr[index] = value

    def push(self,value):
        assert (self.length < len(self.ptr)), "The length before pushing has to be less than the maximum length of the array."
        self.ptr[self.length] = value
        self.length += 1

    def pop(self):
        assert (0 < self.length), "The length before popping has to be greater than 0."
        self.length -= 1
        return self.ptr[self.length]

    def unsafe_set_length(self,i):
        assert 0 <= i <= len(self.ptr), "The new length has to be in range."
        self.length = i

class dynamic_array(static_array): 
    pass

class dynamic_array_list(static_array_list):
    def length_(self): return self.length

import cupy as cp
from dataclasses import dataclass
from typing import NamedTuple, Union, Callable, Tuple
i8 = int; i16 = int; i32 = int; i64 = int; u8 = int; u16 = int; u32 = int; u64 = int; f32 = float; f64 = float; char = str; string = str

import time
options = []
options.append('--define-macro=NDEBUG')
options.append('--dopt=on')
options.append('--diag-suppress=550,20012,68,39,177')
options.append('--restrict')
options.append('--maxrregcount=255')
options.append('--std=c++20')
options.append('-D__CUDA_NO_HALF_CONVERSIONS__')
raw_module = cp.RawModule(code=kernel, backend='nvcc', enable_cooperative_groups=True, options=tuple(options))
import collections
class US1_0(NamedTuple): # A_All_In
    tag = 0
class US1_1(NamedTuple): # A_Call
    tag = 1
class US1_2(NamedTuple): # A_Fold
    tag = 2
class US1_3(NamedTuple): # A_Raise
    v0 : i32
    tag = 3
US1 = Union[US1_0, US1_1, US1_2, US1_3]
class US0_0(NamedTuple): # ActionSelected
    v0 : US1
    tag = 0
class US0_1(NamedTuple): # PlayerChanged
    v0 : static_array
    tag = 1
class US0_2(NamedTuple): # StartGame
    tag = 2
class US0_3(NamedTuple): # StartTrainingVsCallingMachine
    tag = 3
class US0_4(NamedTuple): # StartTrainingVsSelf
    tag = 4
US0 = Union[US0_0, US0_1, US0_2, US0_3, US0_4]
class US2_0(NamedTuple): # CallingMachine
    tag = 0
class US2_1(NamedTuple): # Computer
    tag = 1
class US2_2(NamedTuple): # Human
    tag = 2
class US2_3(NamedTuple): # Random
    tag = 3
US2 = Union[US2_0, US2_1, US2_2, US2_3]
class US5_0(NamedTuple): # Flop
    v0 : static_array
    tag = 0
class US5_1(NamedTuple): # Preflop
    tag = 1
class US5_2(NamedTuple): # River
    v0 : static_array
    tag = 2
class US5_3(NamedTuple): # Turn
    v0 : static_array
    tag = 3
US5 = Union[US5_0, US5_1, US5_2, US5_3]
class US4_0(NamedTuple): # G_Flop
    v0 : i32
    v1 : static_array
    v2 : static_array
    v3 : i32
    v4 : static_array
    v5 : US5
    tag = 0
class US4_1(NamedTuple): # G_Fold
    v0 : i32
    v1 : static_array
    v2 : static_array
    v3 : i32
    v4 : static_array
    v5 : US5
    tag = 1
class US4_2(NamedTuple): # G_Preflop
    tag = 2
class US4_3(NamedTuple): # G_River
    v0 : i32
    v1 : static_array
    v2 : static_array
    v3 : i32
    v4 : static_array
    v5 : US5
    tag = 3
class US4_4(NamedTuple): # G_Round
    v0 : i32
    v1 : static_array
    v2 : static_array
    v3 : i32
    v4 : static_array
    v5 : US5
    tag = 4
class US4_5(NamedTuple): # G_Round'
    v0 : i32
    v1 : static_array
    v2 : static_array
    v3 : i32
    v4 : static_array
    v5 : US5
    v6 : US1
    tag = 5
class US4_6(NamedTuple): # G_Showdown
    v0 : i32
    v1 : static_array
    v2 : static_array
    v3 : i32
    v4 : static_array
    v5 : US5
    tag = 6
class US4_7(NamedTuple): # G_Turn
    v0 : i32
    v1 : static_array
    v2 : static_array
    v3 : i32
    v4 : static_array
    v5 : US5
    tag = 7
US4 = Union[US4_0, US4_1, US4_2, US4_3, US4_4, US4_5, US4_6, US4_7]
class US3_0(NamedTuple): # None
    tag = 0
class US3_1(NamedTuple): # Some
    v0 : US4
    tag = 1
US3 = Union[US3_0, US3_1]
class US6_0(NamedTuple): # GameNotStarted
    tag = 0
class US6_1(NamedTuple): # GameOver
    v0 : i32
    v1 : static_array
    v2 : static_array
    v3 : i32
    v4 : static_array
    v5 : US5
    tag = 1
class US6_2(NamedTuple): # WaitingForActionFromPlayerId
    v0 : i32
    v1 : static_array
    v2 : static_array
    v3 : i32
    v4 : static_array
    v5 : US5
    tag = 2
US6 = Union[US6_0, US6_1, US6_2]
class US7_0(NamedTuple): # CommunityCardsAre
    v0 : static_array_list
    tag = 0
class US7_1(NamedTuple): # Fold
    v0 : i32
    v1 : i32
    tag = 1
class US7_2(NamedTuple): # PlayerAction
    v0 : i32
    v1 : US1
    tag = 2
class US7_3(NamedTuple): # PlayerGotCards
    v0 : i32
    v1 : static_array
    tag = 3
class US7_4(NamedTuple): # Showdown
    v0 : i32
    v1 : static_array
    v2 : i32
    tag = 4
US7 = Union[US7_0, US7_1, US7_2, US7_3, US7_4]
class US8_0(NamedTuple): # AddRewardsCallingMachine
    v0 : list
    tag = 0
class US8_1(NamedTuple): # AddRewardsSelf
    v0 : list
    tag = 1
US8 = Union[US8_0, US8_1]
def Closure0():
    def inner(v0 : object, v1 : object) -> object:
        v2 = method0(v0)
        v3, v4, v5, v6, v7, v8, v9, v10 = method8(v1)
        v11 = cp.empty(16,dtype=cp.uint8)
        v12 = cp.empty(6304,dtype=cp.uint8)
        method46(v12, v3, v4, v5, v6, v7)
        del v3, v4, v5, v6, v7
        v15 = "{}\n"
        v16 = "Going to run the NL Holdem full kernel."
        print(v15.format(v16),end="")
        del v15, v16
        v17 = time.perf_counter()
        v18 = []
        match v2:
            case US0_0(_): # ActionSelected
                method78(v11, v2)
                v77 = cp.cuda.Device().attributes['MultiProcessorCount']
                v78 = v77 == 24
                del v77
                v79 = v78 == False
                if v79:
                    v80 = "The number of SMs per GPU at runtime must much that what is declared atop of corecuda.base. Make sure to use the correct constant so it can be propagated at compile time."
                    assert v78, v80
                    del v80
                else:
                    pass
                del v78, v79
                v81 = 0
                v82 = raw_module.get_function(f"entry{v81}")
                del v81
                v82.max_dynamic_shared_size_bytes = 98304 
                print(f'Threads per block, blocks per grid: {256}, {24}')
                v82((24,),(256,),(v12, v11, v8, v9, v10),shared_mem=98304)
                del v82
            case US0_1(_): # PlayerChanged
                method78(v11, v2)
                v70 = cp.cuda.Device().attributes['MultiProcessorCount']
                v71 = v70 == 24
                del v70
                v72 = v71 == False
                if v72:
                    v73 = "The number of SMs per GPU at runtime must much that what is declared atop of corecuda.base. Make sure to use the correct constant so it can be propagated at compile time."
                    assert v71, v73
                    del v73
                else:
                    pass
                del v71, v72
                v74 = 0
                v75 = raw_module.get_function(f"entry{v74}")
                del v74
                v75.max_dynamic_shared_size_bytes = 98304 
                print(f'Threads per block, blocks per grid: {256}, {24}')
                v75((24,),(256,),(v12, v11, v8, v9, v10),shared_mem=98304)
                del v75
            case US0_2(): # StartGame
                method78(v11, v2)
                v63 = cp.cuda.Device().attributes['MultiProcessorCount']
                v64 = v63 == 24
                del v63
                v65 = v64 == False
                if v65:
                    v66 = "The number of SMs per GPU at runtime must much that what is declared atop of corecuda.base. Make sure to use the correct constant so it can be propagated at compile time."
                    assert v64, v66
                    del v66
                else:
                    pass
                del v64, v65
                v67 = 0
                v68 = raw_module.get_function(f"entry{v67}")
                del v67
                v68.max_dynamic_shared_size_bytes = 98304 
                print(f'Threads per block, blocks per grid: {256}, {24}')
                v68((24,),(256,),(v12, v11, v8, v9, v10),shared_mem=98304)
                del v68
            case US0_3(): # StartTrainingVsCallingMachine
                v19 = cp.zeros(4096,dtype=cp.float32) # type: ignore
                v20 = cp.zeros(4096,dtype=cp.float32) # type: ignore
                v21 = cp.empty(4096,dtype=cp.float32)
                v22 = cp.cuda.Device().attributes['MultiProcessorCount']
                v23 = v22 == 24
                del v22
                v24 = v23 == False
                if v24:
                    v25 = "The number of SMs per GPU at runtime must much that what is declared atop of corecuda.base. Make sure to use the correct constant so it can be propagated at compile time."
                    assert v23, v25
                    del v25
                else:
                    pass
                del v23, v24
                v26 = 1
                v27 = raw_module.get_function(f"entry{v26}")
                del v26
                v27.max_dynamic_shared_size_bytes = 98304 
                print(f'Threads per block, blocks per grid: {256}, {24}')
                v27((24,),(256,),(v8, v9, v10, v19, v20, v21),shared_mem=98304)
                del v19, v20, v27
                v28 = []
                v30 = v21[0:]
                del v21
                v31 = v30.get()
                del v30
                v32 = 0
                while method63(v32):
                    v34 = []
                    v35 = 0
                    while method81(v35):
                        assert 0 <= v32 < 4, 'Tensor range check'
                        assert 0 <= v35 < 1024, 'Tensor range check'
                        v37 = 1024 * v32
                        v38 = v37 + v35
                        del v37
                        v39 = v31[v38].item()
                        del v38
                        v34.append(v39)
                        del v39
                        v35 += 1 
                    del v35
                    v28.append(v34)
                    del v34
                    v32 += 1 
                del v31, v32
                v40 = US8_0(v28)
                del v28
                v18.append(v40)
                del v40
            case US0_4(): # StartTrainingVsSelf
                v41 = cp.zeros(4096,dtype=cp.float32) # type: ignore
                v42 = cp.zeros(4096,dtype=cp.float32) # type: ignore
                v43 = cp.empty(4096,dtype=cp.float32)
                v44 = cp.cuda.Device().attributes['MultiProcessorCount']
                v45 = v44 == 24
                del v44
                v46 = v45 == False
                if v46:
                    v47 = "The number of SMs per GPU at runtime must much that what is declared atop of corecuda.base. Make sure to use the correct constant so it can be propagated at compile time."
                    assert v45, v47
                    del v47
                else:
                    pass
                del v45, v46
                v48 = 2
                v49 = raw_module.get_function(f"entry{v48}")
                del v48
                v49.max_dynamic_shared_size_bytes = 98304 
                print(f'Threads per block, blocks per grid: {256}, {24}')
                v49((24,),(256,),(v8, v9, v10, v41, v42, v43),shared_mem=98304)
                del v41, v42, v49
                v50 = []
                v52 = v43[0:]
                del v43
                v53 = v52.get()
                del v52
                v54 = 0
                while method63(v54):
                    v56 = []
                    v57 = 0
                    while method81(v57):
                        assert 0 <= v54 < 4, 'Tensor range check'
                        assert 0 <= v57 < 1024, 'Tensor range check'
                        v59 = 1024 * v54
                        v60 = v59 + v57
                        del v59
                        v61 = v53[v60].item()
                        del v60
                        v56.append(v61)
                        del v61
                        v57 += 1 
                    del v57
                    v50.append(v56)
                    del v56
                    v54 += 1 
                del v53, v54
                v62 = US8_1(v50)
                del v50
                v18.append(v62)
                del v62
            case t:
                raise Exception(f'Pattern matching miss. Got: {t}')
        del v2, v11
        cp.cuda.get_current_stream().synchronize()
        v83 = time.perf_counter()
        v86 = "{}"
        v87 = "The time it took to run the kernel (in seconds) is: "
        print(v86.format(v87),end="")
        del v86, v87
        v88 = v83 - v17
        del v17, v83
        v91 = "{:.6f}\n"
        print(v91.format(v88),end="")
        del v88, v91
        v92, v93, v94, v95, v96 = method82(v12)
        del v12
        return method110(v92, v93, v94, v95, v96, v8, v9, v10, v18)
    return inner
def Closure1():
    def inner() -> object:
        v0 = cp.empty(2097152,dtype=cp.uint8)
        v1 = cp.empty(58982400,dtype=cp.uint8)
        v2 = cp.empty(2097216,dtype=cp.uint8)
        v4 = v1[0:0+4*12582912].view(cp.float32)
        del v4
        v6 = v2[0:0+4*524288].view(cp.float32)
        v8 = v0[0:0+4*524288].view(cp.float32)
        del v8
        v10 = v1[51904512:51904512+4*1572864].view(cp.float32)
        del v10
        v12 = v2[2097152:2097152+4*1].view(cp.int32)
        v14 = v2[2097168:2097168+1*4].view(cp.bool_)
        v16 = v2[2097184:2097184+4*4].view(cp.float32)
        v18 = v2[2097200:2097200+4*4].view(cp.float32)
        v20 = v1[58195968:58195968+8*49152].view(cp.float64)
        v22 = v1[58589184:58589184+8*49152].view(cp.float64)
        v23 = cp.random.normal(0.0,0.1,524288,dtype=cp.float32) # type: ignore
        cp.copyto(v6[0:0+524288],v23[0:0+524288])
        del v6, v23
        v12[:] = 0
        del v12
        v16[:] = 0
        del v16
        v18[:] = 0
        del v18
        v14[:] = 1
        del v14
        v20[:] = 0
        del v20
        v22[:] = 0
        del v22
        v25 = static_array(2)
        v27 = US2_1()
        v25[0] = v27
        del v27
        v29 = US2_2()
        v25[1] = v29
        del v29
        v31 = static_array_list(128)
        v32 = 4503599627370495
        v33 = US3_0()
        v34 = US6_0()
        return method159(v32, v33, v31, v25, v34, v2, v1, v0)
    return inner
def method3(v0 : object) -> None:
    assert v0 == [], f'Expected an unit type. Got: {v0}'
    del v0
    return 
def method4(v0 : object) -> i32:
    assert isinstance(v0,i32), f'The object needs to be the right primitive type. Got: {v0}'
    v1 = v0
    del v0
    return v1
def method2(v0 : object) -> US1:
    v1 = v0[0] # type: ignore
    v2 = v0[1] # type: ignore
    del v0
    v3 = "A_All_In" == v1
    if v3:
        del v1, v3
        method3(v2)
        del v2
        return US1_0()
    else:
        del v3
        v5 = "A_Call" == v1
        if v5:
            del v1, v5
            method3(v2)
            del v2
            return US1_1()
        else:
            del v5
            v7 = "A_Fold" == v1
            if v7:
                del v1, v7
                method3(v2)
                del v2
                return US1_2()
            else:
                del v7
                v9 = "A_Raise" == v1
                if v9:
                    del v1, v9
                    v10 = method4(v2)
                    del v2
                    return US1_3(v10)
                else:
                    del v2, v9
                    raise TypeError(f"Cannot convert the Python object into a Spiral union type. Invalid string tag. Got: {v1}")
                    del v1
                    raise Exception("Error")
def method6(v0 : i32, v1 : i32) -> bool:
    v2 = v1 < v0
    del v0, v1
    return v2
def method7(v0 : object) -> US2:
    v1 = v0[0] # type: ignore
    v2 = v0[1] # type: ignore
    del v0
    v3 = "CallingMachine" == v1
    if v3:
        del v1, v3
        method3(v2)
        del v2
        return US2_0()
    else:
        del v3
        v5 = "Computer" == v1
        if v5:
            del v1, v5
            method3(v2)
            del v2
            return US2_1()
        else:
            del v5
            v7 = "Human" == v1
            if v7:
                del v1, v7
                method3(v2)
                del v2
                return US2_2()
            else:
                del v7
                v9 = "Random" == v1
                if v9:
                    del v1, v9
                    method3(v2)
                    del v2
                    return US2_3()
                else:
                    del v2, v9
                    raise TypeError(f"Cannot convert the Python object into a Spiral union type. Invalid string tag. Got: {v1}")
                    del v1
                    raise Exception("Error")
def method5(v0 : object) -> static_array:
    assert isinstance(v0,list), f'The object needs to be a Python list. Got: {v0}'
    v1 = len(v0) # type: ignore
    v2 = 2 == v1
    v3 = v2 == False
    if v3:
        v4 = "The type level dimension has to equal the value passed at runtime into create."
        assert v2, v4
        del v4
    else:
        pass
    del v2, v3
    v6 = static_array(2)
    v7 = 0
    while method6(v1, v7):
        v9 = v0[v7]
        v10 = method7(v9)
        del v9
        v6[v7] = v10
        del v10
        v7 += 1 
    del v0, v1, v7
    return v6
def method1(v0 : object) -> US0:
    v1 = v0[0] # type: ignore
    v2 = v0[1] # type: ignore
    del v0
    v3 = "ActionSelected" == v1
    if v3:
        del v1, v3
        v4 = method2(v2)
        del v2
        return US0_0(v4)
    else:
        del v3
        v6 = "PlayerChanged" == v1
        if v6:
            del v1, v6
            v7 = method5(v2)
            del v2
            return US0_1(v7)
        else:
            del v6
            v9 = "StartGame" == v1
            if v9:
                del v1, v9
                method3(v2)
                del v2
                return US0_2()
            else:
                del v9
                v11 = "StartTrainingVsCallingMachine" == v1
                if v11:
                    del v1, v11
                    method3(v2)
                    del v2
                    return US0_3()
                else:
                    del v11
                    v13 = "StartTrainingVsSelf" == v1
                    if v13:
                        del v1, v13
                        method3(v2)
                        del v2
                        return US0_4()
                    else:
                        del v2, v13
                        raise TypeError(f"Cannot convert the Python object into a Spiral union type. Invalid string tag. Got: {v1}")
                        del v1
                        raise Exception("Error")
def method0(v0 : object) -> US0:
    return method1(v0)
def method13(v0 : object) -> u64:
    assert isinstance(v0,u64), f'The object needs to be the right primitive type. Got: {v0}'
    v1 = v0
    del v0
    return v1
def method12(v0 : object) -> u64:
    v1 = method13(v0)
    del v0
    return v1
def method20(v0 : object) -> u8:
    assert isinstance(v0,u8), f'The object needs to be the right primitive type. Got: {v0}'
    v1 = v0
    del v0
    return v1
def method19(v0 : object) -> u8:
    v1 = method20(v0)
    del v0
    return v1
def method18(v0 : object) -> static_array:
    assert isinstance(v0,list), f'The object needs to be a Python list. Got: {v0}'
    v1 = len(v0) # type: ignore
    v2 = 2 == v1
    v3 = v2 == False
    if v3:
        v4 = "The type level dimension has to equal the value passed at runtime into create."
        assert v2, v4
        del v4
    else:
        pass
    del v2, v3
    v6 = static_array(2)
    v7 = 0
    while method6(v1, v7):
        v9 = v0[v7]
        v10 = method19(v9)
        del v9
        v6[v7] = v10
        del v10
        v7 += 1 
    del v0, v1, v7
    return v6
def method17(v0 : object) -> static_array:
    assert isinstance(v0,list), f'The object needs to be a Python list. Got: {v0}'
    v1 = len(v0) # type: ignore
    v2 = 2 == v1
    v3 = v2 == False
    if v3:
        v4 = "The type level dimension has to equal the value passed at runtime into create."
        assert v2, v4
        del v4
    else:
        pass
    del v2, v3
    v6 = static_array(2)
    v7 = 0
    while method6(v1, v7):
        v9 = v0[v7]
        v10 = method18(v9)
        del v9
        v6[v7] = v10
        del v10
        v7 += 1 
    del v0, v1, v7
    return v6
def method21(v0 : object) -> static_array:
    assert isinstance(v0,list), f'The object needs to be a Python list. Got: {v0}'
    v1 = len(v0) # type: ignore
    v2 = 2 == v1
    v3 = v2 == False
    if v3:
        v4 = "The type level dimension has to equal the value passed at runtime into create."
        assert v2, v4
        del v4
    else:
        pass
    del v2, v3
    v6 = static_array(2)
    v7 = 0
    while method6(v1, v7):
        v9 = v0[v7]
        v10 = method4(v9)
        del v9
        v6[v7] = v10
        del v10
        v7 += 1 
    del v0, v1, v7
    return v6
def method23(v0 : object) -> static_array:
    assert isinstance(v0,list), f'The object needs to be a Python list. Got: {v0}'
    v1 = len(v0) # type: ignore
    v2 = 3 == v1
    v3 = v2 == False
    if v3:
        v4 = "The type level dimension has to equal the value passed at runtime into create."
        assert v2, v4
        del v4
    else:
        pass
    del v2, v3
    v6 = static_array(3)
    v7 = 0
    while method6(v1, v7):
        v9 = v0[v7]
        v10 = method19(v9)
        del v9
        v6[v7] = v10
        del v10
        v7 += 1 
    del v0, v1, v7
    return v6
def method24(v0 : object) -> static_array:
    assert isinstance(v0,list), f'The object needs to be a Python list. Got: {v0}'
    v1 = len(v0) # type: ignore
    v2 = 5 == v1
    v3 = v2 == False
    if v3:
        v4 = "The type level dimension has to equal the value passed at runtime into create."
        assert v2, v4
        del v4
    else:
        pass
    del v2, v3
    v6 = static_array(5)
    v7 = 0
    while method6(v1, v7):
        v9 = v0[v7]
        v10 = method19(v9)
        del v9
        v6[v7] = v10
        del v10
        v7 += 1 
    del v0, v1, v7
    return v6
def method25(v0 : object) -> static_array:
    assert isinstance(v0,list), f'The object needs to be a Python list. Got: {v0}'
    v1 = len(v0) # type: ignore
    v2 = 4 == v1
    v3 = v2 == False
    if v3:
        v4 = "The type level dimension has to equal the value passed at runtime into create."
        assert v2, v4
        del v4
    else:
        pass
    del v2, v3
    v6 = static_array(4)
    v7 = 0
    while method6(v1, v7):
        v9 = v0[v7]
        v10 = method19(v9)
        del v9
        v6[v7] = v10
        del v10
        v7 += 1 
    del v0, v1, v7
    return v6
def method22(v0 : object) -> US5:
    v1 = v0[0] # type: ignore
    v2 = v0[1] # type: ignore
    del v0
    v3 = "Flop" == v1
    if v3:
        del v1, v3
        v4 = method23(v2)
        del v2
        return US5_0(v4)
    else:
        del v3
        v6 = "Preflop" == v1
        if v6:
            del v1, v6
            method3(v2)
            del v2
            return US5_1()
        else:
            del v6
            v8 = "River" == v1
            if v8:
                del v1, v8
                v9 = method24(v2)
                del v2
                return US5_2(v9)
            else:
                del v8
                v11 = "Turn" == v1
                if v11:
                    del v1, v11
                    v12 = method25(v2)
                    del v2
                    return US5_3(v12)
                else:
                    del v2, v11
                    raise TypeError(f"Cannot convert the Python object into a Spiral union type. Invalid string tag. Got: {v1}")
                    del v1
                    raise Exception("Error")
def method16(v0 : object) -> Tuple[i32, static_array, static_array, i32, static_array, US5]:
    v1 = v0["min_raise"] # type: ignore
    v2 = method4(v1)
    del v1
    v3 = v0["pl_card"] # type: ignore
    v4 = method17(v3)
    del v3
    v5 = v0["pot"] # type: ignore
    v6 = method21(v5)
    del v5
    v7 = v0["round_turn"] # type: ignore
    v8 = method4(v7)
    del v7
    v9 = v0["stack"] # type: ignore
    v10 = method21(v9)
    del v9
    v11 = v0["street"] # type: ignore
    del v0
    v12 = method22(v11)
    del v11
    return v2, v4, v6, v8, v10, v12
def method26(v0 : object) -> Tuple[i32, static_array, static_array, i32, static_array, US5, US1]:
    v1 = v0[0] # type: ignore
    v2, v3, v4, v5, v6, v7 = method16(v1)
    del v1
    v8 = v0[1] # type: ignore
    del v0
    v9 = method2(v8)
    del v8
    return v2, v3, v4, v5, v6, v7, v9
def method15(v0 : object) -> US4:
    v1 = v0[0] # type: ignore
    v2 = v0[1] # type: ignore
    del v0
    v3 = "G_Flop" == v1
    if v3:
        del v1, v3
        v4, v5, v6, v7, v8, v9 = method16(v2)
        del v2
        return US4_0(v4, v5, v6, v7, v8, v9)
    else:
        del v3
        v11 = "G_Fold" == v1
        if v11:
            del v1, v11
            v12, v13, v14, v15, v16, v17 = method16(v2)
            del v2
            return US4_1(v12, v13, v14, v15, v16, v17)
        else:
            del v11
            v19 = "G_Preflop" == v1
            if v19:
                del v1, v19
                method3(v2)
                del v2
                return US4_2()
            else:
                del v19
                v21 = "G_River" == v1
                if v21:
                    del v1, v21
                    v22, v23, v24, v25, v26, v27 = method16(v2)
                    del v2
                    return US4_3(v22, v23, v24, v25, v26, v27)
                else:
                    del v21
                    v29 = "G_Round" == v1
                    if v29:
                        del v1, v29
                        v30, v31, v32, v33, v34, v35 = method16(v2)
                        del v2
                        return US4_4(v30, v31, v32, v33, v34, v35)
                    else:
                        del v29
                        v37 = "G_Round'" == v1
                        if v37:
                            del v1, v37
                            v38, v39, v40, v41, v42, v43, v44 = method26(v2)
                            del v2
                            return US4_5(v38, v39, v40, v41, v42, v43, v44)
                        else:
                            del v37
                            v46 = "G_Showdown" == v1
                            if v46:
                                del v1, v46
                                v47, v48, v49, v50, v51, v52 = method16(v2)
                                del v2
                                return US4_6(v47, v48, v49, v50, v51, v52)
                            else:
                                del v46
                                v54 = "G_Turn" == v1
                                if v54:
                                    del v1, v54
                                    v55, v56, v57, v58, v59, v60 = method16(v2)
                                    del v2
                                    return US4_7(v55, v56, v57, v58, v59, v60)
                                else:
                                    del v2, v54
                                    raise TypeError(f"Cannot convert the Python object into a Spiral union type. Invalid string tag. Got: {v1}")
                                    del v1
                                    raise Exception("Error")
def method14(v0 : object) -> US3:
    v1 = v0[0] # type: ignore
    v2 = v0[1] # type: ignore
    del v0
    v3 = "None" == v1
    if v3:
        del v1, v3
        method3(v2)
        del v2
        return US3_0()
    else:
        del v3
        v5 = "Some" == v1
        if v5:
            del v1, v5
            v6 = method15(v2)
            del v2
            return US3_1(v6)
        else:
            del v2, v5
            raise TypeError(f"Cannot convert the Python object into a Spiral union type. Invalid string tag. Got: {v1}")
            del v1
            raise Exception("Error")
def method11(v0 : object) -> Tuple[u64, US3]:
    v1 = v0["deck"] # type: ignore
    v2 = method12(v1)
    del v1
    v3 = v0["game"] # type: ignore
    del v0
    v4 = method14(v3)
    del v3
    return v2, v4
def method30(v0 : object) -> static_array_list:
    v1 = len(v0) # type: ignore
    assert (5 >= v1), f'The length of the original object has to be greater than or equal to the static array dimension.\nExpected: 5\nGot: {v1} '
    del v1
    assert isinstance(v0,list), f'The object needs to be a Python list. Got: {v0}'
    v2 = len(v0) # type: ignore
    v3 = 5 >= v2
    v4 = v3 == False
    if v4:
        v5 = "The type level dimension has to equal the value passed at runtime into create."
        assert v3, v5
        del v5
    else:
        pass
    del v3, v4
    v7 = static_array_list(5)
    v7.unsafe_set_length(v2)
    v8 = 0
    while method6(v2, v8):
        v10 = v0[v8]
        v11 = method19(v10)
        del v10
        v7[v8] = v11
        del v11
        v8 += 1 
    del v0, v2, v8
    return v7
def method31(v0 : object) -> Tuple[i32, i32]:
    v1 = v0["chips_won"] # type: ignore
    v2 = method4(v1)
    del v1
    v3 = v0["winner_id"] # type: ignore
    del v0
    v4 = method4(v3)
    del v3
    return v2, v4
def method32(v0 : object) -> Tuple[i32, US1]:
    v1 = v0[0] # type: ignore
    v2 = method4(v1)
    del v1
    v3 = v0[1] # type: ignore
    del v0
    v4 = method2(v3)
    del v3
    return v2, v4
def method33(v0 : object) -> Tuple[i32, static_array]:
    v1 = v0[0] # type: ignore
    v2 = method4(v1)
    del v1
    v3 = v0[1] # type: ignore
    del v0
    v4 = method18(v3)
    del v3
    return v2, v4
def method38(v0 : object) -> i8:
    assert isinstance(v0,i8), f'The object needs to be the right primitive type. Got: {v0}'
    v1 = v0
    del v0
    return v1
def method37(v0 : object) -> Tuple[static_array, i8]:
    v1 = v0["hand"] # type: ignore
    v2 = method24(v1)
    del v1
    v3 = v0["score"] # type: ignore
    del v0
    v4 = method38(v3)
    del v3
    return v2, v4
def method36(v0 : object) -> Tuple[static_array, i8]:
    v1, v2 = method37(v0)
    del v0
    return v1, v2
def method35(v0 : object) -> static_array:
    assert isinstance(v0,list), f'The object needs to be a Python list. Got: {v0}'
    v1 = len(v0) # type: ignore
    v2 = 2 == v1
    v3 = v2 == False
    if v3:
        v4 = "The type level dimension has to equal the value passed at runtime into create."
        assert v2, v4
        del v4
    else:
        pass
    del v2, v3
    v6 = static_array(2)
    v7 = 0
    while method6(v1, v7):
        v9 = v0[v7]
        v10, v11 = method36(v9)
        del v9
        v6[v7] = (v10, v11)
        del v10, v11
        v7 += 1 
    del v0, v1, v7
    return v6
def method34(v0 : object) -> Tuple[i32, static_array, i32]:
    v1 = v0["chips_won"] # type: ignore
    v2 = method4(v1)
    del v1
    v3 = v0["hands_shown"] # type: ignore
    v4 = method35(v3)
    del v3
    v5 = v0["winner_id"] # type: ignore
    del v0
    v6 = method4(v5)
    del v5
    return v2, v4, v6
def method29(v0 : object) -> US7:
    v1 = v0[0] # type: ignore
    v2 = v0[1] # type: ignore
    del v0
    v3 = "CommunityCardsAre" == v1
    if v3:
        del v1, v3
        v4 = method30(v2)
        del v2
        return US7_0(v4)
    else:
        del v3
        v6 = "Fold" == v1
        if v6:
            del v1, v6
            v7, v8 = method31(v2)
            del v2
            return US7_1(v7, v8)
        else:
            del v6
            v10 = "PlayerAction" == v1
            if v10:
                del v1, v10
                v11, v12 = method32(v2)
                del v2
                return US7_2(v11, v12)
            else:
                del v10
                v14 = "PlayerGotCards" == v1
                if v14:
                    del v1, v14
                    v15, v16 = method33(v2)
                    del v2
                    return US7_3(v15, v16)
                else:
                    del v14
                    v18 = "Showdown" == v1
                    if v18:
                        del v1, v18
                        v19, v20, v21 = method34(v2)
                        del v2
                        return US7_4(v19, v20, v21)
                    else:
                        del v2, v18
                        raise TypeError(f"Cannot convert the Python object into a Spiral union type. Invalid string tag. Got: {v1}")
                        del v1
                        raise Exception("Error")
def method28(v0 : object) -> static_array_list:
    v1 = len(v0) # type: ignore
    assert (128 >= v1), f'The length of the original object has to be greater than or equal to the static array dimension.\nExpected: 128\nGot: {v1} '
    del v1
    assert isinstance(v0,list), f'The object needs to be a Python list. Got: {v0}'
    v2 = len(v0) # type: ignore
    v3 = 128 >= v2
    v4 = v3 == False
    if v4:
        v5 = "The type level dimension has to equal the value passed at runtime into create."
        assert v3, v5
        del v5
    else:
        pass
    del v3, v4
    v7 = static_array_list(128)
    v7.unsafe_set_length(v2)
    v8 = 0
    while method6(v2, v8):
        v10 = v0[v8]
        v11 = method29(v10)
        del v10
        v7[v8] = v11
        del v11
        v8 += 1 
    del v0, v2, v8
    return v7
def method39(v0 : object) -> US6:
    v1 = v0[0] # type: ignore
    v2 = v0[1] # type: ignore
    del v0
    v3 = "GameNotStarted" == v1
    if v3:
        del v1, v3
        method3(v2)
        del v2
        return US6_0()
    else:
        del v3
        v5 = "GameOver" == v1
        if v5:
            del v1, v5
            v6, v7, v8, v9, v10, v11 = method16(v2)
            del v2
            return US6_1(v6, v7, v8, v9, v10, v11)
        else:
            del v5
            v13 = "WaitingForActionFromPlayerId" == v1
            if v13:
                del v1, v13
                v14, v15, v16, v17, v18, v19 = method16(v2)
                del v2
                return US6_2(v14, v15, v16, v17, v18, v19)
            else:
                del v2, v13
                raise TypeError(f"Cannot convert the Python object into a Spiral union type. Invalid string tag. Got: {v1}")
                del v1
                raise Exception("Error")
def method27(v0 : object) -> Tuple[static_array_list, static_array, US6]:
    v1 = v0["messages"] # type: ignore
    v2 = method28(v1)
    del v1
    v3 = v0["pl_type"] # type: ignore
    v4 = method5(v3)
    del v3
    v5 = v0["ui_game_state"] # type: ignore
    del v0
    v6 = method39(v5)
    del v5
    return v2, v4, v6
def method10(v0 : object) -> Tuple[u64, US3, static_array_list, static_array, US6]:
    v1 = v0["private"] # type: ignore
    v2, v3 = method11(v1)
    del v1
    v4 = v0["public"] # type: ignore
    del v0
    v5, v6, v7 = method27(v4)
    del v4
    return v2, v3, v5, v6, v7
def method45(v0 : object) -> cp.ndarray:
    assert isinstance(v0,cp.ndarray), f'The object needs to be the right primitive type. Got: {v0}'
    v1 = v0
    del v0
    return v1
def method44(v0 : object) -> cp.ndarray:
    v1 = method45(v0)
    del v0
    return v1
def method43(v0 : object) -> Tuple[cp.ndarray, cp.ndarray, cp.ndarray]:
    v1 = v0[0] # type: ignore
    v2 = method44(v1)
    del v1
    v3 = v0[1] # type: ignore
    v4 = method44(v3)
    del v3
    v5 = v0[2] # type: ignore
    v6 = method44(v5)
    del v5
    v7 = v0[3] # type: ignore
    del v0
    method3(v7)
    del v7
    return v2, v4, v6
def method42(v0 : object) -> Tuple[cp.ndarray, cp.ndarray, cp.ndarray]:
    v1, v2, v3 = method43(v0)
    del v0
    return v1, v2, v3
def method41(v0 : object) -> Tuple[cp.ndarray, cp.ndarray, cp.ndarray]:
    v1, v2, v3 = method42(v0)
    del v0
    return v1, v2, v3
def method40(v0 : object) -> Tuple[cp.ndarray, cp.ndarray, cp.ndarray]:
    v1 = v0["model_ptrs"] # type: ignore
    del v0
    v2, v3, v4 = method41(v1)
    del v1
    return v2, v3, v4
def method9(v0 : object) -> Tuple[u64, US3, static_array_list, static_array, US6, cp.ndarray, cp.ndarray, cp.ndarray]:
    v1 = v0["game"] # type: ignore
    v2, v3, v4, v5, v6 = method10(v1)
    del v1
    v7 = v0["neural"] # type: ignore
    del v0
    v8, v9, v10 = method40(v7)
    del v7
    return v2, v3, v4, v5, v6, v8, v9, v10
def method8(v0 : object) -> Tuple[u64, US3, static_array_list, static_array, US6, cp.ndarray, cp.ndarray, cp.ndarray]:
    return method9(v0)
def method47(v0 : cp.ndarray, v1 : u64) -> None:
    v3 = v0[0:].view(cp.uint64)
    del v0
    v3[0] = v1
    del v1, v3
    return 
def method48(v0 : cp.ndarray, v1 : i32) -> None:
    v3 = v0[8:].view(cp.int32)
    del v0
    v3[0] = v1
    del v1, v3
    return 
def method49(v0 : cp.ndarray) -> None:
    del v0
    return 
def method51(v0 : cp.ndarray, v1 : i32) -> None:
    v3 = v0[0:].view(cp.int32)
    del v0
    v3[0] = v1
    del v1, v3
    return 
def method53(v0 : i32) -> bool:
    v1 = v0 < 2
    del v0
    return v1
def method56(v0 : cp.ndarray, v1 : u8) -> None:
    v3 = v0[0:].view(cp.uint8)
    del v0
    v3[0] = v1
    del v1, v3
    return 
def method55(v0 : cp.ndarray, v1 : u8) -> None:
    return method56(v0, v1)
def method54(v0 : cp.ndarray, v1 : static_array) -> None:
    v2 = 0
    while method53(v2):
        v4 = u64(v2)
        v6 = v0[v4:].view(cp.uint8)
        del v4
        v7 = 0 <= v2
        if v7:
            v8 = v2 < 2
            v9 = v8
        else:
            v9 = False
        del v7
        v10 = v9 == False
        if v10:
            v11 = "Index must be in range."
            assert v9, v11
            del v11
        else:
            pass
        del v9, v10
        v13 = v1[v2]
        method55(v6, v13)
        del v6, v13
        v2 += 1 
    del v0, v1, v2
    return 
def method57(v0 : cp.ndarray, v1 : i32) -> None:
    v3 = v0[28:].view(cp.int32)
    del v0
    v3[0] = v1
    del v1, v3
    return 
def method59(v0 : i32) -> bool:
    v1 = v0 < 3
    del v0
    return v1
def method58(v0 : cp.ndarray, v1 : static_array) -> None:
    v2 = 0
    while method59(v2):
        v4 = u64(v2)
        v6 = v0[v4:].view(cp.uint8)
        del v4
        v7 = 0 <= v2
        if v7:
            v8 = v2 < 3
            v9 = v8
        else:
            v9 = False
        del v7
        v10 = v9 == False
        if v10:
            v11 = "Index must be in range."
            assert v9, v11
            del v11
        else:
            pass
        del v9, v10
        v13 = v1[v2]
        method55(v6, v13)
        del v6, v13
        v2 += 1 
    del v0, v1, v2
    return 
def method61(v0 : i32) -> bool:
    v1 = v0 < 5
    del v0
    return v1
def method60(v0 : cp.ndarray, v1 : static_array) -> None:
    v2 = 0
    while method61(v2):
        v4 = u64(v2)
        v6 = v0[v4:].view(cp.uint8)
        del v4
        v7 = 0 <= v2
        if v7:
            v8 = v2 < 5
            v9 = v8
        else:
            v9 = False
        del v7
        v10 = v9 == False
        if v10:
            v11 = "Index must be in range."
            assert v9, v11
            del v11
        else:
            pass
        del v9, v10
        v13 = v1[v2]
        method55(v6, v13)
        del v6, v13
        v2 += 1 
    del v0, v1, v2
    return 
def method63(v0 : i32) -> bool:
    v1 = v0 < 4
    del v0
    return v1
def method62(v0 : cp.ndarray, v1 : static_array) -> None:
    v2 = 0
    while method63(v2):
        v4 = u64(v2)
        v6 = v0[v4:].view(cp.uint8)
        del v4
        v7 = 0 <= v2
        if v7:
            v8 = v2 < 4
            v9 = v8
        else:
            v9 = False
        del v7
        v10 = v9 == False
        if v10:
            v11 = "Index must be in range."
            assert v9, v11
            del v11
        else:
            pass
        del v9, v10
        v13 = v1[v2]
        method55(v6, v13)
        del v6, v13
        v2 += 1 
    del v0, v1, v2
    return 
def method52(v0 : cp.ndarray, v1 : i32, v2 : static_array, v3 : static_array, v4 : i32, v5 : static_array, v6 : US5) -> None:
    v8 = v0[0:].view(cp.int32)
    v8[0] = v1
    del v1, v8
    v9 = 0
    while method53(v9):
        v11 = u64(v9)
        v12 = v11 * 2
        del v11
        v13 = 4 + v12
        del v12
        v15 = v0[v13:].view(cp.uint8)
        del v13
        v16 = 0 <= v9
        if v16:
            v17 = v9 < 2
            v18 = v17
        else:
            v18 = False
        del v16
        v19 = v18 == False
        if v19:
            v20 = "Index must be in range."
            assert v18, v20
            del v20
        else:
            pass
        del v18, v19
        v22 = v2[v9]
        method54(v15, v22)
        del v15, v22
        v9 += 1 
    del v2, v9
    v23 = 0
    while method53(v23):
        v25 = u64(v23)
        v26 = v25 * 4
        del v25
        v27 = 8 + v26
        del v26
        v29 = v0[v27:].view(cp.uint8)
        del v27
        v30 = 0 <= v23
        if v30:
            v31 = v23 < 2
            v32 = v31
        else:
            v32 = False
        del v30
        v33 = v32 == False
        if v33:
            v34 = "Index must be in range."
            assert v32, v34
            del v34
        else:
            pass
        del v32, v33
        v36 = v3[v23]
        method51(v29, v36)
        del v29, v36
        v23 += 1 
    del v3, v23
    v38 = v0[16:].view(cp.int32)
    v38[0] = v4
    del v4, v38
    v39 = 0
    while method53(v39):
        v41 = u64(v39)
        v42 = v41 * 4
        del v41
        v43 = 20 + v42
        del v42
        v45 = v0[v43:].view(cp.uint8)
        del v43
        v46 = 0 <= v39
        if v46:
            v47 = v39 < 2
            v48 = v47
        else:
            v48 = False
        del v46
        v49 = v48 == False
        if v49:
            v50 = "Index must be in range."
            assert v48, v50
            del v50
        else:
            pass
        del v48, v49
        v52 = v5[v39]
        method51(v45, v52)
        del v45, v52
        v39 += 1 
    del v5, v39
    v53 = v6.tag
    method57(v0, v53)
    del v53
    v55 = v0[32:].view(cp.uint8)
    del v0
    match v6:
        case US5_0(v56): # Flop
            del v6
            return method58(v55, v56)
        case US5_1(): # Preflop
            del v6
            return method49(v55)
        case US5_2(v57): # River
            del v6
            return method60(v55, v57)
        case US5_3(v58): # Turn
            del v6
            return method62(v55, v58)
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method65(v0 : cp.ndarray, v1 : i32) -> None:
    v3 = v0[40:].view(cp.int32)
    del v0
    v3[0] = v1
    del v1, v3
    return 
def method64(v0 : cp.ndarray, v1 : i32, v2 : static_array, v3 : static_array, v4 : i32, v5 : static_array, v6 : US5, v7 : US1) -> None:
    v9 = v0[0:].view(cp.int32)
    v9[0] = v1
    del v1, v9
    v10 = 0
    while method53(v10):
        v12 = u64(v10)
        v13 = v12 * 2
        del v12
        v14 = 4 + v13
        del v13
        v16 = v0[v14:].view(cp.uint8)
        del v14
        v17 = 0 <= v10
        if v17:
            v18 = v10 < 2
            v19 = v18
        else:
            v19 = False
        del v17
        v20 = v19 == False
        if v20:
            v21 = "Index must be in range."
            assert v19, v21
            del v21
        else:
            pass
        del v19, v20
        v23 = v2[v10]
        method54(v16, v23)
        del v16, v23
        v10 += 1 
    del v2, v10
    v24 = 0
    while method53(v24):
        v26 = u64(v24)
        v27 = v26 * 4
        del v26
        v28 = 8 + v27
        del v27
        v30 = v0[v28:].view(cp.uint8)
        del v28
        v31 = 0 <= v24
        if v31:
            v32 = v24 < 2
            v33 = v32
        else:
            v33 = False
        del v31
        v34 = v33 == False
        if v34:
            v35 = "Index must be in range."
            assert v33, v35
            del v35
        else:
            pass
        del v33, v34
        v37 = v3[v24]
        method51(v30, v37)
        del v30, v37
        v24 += 1 
    del v3, v24
    v39 = v0[16:].view(cp.int32)
    v39[0] = v4
    del v4, v39
    v40 = 0
    while method53(v40):
        v42 = u64(v40)
        v43 = v42 * 4
        del v42
        v44 = 20 + v43
        del v43
        v46 = v0[v44:].view(cp.uint8)
        del v44
        v47 = 0 <= v40
        if v47:
            v48 = v40 < 2
            v49 = v48
        else:
            v49 = False
        del v47
        v50 = v49 == False
        if v50:
            v51 = "Index must be in range."
            assert v49, v51
            del v51
        else:
            pass
        del v49, v50
        v53 = v5[v40]
        method51(v46, v53)
        del v46, v53
        v40 += 1 
    del v5, v40
    v54 = v6.tag
    method57(v0, v54)
    del v54
    v56 = v0[32:].view(cp.uint8)
    match v6:
        case US5_0(v57): # Flop
            method58(v56, v57)
        case US5_1(): # Preflop
            method49(v56)
        case US5_2(v58): # River
            method60(v56, v58)
        case US5_3(v59): # Turn
            method62(v56, v59)
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
    del v6, v56
    v60 = v7.tag
    method65(v0, v60)
    del v60
    v62 = v0[44:].view(cp.uint8)
    del v0
    match v7:
        case US1_0(): # A_All_In
            del v7
            return method49(v62)
        case US1_1(): # A_Call
            del v7
            return method49(v62)
        case US1_2(): # A_Fold
            del v7
            return method49(v62)
        case US1_3(v63): # A_Raise
            del v7
            return method51(v62, v63)
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method50(v0 : cp.ndarray, v1 : US4) -> None:
    v2 = v1.tag
    method51(v0, v2)
    del v2
    v4 = v0[16:].view(cp.uint8)
    del v0
    match v1:
        case US4_0(v5, v6, v7, v8, v9, v10): # G_Flop
            del v1
            return method52(v4, v5, v6, v7, v8, v9, v10)
        case US4_1(v11, v12, v13, v14, v15, v16): # G_Fold
            del v1
            return method52(v4, v11, v12, v13, v14, v15, v16)
        case US4_2(): # G_Preflop
            del v1
            return method49(v4)
        case US4_3(v17, v18, v19, v20, v21, v22): # G_River
            del v1
            return method52(v4, v17, v18, v19, v20, v21, v22)
        case US4_4(v23, v24, v25, v26, v27, v28): # G_Round
            del v1
            return method52(v4, v23, v24, v25, v26, v27, v28)
        case US4_5(v29, v30, v31, v32, v33, v34, v35): # G_Round'
            del v1
            return method64(v4, v29, v30, v31, v32, v33, v34, v35)
        case US4_6(v36, v37, v38, v39, v40, v41): # G_Showdown
            del v1
            return method52(v4, v36, v37, v38, v39, v40, v41)
        case US4_7(v42, v43, v44, v45, v46, v47): # G_Turn
            del v1
            return method52(v4, v42, v43, v44, v45, v46, v47)
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method66(v0 : cp.ndarray, v1 : i32) -> None:
    v3 = v0[80:].view(cp.int32)
    del v0
    v3[0] = v1
    del v1, v3
    return 
def method68(v0 : cp.ndarray, v1 : static_array_list) -> None:
    v2 = v1.length
    method51(v0, v2)
    del v2
    v3 = v1.length
    v4 = 0
    while method6(v3, v4):
        v6 = u64(v4)
        v7 = 4 + v6
        del v6
        v9 = v0[v7:].view(cp.uint8)
        del v7
        v11 = v1[v4]
        method55(v9, v11)
        del v9, v11
        v4 += 1 
    del v0, v1, v3, v4
    return 
def method69(v0 : cp.ndarray, v1 : i32, v2 : i32) -> None:
    v4 = v0[0:].view(cp.int32)
    v4[0] = v1
    del v1, v4
    v6 = v0[4:].view(cp.int32)
    del v0
    v6[0] = v2
    del v2, v6
    return 
def method71(v0 : cp.ndarray, v1 : i32) -> None:
    v3 = v0[4:].view(cp.int32)
    del v0
    v3[0] = v1
    del v1, v3
    return 
def method70(v0 : cp.ndarray, v1 : i32, v2 : US1) -> None:
    v4 = v0[0:].view(cp.int32)
    v4[0] = v1
    del v1, v4
    v5 = v2.tag
    method71(v0, v5)
    del v5
    v7 = v0[8:].view(cp.uint8)
    del v0
    match v2:
        case US1_0(): # A_All_In
            del v2
            return method49(v7)
        case US1_1(): # A_Call
            del v2
            return method49(v7)
        case US1_2(): # A_Fold
            del v2
            return method49(v7)
        case US1_3(v8): # A_Raise
            del v2
            return method51(v7, v8)
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method72(v0 : cp.ndarray, v1 : i32, v2 : static_array) -> None:
    v4 = v0[0:].view(cp.int32)
    v4[0] = v1
    del v1, v4
    v5 = 0
    while method53(v5):
        v7 = u64(v5)
        v8 = 4 + v7
        del v7
        v10 = v0[v8:].view(cp.uint8)
        del v8
        v11 = 0 <= v5
        if v11:
            v12 = v5 < 2
            v13 = v12
        else:
            v13 = False
        del v11
        v14 = v13 == False
        if v14:
            v15 = "Index must be in range."
            assert v13, v15
            del v15
        else:
            pass
        del v13, v14
        v17 = v2[v5]
        method55(v10, v17)
        del v10, v17
        v5 += 1 
    del v0, v2, v5
    return 
def method75(v0 : cp.ndarray, v1 : static_array, v2 : i8) -> None:
    v3 = 0
    while method61(v3):
        v5 = u64(v3)
        v7 = v0[v5:].view(cp.uint8)
        del v5
        v8 = 0 <= v3
        if v8:
            v9 = v3 < 5
            v10 = v9
        else:
            v10 = False
        del v8
        v11 = v10 == False
        if v11:
            v12 = "Index must be in range."
            assert v10, v12
            del v12
        else:
            pass
        del v10, v11
        v14 = v1[v3]
        method55(v7, v14)
        del v7, v14
        v3 += 1 
    del v1, v3
    v16 = v0[5:].view(cp.int8)
    del v0
    v16[0] = v2
    del v2, v16
    return 
def method74(v0 : cp.ndarray, v1 : static_array, v2 : i8) -> None:
    return method75(v0, v1, v2)
def method73(v0 : cp.ndarray, v1 : i32, v2 : static_array, v3 : i32) -> None:
    v5 = v0[0:].view(cp.int32)
    v5[0] = v1
    del v1, v5
    v6 = 0
    while method53(v6):
        v8 = u64(v6)
        v9 = v8 * 8
        del v8
        v10 = 8 + v9
        del v9
        v12 = v0[v10:].view(cp.uint8)
        del v10
        v13 = 0 <= v6
        if v13:
            v14 = v6 < 2
            v15 = v14
        else:
            v15 = False
        del v13
        v16 = v15 == False
        if v16:
            v17 = "Index must be in range."
            assert v15, v17
            del v17
        else:
            pass
        del v15, v16
        v20, v21 = v2[v6]
        method74(v12, v20, v21)
        del v12, v20, v21
        v6 += 1 
    del v2, v6
    v23 = v0[24:].view(cp.int32)
    del v0
    v23[0] = v3
    del v3, v23
    return 
def method67(v0 : cp.ndarray, v1 : US7) -> None:
    v2 = v1.tag
    method51(v0, v2)
    del v2
    v4 = v0[16:].view(cp.uint8)
    del v0
    match v1:
        case US7_0(v5): # CommunityCardsAre
            del v1
            return method68(v4, v5)
        case US7_1(v6, v7): # Fold
            del v1
            return method69(v4, v6, v7)
        case US7_2(v8, v9): # PlayerAction
            del v1
            return method70(v4, v8, v9)
        case US7_3(v10, v11): # PlayerGotCards
            del v1
            return method72(v4, v10, v11)
        case US7_4(v12, v13, v14): # Showdown
            del v1
            return method73(v4, v12, v13, v14)
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method76(v0 : cp.ndarray, v1 : US2) -> None:
    v2 = v1.tag
    method51(v0, v2)
    del v2
    v4 = v0[4:].view(cp.uint8)
    del v0
    match v1:
        case US2_0(): # CallingMachine
            del v1
            return method49(v4)
        case US2_1(): # Computer
            del v1
            return method49(v4)
        case US2_2(): # Human
            del v1
            return method49(v4)
        case US2_3(): # Random
            del v1
            return method49(v4)
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method77(v0 : cp.ndarray, v1 : i32) -> None:
    v3 = v0[6248:].view(cp.int32)
    del v0
    v3[0] = v1
    del v1, v3
    return 
def method46(v0 : cp.ndarray, v1 : u64, v2 : US3, v3 : static_array_list, v4 : static_array, v5 : US6) -> None:
    method47(v0, v1)
    del v1
    v6 = v2.tag
    method48(v0, v6)
    del v6
    v8 = v0[16:].view(cp.uint8)
    match v2:
        case US3_0(): # None
            method49(v8)
        case US3_1(v9): # Some
            method50(v8, v9)
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
    del v2, v8
    v10 = v3.length
    method66(v0, v10)
    del v10
    v11 = v3.length
    v12 = 0
    while method6(v11, v12):
        v14 = u64(v12)
        v15 = v14 * 48
        del v14
        v16 = 96 + v15
        del v15
        v18 = v0[v16:].view(cp.uint8)
        del v16
        v20 = v3[v12]
        method67(v18, v20)
        del v18, v20
        v12 += 1 
    del v3, v11, v12
    v21 = 0
    while method53(v21):
        v23 = u64(v21)
        v24 = v23 * 4
        del v23
        v25 = 6240 + v24
        del v24
        v27 = v0[v25:].view(cp.uint8)
        del v25
        v28 = 0 <= v21
        if v28:
            v29 = v21 < 2
            v30 = v29
        else:
            v30 = False
        del v28
        v31 = v30 == False
        if v31:
            v32 = "Index must be in range."
            assert v30, v32
            del v32
        else:
            pass
        del v30, v31
        v34 = v4[v21]
        method76(v27, v34)
        del v27, v34
        v21 += 1 
    del v4, v21
    v35 = v5.tag
    method77(v0, v35)
    del v35
    v37 = v0[6256:].view(cp.uint8)
    del v0
    match v5:
        case US6_0(): # GameNotStarted
            del v5
            return method49(v37)
        case US6_1(v38, v39, v40, v41, v42, v43): # GameOver
            del v5
            return method52(v37, v38, v39, v40, v41, v42, v43)
        case US6_2(v44, v45, v46, v47, v48, v49): # WaitingForActionFromPlayerId
            del v5
            return method52(v37, v44, v45, v46, v47, v48, v49)
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method79(v0 : cp.ndarray, v1 : US1) -> None:
    v2 = v1.tag
    method51(v0, v2)
    del v2
    v4 = v0[4:].view(cp.uint8)
    del v0
    match v1:
        case US1_0(): # A_All_In
            del v1
            return method49(v4)
        case US1_1(): # A_Call
            del v1
            return method49(v4)
        case US1_2(): # A_Fold
            del v1
            return method49(v4)
        case US1_3(v5): # A_Raise
            del v1
            return method51(v4, v5)
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method80(v0 : cp.ndarray, v1 : static_array) -> None:
    v2 = 0
    while method53(v2):
        v4 = u64(v2)
        v5 = v4 * 4
        del v4
        v7 = v0[v5:].view(cp.uint8)
        del v5
        v8 = 0 <= v2
        if v8:
            v9 = v2 < 2
            v10 = v9
        else:
            v10 = False
        del v8
        v11 = v10 == False
        if v11:
            v12 = "Index must be in range."
            assert v10, v12
            del v12
        else:
            pass
        del v10, v11
        v14 = v1[v2]
        method76(v7, v14)
        del v7, v14
        v2 += 1 
    del v0, v1, v2
    return 
def method78(v0 : cp.ndarray, v1 : US0) -> None:
    v2 = v1.tag
    method51(v0, v2)
    del v2
    v4 = v0[8:].view(cp.uint8)
    del v0
    match v1:
        case US0_0(v5): # ActionSelected
            del v1
            return method79(v4, v5)
        case US0_1(v6): # PlayerChanged
            del v1
            return method80(v4, v6)
        case US0_2(): # StartGame
            del v1
            return method49(v4)
        case US0_3(): # StartTrainingVsCallingMachine
            del v1
            return method49(v4)
        case US0_4(): # StartTrainingVsSelf
            del v1
            return method49(v4)
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method81(v0 : i32) -> bool:
    v1 = v0 < 1024
    del v0
    return v1
def method83(v0 : cp.ndarray) -> u64:
    v2 = v0[0:].view(cp.uint64)
    del v0
    v3 = v2[0].item()
    del v2
    return v3
def method84(v0 : cp.ndarray) -> i32:
    v2 = v0[8:].view(cp.int32)
    del v0
    v3 = v2[0].item()
    del v2
    return v3
def method85(v0 : cp.ndarray) -> None:
    del v0
    return 
def method87(v0 : cp.ndarray) -> i32:
    v2 = v0[0:].view(cp.int32)
    del v0
    v3 = v2[0].item()
    del v2
    return v3
def method91(v0 : cp.ndarray) -> u8:
    v2 = v0[0:].view(cp.uint8)
    del v0
    v3 = v2[0].item()
    del v2
    return v3
def method90(v0 : cp.ndarray) -> u8:
    v1 = method91(v0)
    del v0
    return v1
def method89(v0 : cp.ndarray) -> static_array:
    v2 = static_array(2)
    v3 = 0
    while method53(v3):
        v5 = u64(v3)
        v7 = v0[v5:].view(cp.uint8)
        del v5
        v8 = method90(v7)
        del v7
        v2[v3] = v8
        del v8
        v3 += 1 
    del v0, v3
    return v2
def method92(v0 : cp.ndarray) -> i32:
    v2 = v0[28:].view(cp.int32)
    del v0
    v3 = v2[0].item()
    del v2
    return v3
def method93(v0 : cp.ndarray) -> static_array:
    v2 = static_array(3)
    v3 = 0
    while method59(v3):
        v5 = u64(v3)
        v7 = v0[v5:].view(cp.uint8)
        del v5
        v8 = method90(v7)
        del v7
        v2[v3] = v8
        del v8
        v3 += 1 
    del v0, v3
    return v2
def method94(v0 : cp.ndarray) -> static_array:
    v2 = static_array(5)
    v3 = 0
    while method61(v3):
        v5 = u64(v3)
        v7 = v0[v5:].view(cp.uint8)
        del v5
        v8 = method90(v7)
        del v7
        v2[v3] = v8
        del v8
        v3 += 1 
    del v0, v3
    return v2
def method95(v0 : cp.ndarray) -> static_array:
    v2 = static_array(4)
    v3 = 0
    while method63(v3):
        v5 = u64(v3)
        v7 = v0[v5:].view(cp.uint8)
        del v5
        v8 = method90(v7)
        del v7
        v2[v3] = v8
        del v8
        v3 += 1 
    del v0, v3
    return v2
def method88(v0 : cp.ndarray) -> Tuple[i32, static_array, static_array, i32, static_array, US5]:
    v2 = v0[0:].view(cp.int32)
    v3 = v2[0].item()
    del v2
    v5 = static_array(2)
    v6 = 0
    while method53(v6):
        v8 = u64(v6)
        v9 = v8 * 2
        del v8
        v10 = 4 + v9
        del v9
        v12 = v0[v10:].view(cp.uint8)
        del v10
        v13 = method89(v12)
        del v12
        v5[v6] = v13
        del v13
        v6 += 1 
    del v6
    v15 = static_array(2)
    v16 = 0
    while method53(v16):
        v18 = u64(v16)
        v19 = v18 * 4
        del v18
        v20 = 8 + v19
        del v19
        v22 = v0[v20:].view(cp.uint8)
        del v20
        v23 = method87(v22)
        del v22
        v15[v16] = v23
        del v23
        v16 += 1 
    del v16
    v25 = v0[16:].view(cp.int32)
    v26 = v25[0].item()
    del v25
    v28 = static_array(2)
    v29 = 0
    while method53(v29):
        v31 = u64(v29)
        v32 = v31 * 4
        del v31
        v33 = 20 + v32
        del v32
        v35 = v0[v33:].view(cp.uint8)
        del v33
        v36 = method87(v35)
        del v35
        v28[v29] = v36
        del v36
        v29 += 1 
    del v29
    v37 = method92(v0)
    v39 = v0[32:].view(cp.uint8)
    del v0
    if v37 == 0:
        v41 = method93(v39)
        v48 = US5_0(v41)
    elif v37 == 1:
        method85(v39)
        v48 = US5_1()
    elif v37 == 2:
        v44 = method94(v39)
        v48 = US5_2(v44)
    elif v37 == 3:
        v46 = method95(v39)
        v48 = US5_3(v46)
    else:
        raise Exception("Invalid tag.")
    del v37, v39
    return v3, v5, v15, v26, v28, v48
def method97(v0 : cp.ndarray) -> i32:
    v2 = v0[40:].view(cp.int32)
    del v0
    v3 = v2[0].item()
    del v2
    return v3
def method96(v0 : cp.ndarray) -> Tuple[i32, static_array, static_array, i32, static_array, US5, US1]:
    v2 = v0[0:].view(cp.int32)
    v3 = v2[0].item()
    del v2
    v5 = static_array(2)
    v6 = 0
    while method53(v6):
        v8 = u64(v6)
        v9 = v8 * 2
        del v8
        v10 = 4 + v9
        del v9
        v12 = v0[v10:].view(cp.uint8)
        del v10
        v13 = method89(v12)
        del v12
        v5[v6] = v13
        del v13
        v6 += 1 
    del v6
    v15 = static_array(2)
    v16 = 0
    while method53(v16):
        v18 = u64(v16)
        v19 = v18 * 4
        del v18
        v20 = 8 + v19
        del v19
        v22 = v0[v20:].view(cp.uint8)
        del v20
        v23 = method87(v22)
        del v22
        v15[v16] = v23
        del v23
        v16 += 1 
    del v16
    v25 = v0[16:].view(cp.int32)
    v26 = v25[0].item()
    del v25
    v28 = static_array(2)
    v29 = 0
    while method53(v29):
        v31 = u64(v29)
        v32 = v31 * 4
        del v31
        v33 = 20 + v32
        del v32
        v35 = v0[v33:].view(cp.uint8)
        del v33
        v36 = method87(v35)
        del v35
        v28[v29] = v36
        del v36
        v29 += 1 
    del v29
    v37 = method92(v0)
    v39 = v0[32:].view(cp.uint8)
    if v37 == 0:
        v41 = method93(v39)
        v48 = US5_0(v41)
    elif v37 == 1:
        method85(v39)
        v48 = US5_1()
    elif v37 == 2:
        v44 = method94(v39)
        v48 = US5_2(v44)
    elif v37 == 3:
        v46 = method95(v39)
        v48 = US5_3(v46)
    else:
        raise Exception("Invalid tag.")
    del v37, v39
    v49 = method97(v0)
    v51 = v0[44:].view(cp.uint8)
    del v0
    if v49 == 0:
        method85(v51)
        v58 = US1_0()
    elif v49 == 1:
        method85(v51)
        v58 = US1_1()
    elif v49 == 2:
        method85(v51)
        v58 = US1_2()
    elif v49 == 3:
        v56 = method87(v51)
        v58 = US1_3(v56)
    else:
        raise Exception("Invalid tag.")
    del v49, v51
    return v3, v5, v15, v26, v28, v48, v58
def method86(v0 : cp.ndarray) -> US4:
    v1 = method87(v0)
    v3 = v0[16:].view(cp.uint8)
    del v0
    if v1 == 0:
        del v1
        v5, v6, v7, v8, v9, v10 = method88(v3)
        del v3
        return US4_0(v5, v6, v7, v8, v9, v10)
    elif v1 == 1:
        del v1
        v12, v13, v14, v15, v16, v17 = method88(v3)
        del v3
        return US4_1(v12, v13, v14, v15, v16, v17)
    elif v1 == 2:
        del v1
        method85(v3)
        del v3
        return US4_2()
    elif v1 == 3:
        del v1
        v20, v21, v22, v23, v24, v25 = method88(v3)
        del v3
        return US4_3(v20, v21, v22, v23, v24, v25)
    elif v1 == 4:
        del v1
        v27, v28, v29, v30, v31, v32 = method88(v3)
        del v3
        return US4_4(v27, v28, v29, v30, v31, v32)
    elif v1 == 5:
        del v1
        v34, v35, v36, v37, v38, v39, v40 = method96(v3)
        del v3
        return US4_5(v34, v35, v36, v37, v38, v39, v40)
    elif v1 == 6:
        del v1
        v42, v43, v44, v45, v46, v47 = method88(v3)
        del v3
        return US4_6(v42, v43, v44, v45, v46, v47)
    elif v1 == 7:
        del v1
        v49, v50, v51, v52, v53, v54 = method88(v3)
        del v3
        return US4_7(v49, v50, v51, v52, v53, v54)
    else:
        del v1, v3
        raise Exception("Invalid tag.")
def method98(v0 : cp.ndarray) -> i32:
    v2 = v0[80:].view(cp.int32)
    del v0
    v3 = v2[0].item()
    del v2
    return v3
def method100(v0 : cp.ndarray) -> static_array_list:
    v2 = static_array_list(5)
    v3 = method87(v0)
    v2.unsafe_set_length(v3)
    del v3
    v4 = v2.length
    v5 = 0
    while method6(v4, v5):
        v7 = u64(v5)
        v8 = 4 + v7
        del v7
        v10 = v0[v8:].view(cp.uint8)
        del v8
        v11 = method90(v10)
        del v10
        v2[v5] = v11
        del v11
        v5 += 1 
    del v0, v4, v5
    return v2
def method101(v0 : cp.ndarray) -> Tuple[i32, i32]:
    v2 = v0[0:].view(cp.int32)
    v3 = v2[0].item()
    del v2
    v5 = v0[4:].view(cp.int32)
    del v0
    v6 = v5[0].item()
    del v5
    return v3, v6
def method103(v0 : cp.ndarray) -> i32:
    v2 = v0[4:].view(cp.int32)
    del v0
    v3 = v2[0].item()
    del v2
    return v3
def method102(v0 : cp.ndarray) -> Tuple[i32, US1]:
    v2 = v0[0:].view(cp.int32)
    v3 = v2[0].item()
    del v2
    v4 = method103(v0)
    v6 = v0[8:].view(cp.uint8)
    del v0
    if v4 == 0:
        method85(v6)
        v13 = US1_0()
    elif v4 == 1:
        method85(v6)
        v13 = US1_1()
    elif v4 == 2:
        method85(v6)
        v13 = US1_2()
    elif v4 == 3:
        v11 = method87(v6)
        v13 = US1_3(v11)
    else:
        raise Exception("Invalid tag.")
    del v4, v6
    return v3, v13
def method104(v0 : cp.ndarray) -> Tuple[i32, static_array]:
    v2 = v0[0:].view(cp.int32)
    v3 = v2[0].item()
    del v2
    v5 = static_array(2)
    v6 = 0
    while method53(v6):
        v8 = u64(v6)
        v9 = 4 + v8
        del v8
        v11 = v0[v9:].view(cp.uint8)
        del v9
        v12 = method90(v11)
        del v11
        v5[v6] = v12
        del v12
        v6 += 1 
    del v0, v6
    return v3, v5
def method107(v0 : cp.ndarray) -> Tuple[static_array, i8]:
    v2 = static_array(5)
    v3 = 0
    while method61(v3):
        v5 = u64(v3)
        v7 = v0[v5:].view(cp.uint8)
        del v5
        v8 = method90(v7)
        del v7
        v2[v3] = v8
        del v8
        v3 += 1 
    del v3
    v10 = v0[5:].view(cp.int8)
    del v0
    v11 = v10[0].item()
    del v10
    return v2, v11
def method106(v0 : cp.ndarray) -> Tuple[static_array, i8]:
    v1, v2 = method107(v0)
    del v0
    return v1, v2
def method105(v0 : cp.ndarray) -> Tuple[i32, static_array, i32]:
    v2 = v0[0:].view(cp.int32)
    v3 = v2[0].item()
    del v2
    v5 = static_array(2)
    v6 = 0
    while method53(v6):
        v8 = u64(v6)
        v9 = v8 * 8
        del v8
        v10 = 8 + v9
        del v9
        v12 = v0[v10:].view(cp.uint8)
        del v10
        v13, v14 = method106(v12)
        del v12
        v5[v6] = (v13, v14)
        del v13, v14
        v6 += 1 
    del v6
    v16 = v0[24:].view(cp.int32)
    del v0
    v17 = v16[0].item()
    del v16
    return v3, v5, v17
def method99(v0 : cp.ndarray) -> US7:
    v1 = method87(v0)
    v3 = v0[16:].view(cp.uint8)
    del v0
    if v1 == 0:
        del v1
        v5 = method100(v3)
        del v3
        return US7_0(v5)
    elif v1 == 1:
        del v1
        v7, v8 = method101(v3)
        del v3
        return US7_1(v7, v8)
    elif v1 == 2:
        del v1
        v10, v11 = method102(v3)
        del v3
        return US7_2(v10, v11)
    elif v1 == 3:
        del v1
        v13, v14 = method104(v3)
        del v3
        return US7_3(v13, v14)
    elif v1 == 4:
        del v1
        v16, v17, v18 = method105(v3)
        del v3
        return US7_4(v16, v17, v18)
    else:
        del v1, v3
        raise Exception("Invalid tag.")
def method108(v0 : cp.ndarray) -> US2:
    v1 = method87(v0)
    v3 = v0[4:].view(cp.uint8)
    del v0
    if v1 == 0:
        del v1
        method85(v3)
        del v3
        return US2_0()
    elif v1 == 1:
        del v1
        method85(v3)
        del v3
        return US2_1()
    elif v1 == 2:
        del v1
        method85(v3)
        del v3
        return US2_2()
    elif v1 == 3:
        del v1
        method85(v3)
        del v3
        return US2_3()
    else:
        del v1, v3
        raise Exception("Invalid tag.")
def method109(v0 : cp.ndarray) -> i32:
    v2 = v0[6248:].view(cp.int32)
    del v0
    v3 = v2[0].item()
    del v2
    return v3
def method82(v0 : cp.ndarray) -> Tuple[u64, US3, static_array_list, static_array, US6]:
    v1 = method83(v0)
    v2 = method84(v0)
    v4 = v0[16:].view(cp.uint8)
    if v2 == 0:
        method85(v4)
        v9 = US3_0()
    elif v2 == 1:
        v7 = method86(v4)
        v9 = US3_1(v7)
    else:
        raise Exception("Invalid tag.")
    del v2, v4
    v11 = static_array_list(128)
    v12 = method98(v0)
    v11.unsafe_set_length(v12)
    del v12
    v13 = v11.length
    v14 = 0
    while method6(v13, v14):
        v16 = u64(v14)
        v17 = v16 * 48
        del v16
        v18 = 96 + v17
        del v17
        v20 = v0[v18:].view(cp.uint8)
        del v18
        v21 = method99(v20)
        del v20
        v11[v14] = v21
        del v21
        v14 += 1 
    del v13, v14
    v23 = static_array(2)
    v24 = 0
    while method53(v24):
        v26 = u64(v24)
        v27 = v26 * 4
        del v26
        v28 = 6240 + v27
        del v27
        v30 = v0[v28:].view(cp.uint8)
        del v28
        v31 = method108(v30)
        del v30
        v23[v24] = v31
        del v31
        v24 += 1 
    del v24
    v32 = method109(v0)
    v34 = v0[6256:].view(cp.uint8)
    del v0
    if v32 == 0:
        method85(v34)
        v51 = US6_0()
    elif v32 == 1:
        v37, v38, v39, v40, v41, v42 = method88(v34)
        v51 = US6_1(v37, v38, v39, v40, v41, v42)
    elif v32 == 2:
        v44, v45, v46, v47, v48, v49 = method88(v34)
        v51 = US6_2(v44, v45, v46, v47, v48, v49)
    else:
        raise Exception("Invalid tag.")
    del v32, v34
    return v1, v9, v11, v23, v51
def method116(v0 : u64) -> object:
    v1 = v0
    del v0
    return v1
def method115(v0 : u64) -> object:
    return method116(v0)
def method118() -> object:
    v0 = []
    return v0
def method121(v0 : i32) -> object:
    v1 = v0
    del v0
    return v1
def method125(v0 : u8) -> object:
    v1 = v0
    del v0
    return v1
def method124(v0 : u8) -> object:
    return method125(v0)
def method123(v0 : static_array) -> object:
    v1 = []
    v2 = 0
    while method53(v2):
        v4 = 0 <= v2
        if v4:
            v5 = v2 < 2
            v6 = v5
        else:
            v6 = False
        del v4
        v7 = v6 == False
        if v7:
            v8 = "Index must be in range."
            assert v6, v8
            del v8
        else:
            pass
        del v6, v7
        v10 = v0[v2]
        v11 = method124(v10)
        del v10
        v1.append(v11)
        del v11
        v2 += 1 
    del v0, v2
    return v1
def method122(v0 : static_array) -> object:
    v1 = []
    v2 = 0
    while method53(v2):
        v4 = 0 <= v2
        if v4:
            v5 = v2 < 2
            v6 = v5
        else:
            v6 = False
        del v4
        v7 = v6 == False
        if v7:
            v8 = "Index must be in range."
            assert v6, v8
            del v8
        else:
            pass
        del v6, v7
        v10 = v0[v2]
        v11 = method123(v10)
        del v10
        v1.append(v11)
        del v11
        v2 += 1 
    del v0, v2
    return v1
def method126(v0 : static_array) -> object:
    v1 = []
    v2 = 0
    while method53(v2):
        v4 = 0 <= v2
        if v4:
            v5 = v2 < 2
            v6 = v5
        else:
            v6 = False
        del v4
        v7 = v6 == False
        if v7:
            v8 = "Index must be in range."
            assert v6, v8
            del v8
        else:
            pass
        del v6, v7
        v10 = v0[v2]
        v11 = method121(v10)
        del v10
        v1.append(v11)
        del v11
        v2 += 1 
    del v0, v2
    return v1
def method128(v0 : static_array) -> object:
    v1 = []
    v2 = 0
    while method59(v2):
        v4 = 0 <= v2
        if v4:
            v5 = v2 < 3
            v6 = v5
        else:
            v6 = False
        del v4
        v7 = v6 == False
        if v7:
            v8 = "Index must be in range."
            assert v6, v8
            del v8
        else:
            pass
        del v6, v7
        v10 = v0[v2]
        v11 = method124(v10)
        del v10
        v1.append(v11)
        del v11
        v2 += 1 
    del v0, v2
    return v1
def method129(v0 : static_array) -> object:
    v1 = []
    v2 = 0
    while method61(v2):
        v4 = 0 <= v2
        if v4:
            v5 = v2 < 5
            v6 = v5
        else:
            v6 = False
        del v4
        v7 = v6 == False
        if v7:
            v8 = "Index must be in range."
            assert v6, v8
            del v8
        else:
            pass
        del v6, v7
        v10 = v0[v2]
        v11 = method124(v10)
        del v10
        v1.append(v11)
        del v11
        v2 += 1 
    del v0, v2
    return v1
def method130(v0 : static_array) -> object:
    v1 = []
    v2 = 0
    while method63(v2):
        v4 = 0 <= v2
        if v4:
            v5 = v2 < 4
            v6 = v5
        else:
            v6 = False
        del v4
        v7 = v6 == False
        if v7:
            v8 = "Index must be in range."
            assert v6, v8
            del v8
        else:
            pass
        del v6, v7
        v10 = v0[v2]
        v11 = method124(v10)
        del v10
        v1.append(v11)
        del v11
        v2 += 1 
    del v0, v2
    return v1
def method127(v0 : US5) -> object:
    match v0:
        case US5_0(v1): # Flop
            del v0
            v2 = method128(v1)
            del v1
            v3 = "Flop"
            v4 = [v3,v2]
            del v2, v3
            return v4
        case US5_1(): # Preflop
            del v0
            v5 = method118()
            v6 = "Preflop"
            v7 = [v6,v5]
            del v5, v6
            return v7
        case US5_2(v8): # River
            del v0
            v9 = method129(v8)
            del v8
            v10 = "River"
            v11 = [v10,v9]
            del v9, v10
            return v11
        case US5_3(v12): # Turn
            del v0
            v13 = method130(v12)
            del v12
            v14 = "Turn"
            v15 = [v14,v13]
            del v13, v14
            return v15
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method120(v0 : i32, v1 : static_array, v2 : static_array, v3 : i32, v4 : static_array, v5 : US5) -> object:
    v6 = method121(v0)
    del v0
    v7 = method122(v1)
    del v1
    v8 = method126(v2)
    del v2
    v9 = method121(v3)
    del v3
    v10 = method126(v4)
    del v4
    v11 = method127(v5)
    del v5
    v12 = {'min_raise': v6, 'pl_card': v7, 'pot': v8, 'round_turn': v9, 'stack': v10, 'street': v11}
    del v6, v7, v8, v9, v10, v11
    return v12
def method132(v0 : US1) -> object:
    match v0:
        case US1_0(): # A_All_In
            del v0
            v1 = method118()
            v2 = "A_All_In"
            v3 = [v2,v1]
            del v1, v2
            return v3
        case US1_1(): # A_Call
            del v0
            v4 = method118()
            v5 = "A_Call"
            v6 = [v5,v4]
            del v4, v5
            return v6
        case US1_2(): # A_Fold
            del v0
            v7 = method118()
            v8 = "A_Fold"
            v9 = [v8,v7]
            del v7, v8
            return v9
        case US1_3(v10): # A_Raise
            del v0
            v11 = method121(v10)
            del v10
            v12 = "A_Raise"
            v13 = [v12,v11]
            del v11, v12
            return v13
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method131(v0 : i32, v1 : static_array, v2 : static_array, v3 : i32, v4 : static_array, v5 : US5, v6 : US1) -> object:
    v7 = []
    v8 = method120(v0, v1, v2, v3, v4, v5)
    del v0, v1, v2, v3, v4, v5
    v7.append(v8)
    del v8
    v9 = method132(v6)
    del v6
    v7.append(v9)
    del v9
    v10 = v7
    del v7
    return v10
def method119(v0 : US4) -> object:
    match v0:
        case US4_0(v1, v2, v3, v4, v5, v6): # G_Flop
            del v0
            v7 = method120(v1, v2, v3, v4, v5, v6)
            del v1, v2, v3, v4, v5, v6
            v8 = "G_Flop"
            v9 = [v8,v7]
            del v7, v8
            return v9
        case US4_1(v10, v11, v12, v13, v14, v15): # G_Fold
            del v0
            v16 = method120(v10, v11, v12, v13, v14, v15)
            del v10, v11, v12, v13, v14, v15
            v17 = "G_Fold"
            v18 = [v17,v16]
            del v16, v17
            return v18
        case US4_2(): # G_Preflop
            del v0
            v19 = method118()
            v20 = "G_Preflop"
            v21 = [v20,v19]
            del v19, v20
            return v21
        case US4_3(v22, v23, v24, v25, v26, v27): # G_River
            del v0
            v28 = method120(v22, v23, v24, v25, v26, v27)
            del v22, v23, v24, v25, v26, v27
            v29 = "G_River"
            v30 = [v29,v28]
            del v28, v29
            return v30
        case US4_4(v31, v32, v33, v34, v35, v36): # G_Round
            del v0
            v37 = method120(v31, v32, v33, v34, v35, v36)
            del v31, v32, v33, v34, v35, v36
            v38 = "G_Round"
            v39 = [v38,v37]
            del v37, v38
            return v39
        case US4_5(v40, v41, v42, v43, v44, v45, v46): # G_Round'
            del v0
            v47 = method131(v40, v41, v42, v43, v44, v45, v46)
            del v40, v41, v42, v43, v44, v45, v46
            v48 = "G_Round'"
            v49 = [v48,v47]
            del v47, v48
            return v49
        case US4_6(v50, v51, v52, v53, v54, v55): # G_Showdown
            del v0
            v56 = method120(v50, v51, v52, v53, v54, v55)
            del v50, v51, v52, v53, v54, v55
            v57 = "G_Showdown"
            v58 = [v57,v56]
            del v56, v57
            return v58
        case US4_7(v59, v60, v61, v62, v63, v64): # G_Turn
            del v0
            v65 = method120(v59, v60, v61, v62, v63, v64)
            del v59, v60, v61, v62, v63, v64
            v66 = "G_Turn"
            v67 = [v66,v65]
            del v65, v66
            return v67
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method117(v0 : US3) -> object:
    match v0:
        case US3_0(): # None
            del v0
            v1 = method118()
            v2 = "None"
            v3 = [v2,v1]
            del v1, v2
            return v3
        case US3_1(v4): # Some
            del v0
            v5 = method119(v4)
            del v4
            v6 = "Some"
            v7 = [v6,v5]
            del v5, v6
            return v7
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method114(v0 : u64, v1 : US3) -> object:
    v2 = method115(v0)
    del v0
    v3 = method117(v1)
    del v1
    v4 = {'deck': v2, 'game': v3}
    del v2, v3
    return v4
def method136(v0 : static_array_list) -> object:
    v1 = []
    v2 = v0.length
    v3 = 0
    while method6(v2, v3):
        v6 = v0[v3]
        v7 = method124(v6)
        del v6
        v1.append(v7)
        del v7
        v3 += 1 
    del v0, v2, v3
    return v1
def method137(v0 : i32, v1 : i32) -> object:
    v2 = method121(v0)
    del v0
    v3 = method121(v1)
    del v1
    v4 = {'chips_won': v2, 'winner_id': v3}
    del v2, v3
    return v4
def method138(v0 : i32, v1 : US1) -> object:
    v2 = []
    v3 = method121(v0)
    del v0
    v2.append(v3)
    del v3
    v4 = method132(v1)
    del v1
    v2.append(v4)
    del v4
    v5 = v2
    del v2
    return v5
def method139(v0 : i32, v1 : static_array) -> object:
    v2 = []
    v3 = method121(v0)
    del v0
    v2.append(v3)
    del v3
    v4 = method123(v1)
    del v1
    v2.append(v4)
    del v4
    v5 = v2
    del v2
    return v5
def method144(v0 : i8) -> object:
    v1 = v0
    del v0
    return v1
def method143(v0 : static_array, v1 : i8) -> object:
    v2 = method129(v0)
    del v0
    v3 = method144(v1)
    del v1
    v4 = {'hand': v2, 'score': v3}
    del v2, v3
    return v4
def method142(v0 : static_array, v1 : i8) -> object:
    return method143(v0, v1)
def method141(v0 : static_array) -> object:
    v1 = []
    v2 = 0
    while method53(v2):
        v4 = 0 <= v2
        if v4:
            v5 = v2 < 2
            v6 = v5
        else:
            v6 = False
        del v4
        v7 = v6 == False
        if v7:
            v8 = "Index must be in range."
            assert v6, v8
            del v8
        else:
            pass
        del v6, v7
        v11, v12 = v0[v2]
        v13 = method142(v11, v12)
        del v11, v12
        v1.append(v13)
        del v13
        v2 += 1 
    del v0, v2
    return v1
def method140(v0 : i32, v1 : static_array, v2 : i32) -> object:
    v3 = method121(v0)
    del v0
    v4 = method141(v1)
    del v1
    v5 = method121(v2)
    del v2
    v6 = {'chips_won': v3, 'hands_shown': v4, 'winner_id': v5}
    del v3, v4, v5
    return v6
def method135(v0 : US7) -> object:
    match v0:
        case US7_0(v1): # CommunityCardsAre
            del v0
            v2 = method136(v1)
            del v1
            v3 = "CommunityCardsAre"
            v4 = [v3,v2]
            del v2, v3
            return v4
        case US7_1(v5, v6): # Fold
            del v0
            v7 = method137(v5, v6)
            del v5, v6
            v8 = "Fold"
            v9 = [v8,v7]
            del v7, v8
            return v9
        case US7_2(v10, v11): # PlayerAction
            del v0
            v12 = method138(v10, v11)
            del v10, v11
            v13 = "PlayerAction"
            v14 = [v13,v12]
            del v12, v13
            return v14
        case US7_3(v15, v16): # PlayerGotCards
            del v0
            v17 = method139(v15, v16)
            del v15, v16
            v18 = "PlayerGotCards"
            v19 = [v18,v17]
            del v17, v18
            return v19
        case US7_4(v20, v21, v22): # Showdown
            del v0
            v23 = method140(v20, v21, v22)
            del v20, v21, v22
            v24 = "Showdown"
            v25 = [v24,v23]
            del v23, v24
            return v25
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method134(v0 : static_array_list) -> object:
    v1 = []
    v2 = v0.length
    v3 = 0
    while method6(v2, v3):
        v6 = v0[v3]
        v7 = method135(v6)
        del v6
        v1.append(v7)
        del v7
        v3 += 1 
    del v0, v2, v3
    return v1
def method146(v0 : US2) -> object:
    match v0:
        case US2_0(): # CallingMachine
            del v0
            v1 = method118()
            v2 = "CallingMachine"
            v3 = [v2,v1]
            del v1, v2
            return v3
        case US2_1(): # Computer
            del v0
            v4 = method118()
            v5 = "Computer"
            v6 = [v5,v4]
            del v4, v5
            return v6
        case US2_2(): # Human
            del v0
            v7 = method118()
            v8 = "Human"
            v9 = [v8,v7]
            del v7, v8
            return v9
        case US2_3(): # Random
            del v0
            v10 = method118()
            v11 = "Random"
            v12 = [v11,v10]
            del v10, v11
            return v12
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method145(v0 : static_array) -> object:
    v1 = []
    v2 = 0
    while method53(v2):
        v4 = 0 <= v2
        if v4:
            v5 = v2 < 2
            v6 = v5
        else:
            v6 = False
        del v4
        v7 = v6 == False
        if v7:
            v8 = "Index must be in range."
            assert v6, v8
            del v8
        else:
            pass
        del v6, v7
        v10 = v0[v2]
        v11 = method146(v10)
        del v10
        v1.append(v11)
        del v11
        v2 += 1 
    del v0, v2
    return v1
def method147(v0 : US6) -> object:
    match v0:
        case US6_0(): # GameNotStarted
            del v0
            v1 = method118()
            v2 = "GameNotStarted"
            v3 = [v2,v1]
            del v1, v2
            return v3
        case US6_1(v4, v5, v6, v7, v8, v9): # GameOver
            del v0
            v10 = method120(v4, v5, v6, v7, v8, v9)
            del v4, v5, v6, v7, v8, v9
            v11 = "GameOver"
            v12 = [v11,v10]
            del v10, v11
            return v12
        case US6_2(v13, v14, v15, v16, v17, v18): # WaitingForActionFromPlayerId
            del v0
            v19 = method120(v13, v14, v15, v16, v17, v18)
            del v13, v14, v15, v16, v17, v18
            v20 = "WaitingForActionFromPlayerId"
            v21 = [v20,v19]
            del v19, v20
            return v21
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method133(v0 : static_array_list, v1 : static_array, v2 : US6) -> object:
    v3 = method134(v0)
    del v0
    v4 = method145(v1)
    del v1
    v5 = method147(v2)
    del v2
    v6 = {'messages': v3, 'pl_type': v4, 'ui_game_state': v5}
    del v3, v4, v5
    return v6
def method113(v0 : u64, v1 : US3, v2 : static_array_list, v3 : static_array, v4 : US6) -> object:
    v5 = method114(v0, v1)
    del v0, v1
    v6 = method133(v2, v3, v4)
    del v2, v3, v4
    v7 = {'private': v5, 'public': v6}
    del v5, v6
    return v7
def method153(v0 : cp.ndarray) -> object:
    v1 = v0
    del v0
    return v1
def method152(v0 : cp.ndarray) -> object:
    return method153(v0)
def method151(v0 : cp.ndarray, v1 : cp.ndarray, v2 : cp.ndarray) -> object:
    v3 = []
    v4 = method152(v0)
    del v0
    v3.append(v4)
    del v4
    v5 = method152(v1)
    del v1
    v3.append(v5)
    del v5
    v6 = method152(v2)
    del v2
    v3.append(v6)
    del v6
    v7 = method118()
    v3.append(v7)
    del v7
    v8 = v3
    del v3
    return v8
def method150(v0 : cp.ndarray, v1 : cp.ndarray, v2 : cp.ndarray) -> object:
    return method151(v0, v1, v2)
def method149(v0 : cp.ndarray, v1 : cp.ndarray, v2 : cp.ndarray) -> object:
    return method150(v0, v1, v2)
def method148(v0 : cp.ndarray, v1 : cp.ndarray, v2 : cp.ndarray) -> object:
    v3 = method149(v0, v1, v2)
    del v0, v1, v2
    v4 = {'model_ptrs': v3}
    del v3
    return v4
def method112(v0 : u64, v1 : US3, v2 : static_array_list, v3 : static_array, v4 : US6, v5 : cp.ndarray, v6 : cp.ndarray, v7 : cp.ndarray) -> object:
    v8 = method113(v0, v1, v2, v3, v4)
    del v0, v1, v2, v3, v4
    v9 = method148(v5, v6, v7)
    del v5, v6, v7
    v10 = {'game': v8, 'neural': v9}
    del v8, v9
    return v10
def method158(v0 : f32) -> object:
    v1 = v0
    del v0
    return v1
def method157(v0 : list) -> object:
    v1 = []
    v2 = len(v0)
    v3 = 0
    while method6(v2, v3):
        v5 = v0[v3]
        v6 = method158(v5)
        del v5
        v1.append(v6)
        del v6
        v3 += 1 
    del v0, v2, v3
    return v1
def method156(v0 : list) -> object:
    v1 = []
    v2 = len(v0)
    v3 = 0
    while method6(v2, v3):
        v5 = v0[v3]
        v6 = method157(v5)
        del v5
        v1.append(v6)
        del v6
        v3 += 1 
    del v0, v2, v3
    return v1
def method155(v0 : US8) -> object:
    match v0:
        case US8_0(v1): # AddRewardsCallingMachine
            del v0
            v2 = method156(v1)
            del v1
            v3 = "AddRewardsCallingMachine"
            v4 = [v3,v2]
            del v2, v3
            return v4
        case US8_1(v5): # AddRewardsSelf
            del v0
            v6 = method156(v5)
            del v5
            v7 = "AddRewardsSelf"
            v8 = [v7,v6]
            del v6, v7
            return v8
        case t:
            raise Exception(f'Pattern matching miss. Got: {t}')
def method154(v0 : list) -> object:
    v1 = []
    v2 = len(v0)
    v3 = 0
    while method6(v2, v3):
        v5 = v0[v3]
        v6 = method155(v5)
        del v5
        v1.append(v6)
        del v6
        v3 += 1 
    del v0, v2, v3
    return v1
def method111(v0 : u64, v1 : US3, v2 : static_array_list, v3 : static_array, v4 : US6, v5 : cp.ndarray, v6 : cp.ndarray, v7 : cp.ndarray, v8 : list) -> object:
    v9 = []
    v10 = method112(v0, v1, v2, v3, v4, v5, v6, v7)
    del v0, v1, v2, v3, v4, v5, v6, v7
    v9.append(v10)
    del v10
    v11 = method154(v8)
    del v8
    v9.append(v11)
    del v11
    v12 = v9
    del v9
    return v12
def method110(v0 : u64, v1 : US3, v2 : static_array_list, v3 : static_array, v4 : US6, v5 : cp.ndarray, v6 : cp.ndarray, v7 : cp.ndarray, v8 : list) -> object:
    v9 = method111(v0, v1, v2, v3, v4, v5, v6, v7, v8)
    del v0, v1, v2, v3, v4, v5, v6, v7, v8
    return v9
def method159(v0 : u64, v1 : US3, v2 : static_array_list, v3 : static_array, v4 : US6, v5 : cp.ndarray, v6 : cp.ndarray, v7 : cp.ndarray) -> object:
    v8 = method112(v0, v1, v2, v3, v4, v5, v6, v7)
    del v0, v1, v2, v3, v4, v5, v6, v7
    return v8
def main_body():
    v0 = Closure0()
    v1 = Closure1()
    v2 = collections.namedtuple("Holdem_Full",['event_loop_gpu', 'init'])(v0, v1)
    del v0, v1
    return v2

def main():
    r = main_body()
    cp.cuda.get_current_stream().synchronize() # This line is here so the `__trap()` calls on the kernel aren't missed.
    return r

if __name__ == '__main__': print(main())

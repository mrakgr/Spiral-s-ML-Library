open corebase
open corecuda
open coreext
open cardm
open game
open model

inl pu_table() : pickler.pu table =
    open pickler
    inl pot : _ (sa 2 int) = sa (int 14) // 0 - 13 range.
    inl card : pu card = alt {
        King = unit()
        Queen = unit()
        Jack = unit()
    }
    inl community_card = option card
    inl pl_card : _ (sa 2 card) = sa card
    inl raises_left = int 3
    inl is_button_s_first_move = bool()
    inl player_turn = int 2
    wrap {
        inp = fun {pot community_card pl_card raises_left is_button_s_first_move player_turn} => pot, community_card, pl_card, raises_left, is_button_s_first_move, player_turn
        out = fun pot, community_card, pl_card, raises_left, is_button_s_first_move, player_turn => {pot community_card pl_card raises_left is_button_s_first_move player_turn}
    } (pot ** community_card ** pl_card ** raises_left ** is_button_s_first_move ** player_turn)

inl test1() =
    run fun () =>
        if rangem.threads_in_grid().from = 0 then
            open pickler
            inl data : table =
                {
                    pot = arraym.fromList [2;2]
                    community_card = Some King
                    pl_card = arraym.fromList [Queen; Jack]
                    raises_left = 1
                    is_button_s_first_move = true
                    player_turn = 0
                }
            
            inl p = pu_table()

            serialize p data
            // |> fun x => write_ln x . x
            |> deserialize p
            |> fun x => assert (data = x) "The round trip has to preserve equality with the original input." . x
            |> console.write_ln

inl pu_history() : pickler.pu history =
    open pickler
    inl card : pu card = alt {
        King = unit()
        Queen = unit()
        Jack = unit()
    }
    inl action : pu action = alt {
        Fold = unit()
        Call = unit()
        Raise = unit()
    }
    inl action_or_card : pu (choice2 action card) = action ++ card
    inl history : pu history = sa_list action_or_card
    history

inl test2() =
    run fun () =>
        if rangem.threads_in_grid().from = 0 then
            open pickler
            inl data : history = arraym.fromList [C2of2 King; C1of2 Call; C1of2 Raise; C1of2 Raise; C1of2 Call; C2of2 Queen; C1of2 Call; C1of2 Raise; C1of2 Raise; C1of2 Call]
            
            inl p = pu_history()

            serialize p data
            // |> fun x => write_ln x . x
            |> deserialize p
            |> fun x => assert (data = x) "The round trip has to preserve equality with the original input." . x
            |> console.write_ln

open tensorm
inl test3() =
    inl pu_history = pu_history()
    open ml.layers

    inl size = {
        ensemble = 4 // The third dimension of each weight layer.
        block = blocks_per_grid()
        thread = threads_per_block()
        inner = modup pu_history.size 128
    }

    inl graph =
        (input .input (size.block,size.thread,size.inner) : graph (tensor d3 float))
        |> matmul_ensemble (size.ensemble,size.inner,size.inner)
        |> ln_l2
        |> relu
        |> matmul_ensemble (size.ensemble,size.inner,size.inner)
        |> ln_l2
        |> relu
        |> matmul_ensemble (size.ensemble,size.inner,size.inner)
        |> masked_softmax_and_discrete_sample' 3 (
            pair (input .output_probs   (size.ensemble,size.block,size.thread,size.inner) |> apply .ensemble)
                 (input .output_indices (size.ensemble,size.block,size.thread) |> apply .ensemble)
            )

    inl model = create_model graph
    pass_init model
    
    inl game_model =
        ml.models.game_model {
            model = exists model
            input = exists id, pu_history
            output = function
                | 0 => Fold
                | 1 => Call
                | 2 => Raise
                | _ => failwith "Invalid output id in the Leduc model."
        }

    console.write_ln "Running the kernel."

    run' fun () =>
        inl rng = random.init {seed = cupy.constant_seed(); subsequence = conv rangem.threads_in_grid().from; offset=0}
        inl data : history = arraym.fromList [C2of2 King; C1of2 Call; C1of2 Raise; C1of2 Raise; C1of2 Call; C2of2 Queen; C1of2 Call; C1of2 Raise; C1of2 Raise; C1of2 Call]
        ml.models.run rng game_model (Some data)
        |> console.write_ln

    device_sync()
    // console.write_ln "The output tensor is:"
    // inl output : tensor d4 float = key_extract model .output_probs
    // console.tensor.write_ln limit.max output
    // inl output : tensor d3 int = key_extract model .output_indices
    // console.tensor.write_ln limit.max output

// inl test4() =
//     ()

inl main() = test3()
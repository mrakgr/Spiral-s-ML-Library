open corebase
open cardm

union action = Raise | Call | Fold

type table = // The complete game state.
    {
        pot : sa 2 int
        community_card : option card
        pl_card : sa 2 card
        raises_left : int
        is_button_s_first_move : bool
        player_turn : int
    }

union message =
    | PlayerGotCard : int * card
    | CommunityCardIs : card
    | PlayerAction : int * action
    | Showdown : {winner_id : int; chips_won : int; cards_shown : sa 2 card}

type messages = sa_list 32 message

union game_node =
    | TerminalFold : table
    | TerminalCall : table
    | RoundWithAction : table * action
    | Round : table
    | ChanceCommunityCard : table
    | ChanceInit

// Generates a valid random action.
inl random_action rng (table : table) =
    open sa_listm
    inl actions : sa_list 3 _ =  arraym.fromList [Call]
    if index table.pot 0 <> index table.pot 1 then push actions Fold
    if table.raises_left > 0 then push actions Raise
    corecuda.random.shuffle rng actions
    pop actions

// Returns the max value of both pots in an static array.
inl pot_call (pot : sa 2 int) : sa 2 int = sam.init (const (arraym.fold max 0 pot))

// Compares the hands of the two players.
// Needs to be called after the community card has been dealt.
let compare_hands (table : table) =
    let tag = function King => 2 | Queen => 1 | Jack => 0 : int
    match table.community_card with
    | None => failwith "Expected the community card to be present in the table."
    | Some community_card =>
        let community_card = tag community_card
        let a = tag (index table.pl_card 0), community_card
        let b = tag (index table.pl_card 1), community_card
        let order (a,b) = if a > b then a,b else b,a
        let is_pair (a,b) = a = b
        match is_pair a, is_pair b with
        | true, true => comp (fst a) (fst b)
        | true, false => gt()
        | false, true => lt()
        | _ => comp (order a) (order b)

inl toggle (player_turn : int) : int = player_turn ^^^ 1
inl raise_by (id : int) (amount : int) : sa 2 int -> sa 2 int = arraym.mapi (fun i pot => if i = id then pot + amount else pot)
inl game_round (table : table) action =
    match table.community_card with
    | Some community_card => // round two
        match action with
        | Fold => TerminalFold table
        | Call when table.is_button_s_first_move => Round {table with is_button_s_first_move=false; player_turn#=toggle}
        | Call => TerminalCall {table with pot#=pot_call}
        | Raise when table.raises_left > 0 => Round {table with is_button_s_first_move=false; player_turn#=toggle; raises_left#=(+) -1; pot#=pot_call >> raise_by table.player_turn 4}
        | Raise => failwith "Invalid action. The number of raises left is not positive."
    | None => // round one
        match action with
        | Fold => TerminalFold table
        | Call when table.is_button_s_first_move => Round {table with is_button_s_first_move=false; player_turn#=toggle}
        | Call => ChanceCommunityCard table 
        | Raise when table.raises_left > 0 => Round {table with is_button_s_first_move=false; player_turn#=toggle; raises_left#=(+) -1; pot#=pot_call >> raise_by table.player_turn 2}
        | Raise => failwith "Invalid action. The number of raises left is not positive."
inl game_chance_community_card (table : table) card = Round {table with is_button_s_first_move=true; player_turn=0; raises_left=dyn 2; community_card=Some card; pot#=pot_call}
inl game_chance_init (c0,c1) = Round {is_button_s_first_move=true; player_turn=0; raises_left=dyn 2; community_card=None; pot=arraym.fromList [1;1]; pl_card=arraym.fromList [c0;c1]}
inl game_start() = ChanceInit
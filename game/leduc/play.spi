open game
open corebase
open corepython
open corecuda
open coreext

type state_internal_play =
    stack_mut {
        ui_game_state : ui_game_state
        pl_type : sa 2 player_type
        game : option game_node
        deck : deck
        messages : messages
        rng : random.philox_state
    }

// Converts the given state to internal one.
inl state_to_internal_play (state : state_game) : state_internal_play =
    stack_mut {
        ui_game_state = state.public.ui_game_state
        pl_type = state.public.pl_type
        game = state.private.game
        deck = state.private.deck
        messages = state.public.messages
        rng = random.init {seed = random.clock64(); subsequence=conv rangem.threads_in_grid().from; offset=0} |> refm.to_local
    }

// Converts the given internal into the serializable state.
inl internal_play_to_state (state : state_internal_play) : state_game =
    {
        public = {
            ui_game_state = state.ui_game_state
            pl_type = state.pl_type
            messages = state.messages
        }
        private = {
            game = state.game
            deck = state.deck
        }
    }

// Sets the internal state to the values held by the regular one.
inl internal_set_play (state_internal : state_internal_play) (state : state_game) =
    open refm
    state_internal.ui_game_state <- state.public.ui_game_state
    // state_internal.pl_type <- state.public.pl_type
    state_internal.game <- state.private.game
    state_internal.deck <- state.private.deck
    state_internal.messages <- state.public.messages

inl play_loop (neural : state_neural) (state : state_internal_play) node =
    inl push_message = sa_listm.push state.messages
    inl pop_deck () =
        open refm
        inl c,d = deckm.draw_card (refm.from_local state.rng) state.deck
        state.deck <- d
        c

    inl body node =
        open refm
        match node with
        | TerminalFold table =>
            inl msg = 
                inl chips_won = index table.pot table.player_turn
                Showdown{cards_shown=table.pl_card; chips_won winner_id=toggle table.player_turn}
            push_message msg
            state.ui_game_state <- GameOver(table)
            state.game <- None
            None
        | TerminalCall table =>
            inl msg =
                inl chips_won, winner_id =
                    inl chips_won = index table.pot table.player_turn
                    match compare_hands table with
                    | Gt => chips_won, 0
                    | Eq => 0, -1
                    | Lt => chips_won, 1
                Showdown{cards_shown=table.pl_card; chips_won winner_id}
            push_message msg
            state.ui_game_state <- GameOver(table)
            state.game <- None
            None
        | Round table => 
            match index state.pl_type table.player_turn with
            | Computer =>
                open model
                inl model = ml.cfr_models.from_model_data model.game_graph() neural.model_data
                inl data = table, state.messages
                inl action = 
                    ml.cfr_models.run (refm.from_local state.rng) model data |> action_conv table
                    |> transposing_loop.shuffle 0
                inl msg = PlayerAction(table.player_turn, action)
                push_message msg
                Some (game_round table action)
            | Human => 
                state.ui_game_state <- WaitingForActionFromPlayerId(table)
                state.game <- Some node
                None
            | Random =>
                inl action = 
                    random_action (refm.from_local state.rng) table
                    |> transposing_loop.shuffle 0
                inl msg = PlayerAction(table.player_turn, action)
                push_message msg
                Some (game_round table action)
        | RoundWithAction(table,action) => 
            inl msg = PlayerAction(table.player_turn, action)
            push_message msg
            Some (game_round table action)
        | ChanceCommunityCard table =>
            inl card = pop_deck()
            inl msg = CommunityCardIs card
            push_message msg
            Some (game_chance_community_card table card)
        | ChanceInit () => 
            inl c0,c1 = pop_deck(), pop_deck()
            push_message PlayerGotCard(0, c0)
            push_message PlayerGotCard(1, c1)
            Some (game_chance_init (c0,c1))
    
    loop.while (function Some => true | None => false) (optionm.bind body) (Some node) |> ignore

inl event_loop_play state_neural (msg, state_internal : event * state_internal_play) : () =
    open refm
    match msg with
    | StartGame =>
        internal_set_play state_internal init_game()
        game_start() |> Some
    | PlayerChanged pl_type => 
        state_internal.pl_type <- pl_type
        None
    | ActionSelected action =>
        match state_internal.game with
        | Some game =>
            match game with
            | Round table => RoundWithAction(table, action) |> Some
            | _ => failwith "Unexpected game node in ActionSelected."
        | None => failwith "The game hasn't been started in ActionSelected."
    | StartTrainingVsRando | StartTrainingVsSelf => failwith "Training is not supported in the `event_loop_play` function."
    |> optionm.iter (play_loop state_neural state_internal)

open corecuda
open corepython
open coreext
open serializerm

inl vs_human (seri : {game_state : serializer state_game; msg : serializer event}) (neural : state_neural) =
    run' fun () =>
        inl msg, game_state = deserialize seri.msg, deserialize seri.game_state
        inl state = state_to_internal_play game_state
        event_loop_play neural (msg, state)
        if rangem.threads_in_grid().from = 0 then
            serialize seri.game_state (internal_play_to_state state)
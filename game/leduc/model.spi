open corebase
open corecuda
open tensorm
open ml.layers
open game

inl pu_history() : pickler.pu history =
    open pickler
    inl card : pu card = alt {
        King = unit()
        Queen = unit()
        Jack = unit()
    }
    inl action : pu action = alt {
        Fold = unit()
        Call = unit()
        Raise = unit()
    }
    inl action_or_card : pu (choice2 action card) = action ++ card
    inl history : pu history = sa_list action_or_card
    history

inl graph() =
    inl pu_history = pu_history()
    inl size = {
        ensemble = 4 // The third dimension of each weight layer.
        block = blocks_per_grid()
        minibatch = 16 // threads_per_block()
        inner = modup pu_history.size 128
    }

    inl graph =
        (input .input (size.block,size.minibatch,size.inner) : graph (tensor (int * int * int) float))
        |> apply .block
        |> matmul_ensemble (size.ensemble,size.inner,size.inner)
        |> ln_l2
        |> relu
        |> matmul_ensemble (size.ensemble,size.inner,size.inner)
        |> ln_l2
        |> relu
        |> matmul_ensemble (size.ensemble,size.inner,size.inner)
        |> softmax_and_discrete_sample' (input .output_indices (size.block,size.ensemble,size.minibatch) |> apply .block |> apply .ensemble)

    graph
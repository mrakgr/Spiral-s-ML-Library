// Heap allocated statically sized array with a type literal for a dimension.
// As regular static arrays are value types, having large such arrays can blow up the compilation times
// and cause the local memory to run out, giving the need for heap allocated ones.
nominal heap_sa dim el = array el

// Creates an empty array.
inl create' forall dim el. : heap_sa dim el = 
    inl dim : int = real real_core.type_lit_to_lit `dim
    assert (0 <= dim) "The dimension of the array has to be non-negative."
    heap_sa (create dim)
    
instance create heap_sa dim = fun dim =>
    assert ((real real_core.type_lit_to_lit `dim) = dim) "The type level dimension has to equal the value passed at runtime into create."
    create'

// Returns the length of an array.
instance length heap_sa dim = fun ar => real real_core.type_lit_to_lit `dim : int
// Indexes into an array.
instance index heap_sa dim = fun (heap_sa ar) i => 
    assert (0 <= i && i < length ar) "The read index needs to be in range for the static array."
    index ar i
    
// Sets the value of an array at the specified index.
// Should be used with care. The static array should be used in an immutable fashion preferably.
instance set heap_sa dim = fun (heap_sa ar) i v => 
    assert (0 <= i && i < length ar) "The read index needs to be in range for the static array."
    set ar i v


open arraym

instance equable heap_sa dim el = generic_equable
instance comparable heap_sa dim el = generic_comparable

// Initializes array using the given function.
inl init forall dim el. f : heap_sa dim el = init (real real_core.type_lit_to_lit `dim) f

open console
instance printable heap_sa dim el = array_print 100
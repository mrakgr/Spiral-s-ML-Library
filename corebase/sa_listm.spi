// Resizable arrays based on the static ones. The dim in the type determines their max length.
// Is intended to be a value type on the Cuda backend, and how it works on the Python backend, is merely a serialization convenience.
nominal sa_list dim el = $"backend_switch `({Python : $"static_array_list"; Cuda : $"static_array_list<`el,@dim>"})"

// Creates an empty array.
inl create' forall dim el. : sa_list dim el = 
    assert ((0 : int) <= (real real_core.type_lit_to_lit `dim)) "The dimension of the array has to be positive."
    backend_switch {
        Python = fun () => $"static_array_list(@dim)"
        Cuda = fun () => $"static_array_list<`el,@dim>{}"
    }
    
// Returns the length of an array.
instance length sa_list dim = fun ar => $"!ar.length"

// Sets the array to the specified length.
inl unsafe_set_length forall dim el. (ar : sa_list dim el) (f : int) : () = $"!ar.set_unsafe_length(!f)"

instance create sa_list dim = fun dim =>
    assert ((real real_core.type_lit_to_lit `dim) >= dim) "The type level dimension has to equal the value passed at runtime into create."
    inl ar = create'
    unsafe_set_length ar dim
    ar

// Returns the maximum length of the array.
inl max_length forall dim el. (ar : sa_list dim el) : int = real real_core.type_lit_to_lit `dim
    
// Indexes into an array.
instance index sa_list dim = fun ar i => 
    backend_switch {
        Cuda = fun () => $"!ar[!i]"
        Python = fun () => $"!ar[!i]"
    }

// Sets the value of an array at the specified index.
instance set sa_list dim = fun ar i v =>
    backend_switch {
        Cuda = fun () => $"!ar[!i] = !v"
        Python = fun () => $"!ar[!i] = !v"
    }

// Pushes a value into the array.
inl push forall dim el. (ar : sa_list dim el) (x : el) = $"!ar.push(!x)"

// Pop a value from the top of the array.
inl pop forall dim el. (ar : sa_list dim el) : el = $"!ar.pop()"

open arraym

instance equable sa_list dim el = generic_equable
instance comparable sa_list dim el = generic_comparable

open console

instance printable sa_list dim el = array_print 100
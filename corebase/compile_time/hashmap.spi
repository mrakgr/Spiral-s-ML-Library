// Creates a compile time HashMap. These data structures cannot be turned to types or passed through join
// points. Their primary purpose is for type extensions.
// The symbol .hashmap here is a standin for its nonexistent type.
inl create () : .hashmap = !!!!HashMapCreate()
// Adds a key to the HashMap. Raises a type error if the key is already present in it.
inl add forall key value. (h : .hashmap) (k : key) (v : value) : () = !!!!HashMapAdd(h,k,v)
// Adds a key to the HashMap. Returns true if the key was added successfully to it.
inl try_add forall key value. (h : .hashmap) (k : key) (v : value) : bool = !!!!HashMapTryAdd(h,k,v)
// Returns true if the key is present in the map.
inl contains forall key. (h : .hashmap) (k : key) : bool = !!!!HashMapContains(h,k)
// Removes a key from the HashMap. Returns true if the key was found and removed from the map, and false if the key wasn't present.
inl remove forall key. (h : .hashmap) (k : key) : bool = !!!!HashMapRemove(h,k)
// Returns the number of elements in the map.
inl count (h : .hashmap) : int = conv (!!!!HashMapCount(h) : i32)
// Returns the element if it is in the map as an optional type.
inl try_get forall key value. (h : .hashmap) (k : key) : option value = real
    match !!!!HashMapTryGet(h,k) with
    | .null => None `value
    | v => Some `value v
// Returns the element if it is in the map otherwise raises a type error.
inl get forall key value. (h : .hashmap) (k : key) : value = real
    match !!!!HashMapTryGet(h,k) with
    | .null => open real_core in error_type "The key is not present in the hash map."
    | v => v
// Makes the hash map immutable, allowing it to be passed through join points.
// After it's set to immutable, trying to add or remove from it will result in a type error.
inl set_immutable (h : .hashmap) : () = !!!!HashMapSetImmutable(h)
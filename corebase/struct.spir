open real_core

inl infer_map forall el. g =
    inl rec f forall el. =
        typecase el with
        | ~a * ~b => f `a, f `b
        | {} => record_type_map (fun k => f) `el
        | _ => g `el
    f `el

inl infer_fold forall el. g =
    inl rec f forall el. s =
        typecase el with
        | ~a * ~b => f `b (f `a s)
        | {} => record_type_fold (fun state key => forall value. => f `value state) s `el
        | _ => g `el s
    f `el

inl infer_mapFold forall el. g =
    inl rec f forall el. s =
        typecase el with
        | ~a * ~b => 
            inl a,s = f `a s
            inl b,s = f `b s
            (a, b), s        
        | {} => 
            record_type_fold (fun (m,state) key => forall value. => 
                inl value, state = f `value state
                {m with $key=value}, state
                ) ({}, s) `el
        | _ => g `el s
    f `el

inl infer_mapFoldBack forall el. g =
    inl rec f forall el. s =
        typecase el with
        | ~a * ~b => 
            inl b,s = f `b s
            inl a,s = f `a s
            (a, b), s        
        | {} => 
            record_type_fold_back (fun key => forall value. (m,state) => 
                inl value, state = f `value state
                {m with $key=value}, state
                ) `el ({}, s)
        | _ => g `el s
    f `el

// Infers the folded out type of an inferse array. For example, it would map the type `array (a * b)` to `array a * array b`.
// Also supports the same for records.
inl infer forall ar el. = infer_map `el (forall el. => ``(ar el))

inl map index =
    inl rec f = function
        | a, b => f a, f b
        | {} as ar => record_map (fun {value} => f value) ar
        | ar => index ar
    f

inl iter touch =
    inl rec f = function
        | a, b => f a . f b
        | {} as ar => record_iter (fun {value} => f value) ar
        | ar => touch ar
    f

inl fold g =
    inl rec f s x =
        match x with
        | a, b => f (f s a) b
        | {} as ar => record_fold (fun x => f x.state x.value) s ar
        | ar => g s ar
    f

inl mapFold g =
    inl rec f s x =
        match x with
        | a, b => 
            inl a,s = f s a
            inl b,s = f s b
            (a, b), s        
        | {} as ar => 
            record_fold (fun {value key state=m,state} => 
                inl value, state = f state value
                {m with $key=value}, state
                ) ({}, s) ar
        | ar => g s ar
    f

inl foldBack g =
    inl rec f x s =
        match x with
        | a, b => f a (f b s)
        | {} as ar => record_fold_back (fun x => f x.value x.state) ar s
        | ar => g ar s
    f

inl foldBack2 g =
    inl rec f ar v s =
        match ar, v with
        | (a, b), (va, vb) => f a va (f b vb s)
        | {} & ar, {} & v => record_fold_back (fun x => f x.value (v x.key) x.state) ar s
        | ar, v => g ar v s
    f

inl mapFoldBack g =
    inl rec f x s =
        match x with
        | a, b => 
            inl b,s = f b s
            inl a,s = f a s
            (a, b), s
        | {} as ar => 
            record_fold_back (fun {value key state=m,state} => 
                inl value, state = f value state
                {m with $key=value}, state
                ) ar ({}, s)
        | ar => g ar s
    f

inl iter2 set ar v =
    inl rec f = function
        | (a, b), (va,vb) => f (a, va) . f (b, vb)
        | {} & ar, {} & v => record_iter (fun {key value} => f (ar key, value)) v
        | ar,v => set ar v
    f (ar, v)

inl iter3 set ar v i =
    inl rec f = function
        | (a, b), (va,vb), (ia,ib) => f (a, va, ia) . f (b, vb, ib)
        | {} & ar, {} & v, {} & i => record_iter (fun {key value} => f (ar key, value, i key)) v
        | ar,v,i => set ar v i
    f (ar, v, i)

inl map2 set ar v =
    inl rec f = function
        | (a, b), (va,vb) => f (a, va), f (b, vb)
        | {} & ar, {} & v => record_map (fun {key value} => f (ar key, value)) v
        | ar,v => set ar v
    f (ar, v)


// Calculates the integer product of the argument.
inl prod dim = open real_core in foldBack (*) dim 1
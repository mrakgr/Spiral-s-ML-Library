// Creates an empty array.
instance sa_create da_list =
    assert ((0 : int) <= (real real_core.type_lit_to_lit `dim)) "The dimension of the array has to be positive."
    backend_switch {
        Python = fun () => $"dynamic_array_list(@dim)"
        Cuda = fun () => $"dynamic_array_list<`el,@dim> \v{0}"
    }

// Returns the length of an array.
instance length da_list dim = fun ar => $"!ar.length_()"

// Sets the array to the specified length.
inl unsafe_set_length forall dim el. (ar : da_list dim el) (f : int) : () = $"!ar.unsafe_set_length(!f)"

instance create da_list dim = fun dim =>
    assert ((real real_core.type_lit_to_lit `dim) >= dim) "The type level dimension has to equal the value passed at runtime into create."
    inl ar = sa_create
    unsafe_set_length ar dim
    ar

// Returns the maximum length of the array.
inl max_length forall dim el. (ar : da_list dim el) : int = real real_core.type_lit_to_lit `dim
    
// Indexes into an array.
instance index da_list dim = fun ar i => 
    backend_switch {
        Cuda = fun () => $"!ar[!i]"
        Python = fun () => $"!ar[!i]"
    }

// Sets the value of an array at the specified index.
instance set da_list dim = fun ar i v =>
    backend_switch {
        Cuda = fun () => $"!ar[!i] = !v"
        Python = fun () => $"!ar[!i] = !v"
    }

instance sa_list_unsafe_set_length da_list = unsafe_set_length
instance sa_length da_list = length
instance sa_index da_list = index
instance sa_set da_list = set

// Pushes a value into the array.
inl push forall dim el. (ar : da_list dim el) (x : el) = $"!ar.push(!x)"

// Pop a value from the top of the array.
inl pop forall dim el. (ar : da_list dim el) : el = $"!ar.pop()"

inl choose forall dim_a a dim_b b. f (ar : da_list dim_a a) : da_list dim_b b =
    inl out = sa_create
    arraym.iter (f >> optionm.iter (push out)) ar
    out

open arraym

instance equable da_list dim el = generic_equable
instance comparable da_list dim el = generic_comparable

instance printable da_list dim el = array_print 100
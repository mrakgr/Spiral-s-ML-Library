open corebase
open refm
open tensorm
open struct
open utils

// Create a tensor of the specified dimensions in static shared memory. The elements of the dimension should be ints.
// As the Cuda compiler does not reuse shared memory, it's not recommended to use this function.
// If possible, use tensors in dynamic shared memory instead. See `tensor_create_extern_shared`.
inl tensor_create_shared forall dim el. (dim : dim) : tensor dim el = 
    inl stride, len = real calculate_stride_len dim
    assert_long_length len dim
    inl create_body forall t. : tensor_body dim t = tensor_body {
        array = real 
            typecase t with
            | () => $"/* void shared array create \v */" : array t
            | _ => $"__shared__ `t \v[!len]" : array t
        offset = 0
        stride 
        }
    tensor {dim bodies=real infer_map `el create_body}

// Instantiates a partition using dynamic shared memory. Checks that the allocated memory is sufficient.
inl tensor_create_from_extern_partition' forall t. (memory : partitionm.partition_offsets t) : t * size =
    inl smem_used = conv dynamic_shared_memory_used()
    assert (memory.offset_end <= smem_used) "The dynamic shared memory is insufficient to allocate the tensor."
    inl extern = $"extern __shared__ unsigned char \v[]" // Note: we need to use [] instead of * here.
    partitionm.from_partition_offsets (extern, memory.offset_end) memory, memory.offset_end

// Instantiates a partition using dynamic shared memory. Checks that the allocated memory is sufficient.
inl tensor_create_from_extern_partition forall t. extern_offset (memory : partitionm.partition t) : t * size =
    open partitionm
    tensor_create_from_extern_partition' (calculate_offsets extern_offset memory)

// Creates a tensor in dynamic shared memory. The elements of the dimension should be ints.
// Care must be taken when using this, as separate invocations of this function
// will create tensors pointing to the same memory location.
inl tensor_create_extern_shared forall dim' el. extern_offset (dim' : dim') : tensor dim' el * size =
    open partitionm
    tensor_create_from_extern_partition extern_offset !dim'

// Creates two tensors in dynamic shared memory. The elements of the dimension should be ints.
// Care must be taken when using this, as separate invocations of this function
// will create tensors pointing to the same memory location.
inl tensor_create_extern_shared2 forall dim1 dim2 el1 el2. extern_offset (dim1, dim2 : dim1 * dim2) 
        : (tensor dim1 el1 * tensor dim2 el2) * size =
    open partitionm
    tensor_create_from_extern_partition extern_offset (!dim1 *. !dim2)

// Creates 3 tensors in dynamic shared memory. The elements of the dimension should be ints.
// Care must be taken when using this, as separate invocations of this function
// will create tensors pointing to the same memory location.
inl tensor_create_extern_shared3 forall dim1 dim2 dim3 el1 el2 el3. extern_offset (dim1, dim2, dim3 : dim1 * dim2 * dim3) 
        : (tensor dim1 el1 * tensor dim2 el2 * tensor dim3 el3) * size =
    open partitionm
    tensor_create_from_extern_partition extern_offset (!dim1 *. (!dim2 *. !dim3))

// Indexes into an tensor. Returns a reference to an element instead of the actual element.
// Works only on non-compound tensors.
inl tensor_ref_index forall dim el. (i : dim) (tensorm.tensor {bodies dim} : tensorm.tensor dim el) : ref el = real 
    open tensorm.utils
    assert_indices i dim
    map (fun (tensorm.tensor_body {array stride offset}) =>
        typecase `array with
        | ~ar ~el => ref_index `ar `el array (calculate_offset stride i offset)
        ) bodies
    : ref el

// Does an atomic add to the tensor at the specified index by a given value.
inl tensor_atomic_add forall dim el. (i : dim) (v : el) (t : tensor dim el) : () = 
    inl (tensor {dim bodies}) = t |> apply_all i |> apply_ptr
    real
        iter2 (fun (tensor_body {array}) v =>
            typecase `array with array ~el => 
            inl _ = intrinsic.atomic_add `el array v
            ()
            ) bodies v

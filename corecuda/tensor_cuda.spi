open corebase
open refm
open tensorm
open struct
open utils

// Create a tensor of the specified dimensions. The elements of the dimension should be ints.
inl tensor_create_shared forall dim el. (dim : dim) : tensor dim el = 
    inl stride, len = real calculate_stride_len dim
    assert_long_length len dim
    inl create_body forall t. : tensor_body dim t = tensor_body {
        array = real $"__shared__ `t \v[!len]" : array t
        offset = 0
        stride 
        }
    tensor {dim bodies=real infer_map `el create_body}

// Indexes into an tensor. Returns a reference to an element instead of the actual element.
// Works only on non-compound tensors.
inl tensor_ref_index forall dim el. (i : dim) (tensorm.tensor {bodies dim} : tensorm.tensor dim el) : ref el = real 
    open tensorm.utils
    assert_indices i dim
    map (fun (tensorm.tensor_body {array stride offset}) =>
        typecase `array with
        | ~ar ~el => ref_index `ar `el array (calculate_offset stride i offset)
        ) bodies
    : ref el

// Does an atomic add to the tensor at the specified index by a given value.
inl tensor_atomic_add forall dim el. (i : dim) (v : el) (t : tensor dim el) : () = 
    inl (tensor {dim bodies}) = t |> apply_all i |> apply_ptr
    real
        iter2 (fun (tensor_body {array}) v =>
            typecase `array with
            | array ~el => intrinsic.atomic_add `el array v
            ) bodies v

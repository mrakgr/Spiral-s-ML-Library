open corebase
open tensorm

inl arange forall dim el. ({from nearTo by} : loop.range dim) : tensor dim el = 
    inl len : int = loop.prod nearTo * by
    real
        typecase cupy_type el with ~ct =>
        $"cp.arange(!from,!len,!by,dtype=`ct)" : array el
    |> fromArray |> reshape (const nearTo)
    
inl zeros forall dim float. dim : tensor dim float =
    inl len : int = loop.prod dim
    real
        typecase cupy_type float with ~ct =>
        $"cp.zeros(!len,dtype=`ct)" : array float
    |> fromArray |> reshape (const dim)

inl ones forall dim float. dim : tensor dim float =
    inl len : int = loop.prod dim
    real
        typecase cupy_type float with ~ct =>
        $"cp.ones(!len,dtype=`ct)" : array float
    |> fromArray |> reshape (const dim)
    
inl random_normal forall dim float. ({mean std} : {mean : float; std  : float}) dim : tensor dim float =
    inl len : int = loop.prod dim
    real
        typecase cupy_type float with ~ct =>
        $"cp.random.normal(!mean,!std,!len,dtype=`ct)" : array float
    |> fromArray |> reshape (const dim)

inl random_uniform forall dim float. dim : tensor dim float =
    inl len : int = loop.prod dim
    real
        typecase cupy_type float with ~ct =>
        $"cp.random.uniform(size=!len,dtype=`ct)" : array float
    |> fromArray |> reshape (const dim)
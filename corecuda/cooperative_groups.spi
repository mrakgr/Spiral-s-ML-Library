open corebase
open struct
open refm

inl grid_group_num_blocks() : int = $"cooperative_groups::grid_group::num_blocks()"
inl grid_group_block_rank() : int = $"cooperative_groups::grid_group::block_rank()"
inl grid_group_num_threads() : int = $"cooperative_groups::grid_group::num_threads()"
inl grid_group_thread_rank() : int = $"cooperative_groups::grid_group::thread_rank()"
inl thread_block_num_threads() : int = $"cooperative_groups::thread_block::num_threads()"
inl thread_block_thread_rank() : int = $"cooperative_groups::thread_block::thread_rank()"

nominal grid_group = $"cooperative_groups::grid_group"
nominal cluster_group = $"cooperative_groups::cluster_group"
nominal thread_block = $"cooperative_groups::thread_block"
nominal thread_block_tile parent size = $"cooperative_groups::thread_block_tile<@size, `parent>"
nominal thread = $"cooperative_groups::thread_block_tile<1>"
nominal coalesced_group = $"cooperative_groups::coalesced_group"

prototype groupable t : t -> ()
instance groupable thread = fun _ => ()
instance groupable thread_block = fun _ => ()
instance groupable coalesced_group = fun _ => ()
instance groupable thread_block_tile parent size = fun _ => ()
instance groupable cluster_group = fun _ => ()
instance groupable grid_group = fun _ => ()

inl wait forall group {groupable}. (group : ref group) : () = $"cooperative_groups::wait(!group)"
inl sync forall group {groupable}. (group : ref group) : () = $'!group.sync() '

prototype tileable t : t -> ()
instance tileable thread = fun _ => ()
instance tileable thread_block = fun _ => ()
instance tileable thread_block_tile parent size = fun _ => ()
instance tileable coalesced_group = fun _ => ()

inl meta_group_size forall group {tileable}. (cg : ref group) : int = $"!cg.meta_group_size()"
inl meta_group_rank forall group {tileable}. (cg : ref group) : int = $"!cg.meta_group_rank()"

inl create_grid() : ref grid_group = 
    global "#include <cooperative_groups.h>"
    $"auto \v = cooperative_groups::this_grid()"
inl create_cluster() : ref cluster_group = 
    global "#include <cooperative_groups.h>"
    $"auto \v = cooperative_groups::this_cluster()"
inl create_block() : ref thread_block = 
    global "#include <cooperative_groups.h>"
    $"auto \v = cooperative_groups::this_thread_block()"
inl create_thread() : ref thread = 
    global "#include <cooperative_groups.h>"
    $"auto \v = cooperative_groups::this_thread()"

// These can only be created from tiles of size 32 or less.
inl create_labeled_partition forall parent {tileable}. (x : ref parent) (i : int) : ref coalesced_group = $"auto \v = cooperative_groups::labeled_partition(!x,!i)"
inl create_binary_partition forall parent {tileable}. (x : ref parent) (i : bool) : ref coalesced_group = $"auto \v = cooperative_groups::binary_partition(!x,!i)"
inl create_coalesced_threads() : ref coalesced_group = $"auto \v = cooperative_groups::coalesced_threads()"
inl cg_sync (tile : ref coalesced_group) : () = $"!tile.sync()"

inl cg_reduce forall el. (tile : ref coalesced_group) (f : el -> el -> el) (x : el) : el = 
    global "#include <cooperative_groups/reduce.h>"
    inl f (arg a), (arg b) : el = f a b
    // Note that it is using a butterfly reduction under the hood, so the arguments passed into f will be in arbitrary order.
    $"cooperative_groups::reduce(!tile, !x, !f)"
inl cg_inclusive_scan forall el. (tile : ref coalesced_group) (f : el -> el -> el) (x : el) : el = 
    global "#include <cooperative_groups/scan.h>"
    inl f (arg a), (arg b) : el = f a b
    // For the inclusive scan, it's not doing a butterfly reduction, so I am not sure why it's swapping the arguments around, but
    // that still happens.
    $"cooperative_groups::inclusive_scan(!tile, !x, !f)"
inl cg_shuffle forall el. (tile : ref coalesced_group) (x : el) (i : int) : el = $"!tile.shfl(!x,!i)"
// Also returns the sum at the end.
inl cg_exclusive_scan forall el. (tile : ref coalesced_group) neutral_element (f : el -> el -> el) (x : el) : el * el = 
    global "#include <cooperative_groups/scan.h>"
    inl inclusive : el = cg_inclusive_scan tile f x
    inl exclusive = $"!tile.shfl_up(!inclusive,1)"
    (if $"!tile.thread_rank() == 0" then neutral_element else exclusive), $"!tile.shfl(!inclusive,!tile.num_threads()-1)"
inl cg_exclusive_scan' forall el. (tile : ref coalesced_group) neutral_element (f : el -> el -> el) (x : el) : el = 
    global "#include <cooperative_groups/scan.h>"
    inl inclusive : el = cg_inclusive_scan tile f x
    inl exclusive = $"!tile.shfl_up(!inclusive,1)"
    if $"!tile.thread_rank() == 0" then neutral_element else exclusive

// Returns a tensor mapped to a particular cluster rank.
inl cg_map_shared_rank forall dim el. (cluster : ref cluster_group) (rank : int) (t : tensor dim el) : tensor dim el = 
    open tensorm
    open struct
    assert (0 <= rank && rank < blocks_per_cluster()) "0 <= rank && rank < blocks_per_cluster()"
    inl (tensor {dim bodies}) = t |> apply_ptr
    tensor {
        dim = real
            iter (fun dim =>
                open real_core
                assert (lit_is dim) "The tensor dimension needs to be known at compile time." 
                ) dim
            dim
        bodies = real
            map (fun (tensor_body ({array} & x)) =>
                typecase `array with array ~el => 
                tensor_body `dim `el {x with array = $"!cluster.map_shared_rank(!array,!rank)" : array el}
                ) bodies
    }

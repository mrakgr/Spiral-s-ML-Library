open refm
open corebase

// Count the number of bits that are set to 1 in a 32-bit integer.
inl popc_u32 (x : u32) : i32 = $"__popc(!x)"
// Count the number of bits that are set to 1 in a 64-bit integer.
inl popc_u64 (x : u64) : i32 = $"__popcll(!x)"

// https://docs.nvidia.com/cuda/cuda-math-api/group__CUDA__MATH__INTRINSIC__INT.html#group__CUDA__MATH__INTRINSIC__INT_1g2fc8e909eb9a959dcc3262e54365bfc5

// Get the ith set bit `offset` in the `mask` starting at position `base`.
// When the `offset` is negative it will search in the opposite direction.
// When the `offset` is 0, it will just check the value at the base position and return -1 otherwise.
inl fns (mask : u32) (base : u32) (offset : i32) : u32 = $"__fns(!mask,!base,!offset)"

// Device scope atomic addition.
inl atomic_add_ref forall el. (a : ref el) (v : el) : el = $"atomicAdd(&!a,!v)"

// Device scope atomic addition.
inl atomic_add forall el. (a : array el) (v : el) : el = $"atomicAdd(!a,!v)"

// Updates the value atomically given the mapping function.
inl atomic_cas_update forall t. (a : array t) (f : t -> t) =
    loop.while' (const true) fun () =>
        inl old = index a 0
        inl new = f old
        inl cas forall t'. (_ : phantom t') =
            inl old : t' * t' = reinterpret_cast_value old, reinterpret_cast_value new
            inl old' = $"atomicCAS(&!a,!old,!new)"
            if old = old' then loop.break()
        match (sizeof : _ t).value with
        | 2 => cas (phantom : _ u16)
        | 4 => cas (phantom : _ u32)
        | 8 => cas (phantom : _ u64)
        | 16 => cas (phantom : _ t)
        | size => 
            assert (size = 2 || size = 4 || size = 8 || size = 16) "The type used in the cas_update has to be 2,4,8 or 16 bytes long."
            failwith "Aborting the kernel in atomic_cas_update."

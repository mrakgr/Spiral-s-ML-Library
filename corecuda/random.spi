open corebase
open refm

inl globals() = global "#include <curand_kernel.h>"

// Returns the clock time in nanoseconds.
inl clock64() : u64 = $"clock64()"

nominal philox_state = $'curandStatePhilox4_32_10_t'

prototype init_rng s : {seed : u64; subsequence : u64; offset : u64} -> ref s -> ()
prototype u32 s : ref s -> u32

// Generates an uniform value in the (0,1] range.
prototype uniform s : ref s -> f32
prototype normal s : ref s -> f32
prototype log_normal s : {mean : f32; stddev : f32} -> ref s -> f32
prototype poisson s : {lambda : f32} -> ref s -> u32
prototype skipahead s : {steps : u64} -> ref s -> ()
prototype skipahead_sequence s : {steps : u64} -> ref s -> ()

instance init_rng philox_state = fun {seed subsequence offset} s => 
    globals()
    $'curand_init(!seed,!subsequence,!offset,&!s)'

// Should be used to init the rng state.
inl init forall s {init_rng}. args : ref s =
    inl s = $"`s \v"
    init_rng args s
    s

instance u32 philox_state = fun s => $"curand(&!s)"

inl u8_4 s : u8 * u8 * u8 * u8 =
    inl x = u32 s
    conv x, conv (x >>> 8), conv (x >>> 16), conv (x >>> 24)
inl u64 x : u64 = conv (u32 x) <<< 32 ||| conv (u32 x)
inl u32_4 (s : philox_state) : u32 * u32 * u32 * u32= 
    inl x : $"uint4" = $"curand4(&!s)"
    $"!x.x", $"!x.y", $"!x.z", $"!x.w"

// The unbiased int range sampler. The prototype code is taken from:
// https://www.pcg-random.org/posts/bounded-rands.html

// The modulo version of the unbiased sampler. Faster than the divison based one according to the
// article. As GPUs don't support 64-bit arithmetic in hardware, but emulate them using sequences of
// 32 bit instructructions, I won't be implementing the integer sampling that requires 64-bit 
// multiplcation as most likely it'd be slower than these.
inl uint_ubound rand range s =
    if lit_is range then
        // calculates 2**32 % range
        inl bottom = (0 - range) % range
        let rec loop() =
            inl r = rand s
            if r >= bottom then r else loop()
        loop() % range
    else
        let rec loop() =
            inl r = rand s
            inl x = r % range
            if r - x <= 0 - range then x else loop()
        loop()
inl u32_ubound range s : u32 = uint_ubound u32 range s
inl u64_ubound range s : u64 = uint_ubound u64 range s

let int_range forall int{number; int}. ({from nearTo} : {from : int; nearTo : int}) s : int = 
    inl u32() = u32_ubound conv(nearTo - from) s + conv from |> conv : int
    inl u64() = u64_ubound conv(nearTo - from) s + conv from |> conv : int
    real
        typecase int with
        | i64 => u64()
        | u64 => u64()
        | _ => u32()

// Shuffles the array.
inl shuffle' forall (array : * -> *){index; set; length} el. rng (ar : array el) : () =
    // Knuth shuffle
    loop.for' {from=0; nearTo=length ar - 1} fun i =>
        inl j = int_range {from=i; nearTo=length ar} rng
        inl tmp = index ar i
        set ar i (index ar j)
        set ar j tmp

// Shuffles the array.
inl shuffle forall (array : * -> *){index; set; length} el. (ar : array el) : () =
    inl rng : _ philox_state = init {seed = clock64(); subsequence=0; offset=0}
    shuffle' rng ar

instance uniform philox_state = fun s => $"curand_uniform(&!s)"
instance normal philox_state = fun s => $"curand_normal(&!s)"
instance log_normal philox_state = fun {mean stddev} s => $"curand_log_normal(&!s,!mean,!stddev)"
instance poisson philox_state = fun {lambda} s => $"curand_poisson(&!s,!lambda)"
instance skipahead philox_state = fun {steps} s => $"skipahead(!steps,&!s)"
instance skipahead_sequence philox_state = fun {steps} s => $"skipahead_sequence(!steps,&!s)"

// Gets the position of the i-th (starting at 0) set bit in a pair of u32 masks.
inl sample_masked_bit_u32_2 (a,b : u32 * u32) (i : i32) =
    inl fns (mask : u32) (offset : i32) : u32 = intrinsic.fns mask 0 (conv offset + 1)
    inl a_popc = intrinsic.popc_u32 a
    if i < a_popc then fns a i else fns b (i - a_popc) + 32

inl sample_masked_bit_u64 (x : u64) i = sample_masked_bit_u32_2 (conv x, conv (x >>> 32)) i

open arraym
open sam

// Randomly samples an index of an action with replacement.
// Takes in a unnormalized probability distribution as the first argument.
// Returns the index of a randomly selected item inside it.
let sample_discrete' forall dim. (dist : sa dim float) rng =
    inl dist = scan_inclusive (+) dist
    inl sum = last dist
    inl r = uniform rng * sum
    let rec loop i =
        if i < length dist then // Note: Since the CUDA random number generators are (0,1] rather than [0,1) `<=` is used instead of `<` like in the FPGA example.
            if r <= index dist i then i
            else loop (i + 1)
        else length dist - 1
    loop 0
    
// Randomly samples an action with replacement.
// Takes in a unnormalized probability distribution as the first argument.
// Returns the index of a randomly selected item inside it.
let sample_discrete forall dim el. (dist : sa dim (el * float)) rng =
    inl i = sample_discrete' (map snd dist) rng
    fst (index dist i)

// inl test1() =
//     open inv_arraym
//     inl out : inv_array array f32 = create 512
//     inl grid_range () : int = $"gridDim.x * blockDim.x"
//     inl linear_id () : int = $"threadIdx.x + blockIdx.x * blockDim.x"

//     inl blocks = 2
//     inl grids = divup (length out) blocks
//     run grids blocks (fun () =>
//         globals()
//         inl from = linear_id()
//         inl x : _ philox_state = init {seed=conv from; subsequence=0; offset=0}
//         loop.forBy {from nearTo=length out; by=grid_range()} (fun i () =>
//             set out i (normal x)
//             ) ()
//         )
//     out

// inl test2() =
//     open inv_arraym
//     inl out : inv_array array u32 = create 512
//     inl grid_range () : int = $"gridDim.x * blockDim.x"
//     inl linear_id () : int = $"threadIdx.x + blockIdx.x * blockDim.x"

//     inl blocks = 16
//     inl grids = divup (length out) blocks
//     run grids blocks (fun () =>
//         globals()
//         inl from = linear_id()
//         inl x : _ philox_state = init {seed=conv from; subsequence=0; offset=0}
//         loop.forBy {from nearTo=length out; by=grid_range()} (fun i () =>
//             set out i (u32_range 52 x)
//             ) ()
//         )
//     out
    
// inl test2_1() =
//     open inv_arraym
//     inl out : inv_array array u32 = create 512
//     inl grid_range () : int = $"gridDim.x * blockDim.x"
//     inl linear_id () : int = $"threadIdx.x + blockIdx.x * blockDim.x"

//     inl blocks = 16
//     inl grids = divup (length out) blocks
//     run grids blocks (fun () =>
//         globals()
//         inl from = linear_id()
//         inl x : _ philox_state = init {seed=conv from; subsequence=0; offset=0}
//         loop.forBy {from nearTo=length out; by=grid_range()} (fun i () =>
//             set out i (u32_range (dyn 52) x)
//             ) ()
//         )
//     out

// inl test3() =
//     inl sample mask c =
//         loop.for {from=0; nearTo=64u32} (fun i (_,c as state) =>
//             if c > 0 then 
//                 i, if mask &&& (1 <<< conv i) = 0 then c else c-1
//             else state
//             ) (0, c+1)
//         |> fst

//     open inv_arraym
//     inl out : inv_array array _ = create (1028*16)
//     inl grid_range () : int = $"gridDim.x * blockDim.x"
//     inl linear_id () : int = $"threadIdx.x + blockIdx.x * blockDim.x"

//     inl blocks = 64
//     inl grids = divup (length out) blocks
//     run grids blocks (fun () =>
//         globals()
//         inl from = linear_id()
//         inl x : _ philox_state = init {seed=conv from; subsequence=0; offset=0}
//         loop.forBy {from nearTo=length out; by=grid_range()} (fun i () =>
//             inl r = u64 x
//             if intrinsic.popc_u64 r > 0 then
//                 inl base = u32_range (intrinsic.popc_u64 r |> conv) x
//                 inl i = sample_masked_bit_u64 r (conv base)
//                 inl i' = sample r base
//                 // inl x = r &&& ~~~(1 <<< conv i)
//                 i - i'
//             else
//                 0
//             |> set out i
//             ) ()
//         )
//     inl out = out.arrays
//     $"print(cp.sum(!out))"
//     ()

// inl main() = test3()
open corebase
open refm

nominal latch scope = $'cuda::latch<`scope>'

inl globals() = global "#include <cuda/latch>"

inl create_latch_in_thread (i : int) : ref (latch thread_scope.thread) = globals() . create_thread_var (const i)
inl create_latch_in_grid (i : int) : ref (latch thread_scope.device) = globals() . create_static_var (const i)
inl create_latch_in_block (i : int) : ref (latch thread_scope.block) = globals() . create_shared_var (const i)

inl count_down' forall scope. (x : ref (latch scope)) (i : int) : () = $"!x.count_down(!i)"
inl count_down forall scope. (x : ref (latch scope)) : () = $"!x.count_down()"
inl try_wait forall scope. (x : ref (latch scope)) : bool = $"!x.try_wait()"
inl wait forall scope. (x : ref (latch scope)) : () = $"!x.wait()"
inl arrive_and_wait' forall scope. (x : ref (latch scope)) (i : int) : () = $"!x.arrive_and_wait(!i)"
inl arrive_and_wait forall scope. (x : ref (latch scope)) : () = $"!x.arrive_and_wait()"
